// Generated by js_of_ocaml 3.6.0
(function(joo_global_object)
   {"use strict";
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return caml_utf16_of_utf8(this.c)
        }};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toString()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_bytes(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_jsbytes(h,v.c);break;
        case 2:h = caml_hash_mix_bytes_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(caml_is_ml_bytes(obj))
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(caml_is_ml_string(obj))
           {var jsbytes=caml_jsbytes_of_string(obj);
            for(var b=jsbytes,l=jsbytes.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0}
          else
           if(typeof obj === "string")
            for(var b=obj,l=obj.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
           else
            if(obj === (obj | 0))
             {count--;hash_accu = hash_accu * 65599 + obj | 0}
            else
             if(obj === + obj)
              {count--;
               var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
               for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
             else
              if(obj && obj.caml_custom)
               if
                (caml_custom_ops[obj.caml_custom]
                 &&
                 caml_custom_ops[obj.caml_custom].hash)
                {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
                 hash_accu = hash_accu * 65599 + h | 0}}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    var
     caml_argv=
      function()
        {var g=joo_global_object,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       ();
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     fallback=[0,0,0,caml_string_of_jsbytes("__fallback__")],
     acc=[0,[0,[0,1],0],0],
     public_methods=[0,caml_string_of_jsbytes("f")],
     msg_sender=caml_string_of_jsbytes("_msg_sender_"),
     msg_value=caml_string_of_jsbytes("_msg_value_"),
     balance=caml_string_of_jsbytes("_balance_"),
     saved=caml_string_of_jsbytes("_saved"),
     stack=caml_string_of_jsbytes("_stack_"),
     dummy=[0,0],
     ret=caml_string_of_jsbytes("ret"),
     runtime=caml_string_of_jsbytes("runtime"),
     dispatch=[0,1,[0,1,0],caml_string_of_jsbytes("dispatch")],
     int_of_unit=[0,0],
     top=[0,0,0];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _e_=caml_string_of_jsbytes("input"),
     _d_=caml_string_of_jsbytes("%.12g"),
     _c_=caml_string_of_jsbytes("."),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _g_=caml_string_of_jsbytes("\\\\"),
     _h_=caml_string_of_jsbytes("\\'"),
     _i_=caml_string_of_jsbytes("\\b"),
     _j_=caml_string_of_jsbytes("\\t"),
     _k_=caml_string_of_jsbytes("\\n"),
     _l_=caml_string_of_jsbytes("\\r"),
     _f_=caml_string_of_jsbytes("Char.chr"),
     _n_=caml_string_of_jsbytes("nth"),
     _o_=caml_string_of_jsbytes("List.nth"),
     _m_=caml_string_of_jsbytes("hd"),
     _r_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _q_=caml_string_of_jsbytes("Bytes.blit"),
     _p_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _u_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     _t_=caml_string_of_jsbytes(""),
     _s_=caml_string_of_jsbytes("String.concat"),
     _v_=caml_string_of_jsbytes("Array.blit"),
     _A_=caml_string_of_jsbytes("Map.remove_min_elt"),
     _B_=[0,0,0,0],
     _C_=[0,caml_string_of_jsbytes("map.ml"),398,10],
     _D_=[0,0,0],
     _w_=caml_string_of_jsbytes("Map.bal"),
     _x_=caml_string_of_jsbytes("Map.bal"),
     _y_=caml_string_of_jsbytes("Map.bal"),
     _z_=caml_string_of_jsbytes("Map.bal"),
     _F_=caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     _I_=[0,caml_string_of_jsbytes("stream.ml"),53,12],
     _J_=[0,0],
     _K_=[0,caml_string_of_jsbytes("stream.ml"),82,12],
     _G_=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
     _H_=caml_string_of_jsbytes("Stdlib.Stream.Error"),
     _L_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _U_=caml_string_of_jsbytes("%c"),
     _V_=caml_string_of_jsbytes("%s"),
     _W_=caml_string_of_jsbytes("%i"),
     _X_=caml_string_of_jsbytes("%li"),
     _Y_=caml_string_of_jsbytes("%ni"),
     _Z_=caml_string_of_jsbytes("%Li"),
     ___=caml_string_of_jsbytes("%f"),
     _$_=caml_string_of_jsbytes("%B"),
     _aa_=caml_string_of_jsbytes("%{"),
     _ab_=caml_string_of_jsbytes("%}"),
     _ac_=caml_string_of_jsbytes("%("),
     _ad_=caml_string_of_jsbytes("%)"),
     _ae_=caml_string_of_jsbytes("%a"),
     _af_=caml_string_of_jsbytes("%t"),
     _ag_=caml_string_of_jsbytes("%?"),
     _ah_=caml_string_of_jsbytes("%r"),
     _ai_=caml_string_of_jsbytes("%_r"),
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,23],
     _au_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),811,21],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),812,21],
     _av_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),816,21],
     _aw_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,19],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),820,19],
     _ax_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,22],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),824,22],
     _ay_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),828,30],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),829,30],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),833,26],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),834,26],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),843,28],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),844,28],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),848,23],
     _bv_=caml_string_of_jsbytes("%u"),
     _bt_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1556,4],
     _bu_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bw_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1624,39],
     _bx_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1647,31],
     _by_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1648,31],
     _bz_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bA_=caml_string_of_jsbytes("@{"),
     _bB_=caml_string_of_jsbytes("@["),
     _br_=caml_string_of_jsbytes("nan"),
     _bs_=caml_string_of_jsbytes("."),
     _bp_=caml_string_of_jsbytes("neg_infinity"),
     _bq_=caml_string_of_jsbytes("infinity"),
     _bo_=caml_string_of_jsbytes("%.12g"),
     _bc_=caml_string_of_jsbytes("%+nd"),
     _bd_=caml_string_of_jsbytes("% nd"),
     _bf_=caml_string_of_jsbytes("%+ni"),
     _bg_=caml_string_of_jsbytes("% ni"),
     _bh_=caml_string_of_jsbytes("%nx"),
     _bi_=caml_string_of_jsbytes("%#nx"),
     _bj_=caml_string_of_jsbytes("%nX"),
     _bk_=caml_string_of_jsbytes("%#nX"),
     _bl_=caml_string_of_jsbytes("%no"),
     _bm_=caml_string_of_jsbytes("%#no"),
     _bb_=caml_string_of_jsbytes("%nd"),
     _be_=caml_string_of_jsbytes("%ni"),
     _bn_=caml_string_of_jsbytes("%nu"),
     _a1_=caml_string_of_jsbytes("%+ld"),
     _a2_=caml_string_of_jsbytes("% ld"),
     _a4_=caml_string_of_jsbytes("%+li"),
     _a5_=caml_string_of_jsbytes("% li"),
     _a6_=caml_string_of_jsbytes("%lx"),
     _a7_=caml_string_of_jsbytes("%#lx"),
     _a8_=caml_string_of_jsbytes("%lX"),
     _a9_=caml_string_of_jsbytes("%#lX"),
     _a__=caml_string_of_jsbytes("%lo"),
     _a$_=caml_string_of_jsbytes("%#lo"),
     _a0_=caml_string_of_jsbytes("%ld"),
     _a3_=caml_string_of_jsbytes("%li"),
     _ba_=caml_string_of_jsbytes("%lu"),
     _aO_=caml_string_of_jsbytes("%+Ld"),
     _aP_=caml_string_of_jsbytes("% Ld"),
     _aR_=caml_string_of_jsbytes("%+Li"),
     _aS_=caml_string_of_jsbytes("% Li"),
     _aT_=caml_string_of_jsbytes("%Lx"),
     _aU_=caml_string_of_jsbytes("%#Lx"),
     _aV_=caml_string_of_jsbytes("%LX"),
     _aW_=caml_string_of_jsbytes("%#LX"),
     _aX_=caml_string_of_jsbytes("%Lo"),
     _aY_=caml_string_of_jsbytes("%#Lo"),
     _aN_=caml_string_of_jsbytes("%Ld"),
     _aQ_=caml_string_of_jsbytes("%Li"),
     _aZ_=caml_string_of_jsbytes("%Lu"),
     _aB_=caml_string_of_jsbytes("%+d"),
     _aC_=caml_string_of_jsbytes("% d"),
     _aE_=caml_string_of_jsbytes("%+i"),
     _aF_=caml_string_of_jsbytes("% i"),
     _aG_=caml_string_of_jsbytes("%x"),
     _aH_=caml_string_of_jsbytes("%#x"),
     _aI_=caml_string_of_jsbytes("%X"),
     _aJ_=caml_string_of_jsbytes("%#X"),
     _aK_=caml_string_of_jsbytes("%o"),
     _aL_=caml_string_of_jsbytes("%#o"),
     _aA_=caml_string_of_jsbytes("%d"),
     _aD_=caml_string_of_jsbytes("%i"),
     _aM_=caml_string_of_jsbytes("%u"),
     _M_=caml_string_of_jsbytes("@]"),
     _N_=caml_string_of_jsbytes("@}"),
     _O_=caml_string_of_jsbytes("@?"),
     _P_=caml_string_of_jsbytes("@\n"),
     _Q_=caml_string_of_jsbytes("@."),
     _R_=caml_string_of_jsbytes("@@"),
     _S_=caml_string_of_jsbytes("@%"),
     _T_=caml_string_of_jsbytes("@"),
     _az_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bF_=caml_string_of_jsbytes(""),
     _bG_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bL_=caml_string_of_jsbytes("Out of memory"),
     _bM_=caml_string_of_jsbytes("Stack overflow"),
     _bN_=caml_string_of_jsbytes("Pattern matching failed"),
     _bO_=caml_string_of_jsbytes("Assertion failed"),
     _bP_=caml_string_of_jsbytes("Undefined recursive module"),
     _bH_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bI_=caml_string_of_jsbytes(""),
     _bJ_=caml_string_of_jsbytes(""),
     _bK_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bE_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bC_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bD_=caml_string_of_jsbytes("_"),
     _bQ_=caml_string_of_jsbytes("x"),
     _i9_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _i7_=caml_string_of_jsbytes("CAMLRUNPARAM"),
     _bR_=caml_string_of_jsbytes(""),
     _bT_=caml_string_of_jsbytes(""),
     _bV_=caml_string_of_jsbytes(""),
     _bW_=caml_string_of_jsbytes(""),
     _bX_=caml_string_of_jsbytes(""),
     _bY_=caml_string_of_jsbytes(""),
     _b0_=caml_string_of_jsbytes(""),
     _bZ_=caml_string_of_jsbytes(""),
     _bU_=caml_string_of_jsbytes("Illegal character "),
     _b1_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     _b2_=caml_string_of_jsbytes("jsError"),
     _cb_=caml_string_of_jsbytes(" + "),
     _cc_=caml_string_of_jsbytes(" - "),
     _cd_=caml_string_of_jsbytes(" * "),
     _ce_=caml_string_of_jsbytes(" / "),
     _cf_=caml_string_of_jsbytes("-"),
     _cv_=caml_string_of_jsbytes("\n"),
     _cs_=caml_string_of_jsbytes("nat"),
     _cl_=caml_string_of_jsbytes("])."),
     _cm_=caml_string_of_jsbytes(","),
     _cn_=caml_string_of_jsbytes("["),
     _co_=caml_string_of_jsbytes("],"),
     _cp_=caml_string_of_jsbytes(","),
     _cq_=caml_string_of_jsbytes("["),
     _cr_=caml_string_of_jsbytes(","),
     _ct_=caml_string_of_jsbytes(","),
     _cu_=caml_string_of_jsbytes("eq("),
     _cj_=caml_string_of_jsbytes(" "),
     _ck_=caml_string_of_jsbytes(" "),
     _cg_=caml_string_of_jsbytes(")"),
     _ch_=caml_string_of_jsbytes(","),
     _ci_=caml_string_of_jsbytes("("),
     _b$_=caml_string_of_jsbytes(")"),
     _ca_=caml_string_of_jsbytes("("),
     _b6_=caml_string_of_jsbytes(">="),
     _b7_=caml_string_of_jsbytes("=<"),
     _b8_=caml_string_of_jsbytes("="),
     _b9_=caml_string_of_jsbytes("<"),
     _b__=caml_string_of_jsbytes(">"),
     _b3_=caml_string_of_jsbytes(")"),
     _b4_=caml_string_of_jsbytes(","),
     _b5_=caml_string_of_jsbytes("("),
     _cw_=[0,caml_string_of_jsbytes("utils.ml"),12,10],
     _cB_=[0,0],
     _cC_=[0,0],
     _cL_=caml_string_of_jsbytes("this"),
     _cM_=caml_string_of_jsbytes("msg.sender"),
     _cN_=caml_string_of_jsbytes("msg.value"),
     _cO_=caml_string_of_jsbytes(")"),
     _cP_=caml_string_of_jsbytes(" + "),
     _cQ_=caml_string_of_jsbytes("("),
     _cR_=caml_string_of_jsbytes(")"),
     _cS_=caml_string_of_jsbytes(" - "),
     _cT_=caml_string_of_jsbytes("("),
     _cU_=caml_string_of_jsbytes(")"),
     _cV_=caml_string_of_jsbytes(" * "),
     _cW_=caml_string_of_jsbytes("("),
     _cX_=caml_string_of_jsbytes(")"),
     _cY_=caml_string_of_jsbytes(" / "),
     _cZ_=caml_string_of_jsbytes("("),
     _c0_=caml_string_of_jsbytes("-"),
     _c1_=caml_string_of_jsbytes(")"),
     _c2_=caml_string_of_jsbytes(" >= "),
     _c3_=caml_string_of_jsbytes("("),
     _c4_=caml_string_of_jsbytes(")"),
     _c5_=caml_string_of_jsbytes(" > "),
     _c6_=caml_string_of_jsbytes("("),
     _c7_=caml_string_of_jsbytes(")"),
     _c8_=caml_string_of_jsbytes(" == "),
     _c9_=caml_string_of_jsbytes("("),
     _c__=caml_string_of_jsbytes(")"),
     _c$_=caml_string_of_jsbytes(" && "),
     _da_=caml_string_of_jsbytes("("),
     _db_=caml_string_of_jsbytes(")"),
     _dc_=caml_string_of_jsbytes(" || "),
     _dd_=caml_string_of_jsbytes("("),
     _de_=caml_string_of_jsbytes("!"),
     _df_=caml_string_of_jsbytes(".balance"),
     _du_=caml_string_of_jsbytes(""),
     _dK_=caml_string_of_jsbytes("\n"),
     _dL_=caml_string_of_jsbytes(""),
     _dv_=caml_string_of_jsbytes(""),
     _dx_=caml_string_of_jsbytes("return;"),
     _dy_=caml_string_of_jsbytes("revert();"),
     _dz_=caml_string_of_jsbytes(";"),
     _dA_=caml_string_of_jsbytes("return "),
     _dB_=[0,0],
     _dC_=caml_string_of_jsbytes(""),
     _dE_=caml_string_of_jsbytes("\n"),
     _dD_=caml_string_of_jsbytes(";"),
     _dF_=[0,0],
     _dG_=caml_string_of_jsbytes("}\n"),
     _dH_=caml_string_of_jsbytes("} else {\n"),
     _dI_=caml_string_of_jsbytes(" {\n"),
     _dJ_=caml_string_of_jsbytes("if "),
     _dw_=caml_string_of_jsbytes(""),
     _d8_=[0,caml_string_of_jsbytes("microSolidity.ml"),307,17],
     _d7_=caml_string_of_jsbytes("\n"),
     _d3_=caml_string_of_jsbytes("}\n"),
     _d4_=caml_string_of_jsbytes("\n"),
     _d5_=caml_string_of_jsbytes(" {\n"),
     _d6_=caml_string_of_jsbytes("contract "),
     _d1_=caml_string_of_jsbytes("fallback "),
     _d2_=caml_string_of_jsbytes(""),
     _d0_=caml_string_of_jsbytes("\n"),
     _dY_=caml_string_of_jsbytes(" "),
     _dZ_=caml_string_of_jsbytes("function "),
     _dN_=caml_string_of_jsbytes(";\n"),
     _dM_=caml_string_of_jsbytes("}\n\n"),
     _dO_=caml_string_of_jsbytes(""),
     _dP_=caml_string_of_jsbytes("{\n"),
     _dQ_=caml_string_of_jsbytes("payable "),
     _dX_=caml_string_of_jsbytes(" "),
     _dV_=caml_string_of_jsbytes(") "),
     _dW_=caml_string_of_jsbytes("returns ("),
     _dR_=caml_string_of_jsbytes(""),
     _dS_=caml_string_of_jsbytes(") "),
     _dT_=caml_string_of_jsbytes(","),
     _dU_=caml_string_of_jsbytes("("),
     _dn_=caml_string_of_jsbytes(")"),
     _do_=caml_string_of_jsbytes(","),
     _dp_=caml_string_of_jsbytes("("),
     _dq_=caml_string_of_jsbytes(")"),
     _dr_=caml_string_of_jsbytes(".value("),
     _dt_=caml_string_of_jsbytes(""),
     _ds_=caml_string_of_jsbytes("."),
     _dk_=caml_string_of_jsbytes(""),
     _dl_=caml_string_of_jsbytes(" = "),
     _dm_=caml_string_of_jsbytes(" = "),
     _dg_=caml_string_of_jsbytes(")"),
     _dh_=caml_string_of_jsbytes(" -> "),
     _di_=caml_string_of_jsbytes("*"),
     _dj_=caml_string_of_jsbytes(":("),
     _cJ_=caml_string_of_jsbytes(";\n"),
     _cK_=caml_string_of_jsbytes(""),
     _cI_=[0,caml_string_of_jsbytes("microSolidity.ml"),150,12],
     _cH_=caml_string_of_jsbytes(" "),
     _cD_=caml_string_of_jsbytes("?VOID?"),
     _cE_=caml_string_of_jsbytes("int"),
     _cF_=caml_string_of_jsbytes("bool"),
     _cG_=caml_string_of_jsbytes("address"),
     _cx_=[0,0],
     _cy_=[0,0],
     _cz_=[0,0],
     _cA_=[0,0],
     _ec_=[0,[0,caml_string_of_jsbytes("-")],0],
     _eq_=[0,caml_string_of_jsbytes("parserCombinators.ml"),100,10],
     _er_=caml_string_of_jsbytes("kleenestar"),
     _ep_=caml_string_of_jsbytes("ok"),
     _en_=caml_string_of_jsbytes("ok"),
     _eo_=caml_string_of_jsbytes(" expected"),
     _el_=caml_string_of_jsbytes("eof expected"),
     _em_=caml_string_of_jsbytes("ok"),
     _ej_=caml_string_of_jsbytes("\n"),
     _ek_=caml_string_of_jsbytes(""),
     _ed_=caml_string_of_jsbytes("Kwd "),
     _ee_=caml_string_of_jsbytes("Ident "),
     _ef_=caml_string_of_jsbytes("int "),
     _eg_=caml_string_of_jsbytes("float "),
     _eh_=caml_string_of_jsbytes("string "),
     _ei_=caml_string_of_jsbytes("char "),
     _d$_=caml_string_of_jsbytes("ok"),
     _ea_=caml_string_of_jsbytes("ok"),
     _eb_=caml_string_of_jsbytes("\n| "),
     _d9_=caml_string_of_jsbytes("ParserCombinators.Fail"),
     _d__=caml_string_of_jsbytes("ParserCombinators.Reject"),
     _fl_=caml_string_of_jsbytes("-"),
     _fm_=[0,caml_string_of_jsbytes("-")],
     _fn_=[0,caml_string_of_jsbytes("+")],
     _fo_=[0,caml_string_of_jsbytes("/")],
     _fp_=[0,caml_string_of_jsbytes("*")],
     _fq_=caml_string_of_jsbytes("!"),
     _fr_=caml_string_of_jsbytes(")"),
     _fs_=caml_string_of_jsbytes("("),
     _ft_=[0,caml_string_of_jsbytes("<=")],
     _fu_=[0,caml_string_of_jsbytes("<")],
     _fv_=[0,caml_string_of_jsbytes(">=")],
     _fw_=[0,caml_string_of_jsbytes(">")],
     _fx_=[0,caml_string_of_jsbytes("!=")],
     _fy_=[0,caml_string_of_jsbytes("==")],
     _fz_=[0,caml_string_of_jsbytes("&&")],
     _fA_=[0,caml_string_of_jsbytes("||")],
     _fB_=caml_string_of_jsbytes("balance"),
     _fC_=caml_string_of_jsbytes("."),
     _fD_=caml_string_of_jsbytes(")"),
     _fE_=caml_string_of_jsbytes("("),
     _fR_=[0,0,0],
     _ge_=caml_string_of_jsbytes("}"),
     _gf_=caml_string_of_jsbytes("{"),
     _gg_=caml_string_of_jsbytes("else"),
     _gh_=caml_string_of_jsbytes("if"),
     _gj_=caml_string_of_jsbytes(";"),
     _gk_=caml_string_of_jsbytes("ok"),
     _gi_=caml_string_of_jsbytes("="),
     _gl_=caml_string_of_jsbytes("Unknown field/var"),
     _gm_=[0,0,0],
     _g1_=caml_string_of_jsbytes(" >>\n"),
     _g2_=caml_string_of_jsbytes("<< "),
     _g3_=caml_string_of_jsbytes("######## SYNTAX ERROR #######\n"),
     _g4_=caml_string_of_jsbytes("######## UNHANDLED EXCEPTION #######\n"),
     _gV_=caml_string_of_jsbytes("{"),
     _gW_=caml_string_of_jsbytes("}"),
     _gX_=[0,caml_string_of_jsbytes("} expected, but eof found"),0],
     _gY_=caml_string_of_jsbytes("contract"),
     _g0_=caml_string_of_jsbytes("{"),
     _gZ_=caml_string_of_jsbytes("contract declaration expected"),
     _gP_=caml_string_of_jsbytes("}"),
     _gQ_=caml_string_of_jsbytes("{"),
     _gR_=caml_string_of_jsbytes("contract"),
     _gB_=[0,caml_string_of_jsbytes("parser.ml"),589,17],
     _gx_=caml_string_of_jsbytes("returns"),
     _gy_=[0,0],
     _gz_=caml_string_of_jsbytes("function"),
     _gv_=caml_string_of_jsbytes("must be payable"),
     _gt_=caml_string_of_jsbytes("}"),
     _gu_=caml_string_of_jsbytes("{"),
     _gw_=caml_string_of_jsbytes("payable"),
     _gr_=[0,0],
     _gs_=caml_string_of_jsbytes(";"),
     _go_=[0,0],
     _gp_=caml_string_of_jsbytes(","),
     _gq_=[0,0],
     _gb_=caml_string_of_jsbytes("return without value of type "),
     _gc_=caml_string_of_jsbytes(";"),
     _gd_=caml_string_of_jsbytes("return"),
     _ga_=caml_string_of_jsbytes("implicit return not allowed here"),
     _f$_=caml_string_of_jsbytes("ok"),
     _f__=caml_string_of_jsbytes("ok"),
     _f6_=caml_string_of_jsbytes(";"),
     _f7_=caml_string_of_jsbytes(")"),
     _f8_=caml_string_of_jsbytes("("),
     _f9_=caml_string_of_jsbytes("revert"),
     _f4_=caml_string_of_jsbytes("."),
     _f5_=[0,3,0],
     _f2_=caml_string_of_jsbytes("value"),
     _f3_=caml_string_of_jsbytes("."),
     _f1_=caml_string_of_jsbytes("ok"),
     _f0_=caml_string_of_jsbytes("ident expected"),
     _fK_=caml_string_of_jsbytes(";"),
     _fc_=[0,1,2],
     _e2_=caml_string_of_jsbytes(")"),
     _e3_=caml_string_of_jsbytes("("),
     _eZ_=caml_string_of_jsbytes("value expected, eof found"),
     _eT_=caml_string_of_jsbytes("false"),
     _eU_=caml_string_of_jsbytes("true"),
     _eV_=[13,1],
     _eW_=[13,0],
     _eX_=caml_string_of_jsbytes(" expected"),
     _eY_=caml_string_of_jsbytes("value of type "),
     _eR_=caml_string_of_jsbytes(" expected"),
     _eS_=caml_string_of_jsbytes("value of type "),
     _eP_=caml_string_of_jsbytes(" vs "),
     _eQ_=caml_string_of_jsbytes(" not previously declared"),
     _eO_=caml_string_of_jsbytes("ident expected"),
     _eN_=caml_string_of_jsbytes("var expected, eof found"),
     _eM_=caml_string_of_jsbytes("ok"),
     _eL_=caml_string_of_jsbytes("expected ident"),
     _eK_=caml_string_of_jsbytes("!"),
     _eJ_=caml_string_of_jsbytes(" || "),
     _eI_=caml_string_of_jsbytes(" && "),
     _eH_=caml_string_of_jsbytes(" == "),
     _eG_=caml_string_of_jsbytes(" >= "),
     _eF_=caml_string_of_jsbytes(" > "),
     _eE_=caml_string_of_jsbytes(" / "),
     _eD_=caml_string_of_jsbytes(" * "),
     _eC_=caml_string_of_jsbytes(" - "),
     _eB_=caml_string_of_jsbytes("-"),
     _eA_=caml_string_of_jsbytes(" + "),
     _ez_=caml_string_of_jsbytes(".balance"),
     _ex_=caml_string_of_jsbytes(" redeclared"),
     _ey_=caml_string_of_jsbytes("contract "),
     _eu_=caml_string_of_jsbytes("transfer"),
     _ev_=caml_string_of_jsbytes("The transfer identifier is reseved"),
     _ew_=caml_string_of_jsbytes(" redeclared"),
     _et_=caml_string_of_jsbytes(" declared twice"),
     _es_=caml_string_of_jsbytes(" should have type "),
     _e1_=[0,caml_string_of_jsbytes("this")],
     _e5_=caml_string_of_jsbytes("sender"),
     _e7_=caml_string_of_jsbytes("."),
     _e9_=caml_string_of_jsbytes("msg"),
     _fd_=caml_string_of_jsbytes("value"),
     _ff_=caml_string_of_jsbytes("."),
     _fh_=caml_string_of_jsbytes("msg"),
     _fF_=caml_string_of_jsbytes("address"),
     _fH_=caml_string_of_jsbytes("bool"),
     _fJ_=caml_string_of_jsbytes("int"),
     _fT_=caml_string_of_jsbytes(","),
     _gE_=[0,1],
     _gG_=caml_string_of_jsbytes(")"),
     _gI_=caml_string_of_jsbytes("("),
     _gK_=caml_string_of_jsbytes("fallback"),
     _gU_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("+"),
         caml_string_of_jsbytes("-"),
         caml_string_of_jsbytes("*"),
         caml_string_of_jsbytes("/"),
         caml_string_of_jsbytes("("),
         caml_string_of_jsbytes(")"),
         caml_string_of_jsbytes(">"),
         caml_string_of_jsbytes(">="),
         caml_string_of_jsbytes("=="),
         caml_string_of_jsbytes("<"),
         caml_string_of_jsbytes("<="),
         caml_string_of_jsbytes("!="),
         caml_string_of_jsbytes("&&"),
         caml_string_of_jsbytes("||"),
         caml_string_of_jsbytes("!"),
         caml_string_of_jsbytes("true"),
         caml_string_of_jsbytes("false"),
         caml_string_of_jsbytes("int"),
         caml_string_of_jsbytes("bool"),
         caml_string_of_jsbytes("address"),
         caml_string_of_jsbytes("="),
         caml_string_of_jsbytes(","),
         caml_string_of_jsbytes(";"),
         caml_string_of_jsbytes("fail"),
         caml_string_of_jsbytes("if"),
         caml_string_of_jsbytes("else"),
         caml_string_of_jsbytes("revert"),
         caml_string_of_jsbytes("{"),
         caml_string_of_jsbytes("function"),
         caml_string_of_jsbytes("fallback"),
         caml_string_of_jsbytes("}"),
         caml_string_of_jsbytes("return"),
         caml_string_of_jsbytes("returns"),
         caml_string_of_jsbytes("this"),
         caml_string_of_jsbytes("."),
         caml_string_of_jsbytes("value"),
         caml_string_of_jsbytes("balance"),
         caml_string_of_jsbytes("msg"),
         caml_string_of_jsbytes("sender"),
         caml_string_of_jsbytes("contract"),
         caml_string_of_jsbytes("payable")]),
     _g5_=caml_string_of_jsbytes(")"),
     _g6_=caml_string_of_jsbytes(" + "),
     _g7_=caml_string_of_jsbytes("("),
     _g8_=caml_string_of_jsbytes(")"),
     _g9_=caml_string_of_jsbytes(" - "),
     _g__=caml_string_of_jsbytes("("),
     _g$_=caml_string_of_jsbytes(")"),
     _ha_=caml_string_of_jsbytes(" * "),
     _hb_=caml_string_of_jsbytes("("),
     _hc_=caml_string_of_jsbytes(")"),
     _hd_=caml_string_of_jsbytes(" / "),
     _he_=caml_string_of_jsbytes("("),
     _hf_=caml_string_of_jsbytes("-"),
     _hg_=caml_string_of_jsbytes(")"),
     _hh_=caml_string_of_jsbytes(" >= "),
     _hi_=caml_string_of_jsbytes("("),
     _hj_=caml_string_of_jsbytes(")"),
     _hk_=caml_string_of_jsbytes(" > "),
     _hl_=caml_string_of_jsbytes("("),
     _hm_=caml_string_of_jsbytes(")"),
     _hn_=caml_string_of_jsbytes(" = "),
     _ho_=caml_string_of_jsbytes("("),
     _hp_=caml_string_of_jsbytes(")"),
     _hq_=caml_string_of_jsbytes(" && "),
     _hr_=caml_string_of_jsbytes("("),
     _hs_=caml_string_of_jsbytes(")"),
     _ht_=caml_string_of_jsbytes(" || "),
     _hu_=caml_string_of_jsbytes("("),
     _hv_=caml_string_of_jsbytes("!"),
     _hA_=caml_string_of_jsbytes("]\n"),
     _hB_=caml_string_of_jsbytes("+ ["),
     _hC_=caml_string_of_jsbytes("\n"),
     _hw_=caml_string_of_jsbytes(","),
     _hx_=caml_string_of_jsbytes(")"),
     _hy_=caml_string_of_jsbytes(","),
     _hz_=caml_string_of_jsbytes("("),
     _hD_=caml_string_of_jsbytes(""),
     _hE_=caml_string_of_jsbytes("]\n"),
     _hF_=caml_string_of_jsbytes("  ["),
     _hG_=[0,caml_string_of_jsbytes("types.ml"),53,18],
     _hK_=caml_string_of_jsbytes("\n\n"),
     _hH_=caml_string_of_jsbytes(") =\n"),
     _hI_=caml_string_of_jsbytes(","),
     _hJ_=caml_string_of_jsbytes("("),
     _hQ_=[0,caml_string_of_jsbytes("typeInference.ml"),66,10],
     _hZ_=[0,1],
     _h$_=caml_string_of_jsbytes("transfer"),
     _ia_=caml_string_of_jsbytes("transfer"),
     _h__=[0,caml_string_of_jsbytes("typeInference.ml"),465,9],
     _ib_=caml_string_of_jsbytes(" encoded as "),
     _h9_=[2,0],
     _h7_=[0,0],
     _h8_=[0,0],
     _h6_=[0,0],
     _h5_=[0,caml_string_of_jsbytes("typeInference.ml"),264,20],
     _h4_=[0,caml_string_of_jsbytes("typeInference.ml"),244,1],
     _h2_=caml_string_of_jsbytes(""),
     _h3_=caml_string_of_jsbytes("f"),
     _h0_=[0,0],
     _hU_=caml_string_of_jsbytes("Variable or field "),
     _hV_=caml_string_of_jsbytes("holds the unrecognized address: "),
     _hW_=caml_string_of_jsbytes(","),
     _hX_=caml_string_of_jsbytes("Known addresses: "),
     _hY_=[0,caml_string_of_jsbytes("typeInference.ml"),129,3],
     _hT_=[0,caml_string_of_jsbytes("typeInference.ml"),88,1],
     _hS_=[0,caml_string_of_jsbytes("typeInference.ml"),92,9],
     _hR_=[0,caml_string_of_jsbytes("typeInference.ml"),79,3],
     _hP_=[0,1],
     _hO_=[0,0],
     _hN_=caml_string_of_jsbytes("_"),
     _hM_=[0,0],
     _hL_=caml_string_of_jsbytes("_"),
     _ii_=[1,0],
     _ik_=[1,0],
     _il_=[1,0],
     _im_=caml_string_of_jsbytes("main__"),
     _ij_=[0,caml_string_of_jsbytes("costEquationsGeneration.ml"),117,11],
     _id_=[0,3,0],
     _ie_=[0,4,0],
     _if_=[0,3,[0,4,0]],
     _ig_=[0,0,0],
     _ih_=[0,1,0],
     _ic_=caml_string_of_jsbytes("CostEquationsGeneration.NotLinear"),
     _in_=[0,0,[0,1,[13,0]]],
     _io_=caml_string_of_jsbytes("_ret_"),
     _ip_=caml_string_of_jsbytes("_"),
     _iq_=caml_string_of_jsbytes("transfer"),
     _iu_=caml_string_of_jsbytes("transfer"),
     _it_=[0,caml_string_of_jsbytes("static.ml"),150,9],
     _iI_=caml_string_of_jsbytes(": "),
     _iJ_=caml_string_of_jsbytes("."),
     _iK_=caml_string_of_jsbytes("\n"),
     _iH_=caml_string_of_jsbytes(""),
     _iz_=caml_string_of_jsbytes("by"),
     _iA_=caml_string_of_jsbytes("in tail position "),
     _iE_=caml_string_of_jsbytes(""),
     _iB_=caml_string_of_jsbytes(" possibly called "),
     _iC_=caml_string_of_jsbytes("."),
     _iD_=caml_string_of_jsbytes("\n"),
     _iv_=caml_string_of_jsbytes("\n"),
     _iw_=caml_string_of_jsbytes("."),
     _ix_=caml_string_of_jsbytes("\n"),
     _iy_=caml_string_of_jsbytes(""),
     _iF_=
      caml_string_of_jsbytes
       ("Unbounded usage of call stack possibly detected:\n"),
     _iG_=[0,caml_string_of_jsbytes("static.ml"),174,10],
     _ir_=[0,0,0,caml_string_of_jsbytes("fallback")],
     _is_=caml_string_of_jsbytes("Static.Cycle"),
     _iU_=caml_string_of_jsbytes("Maximum stack length: "),
     _iV_=caml_string_of_jsbytes("\n"),
     _iW_=caml_string_of_jsbytes("Maximum number of locals: "),
     _iX_=caml_string_of_jsbytes("\n\n"),
     _iP_=[0,caml_string_of_jsbytes("analyzer.ml"),7,85],
     _i1_=caml_string_of_jsbytes("ms_parse"),
     _i2_=caml_string_of_jsbytes("ms_normalize"),
     _i3_=caml_string_of_jsbytes("ms_get_bounds"),
     _i4_=caml_string_of_jsbytes("ms_type_of"),
     _i5_=caml_string_of_jsbytes("ms_cost"),
     _i6_=caml_string_of_jsbytes("ms_copy_output_to_input");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    var min_int=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    function string_of_float(f)
     {var s=caml_format_float(_d_,f),l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return symbol(s,_c_);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function op(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,op(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    var oc=caml_ml_open_descriptor_out(2);
    function prerr_endline(s)
     {caml_ml_output(oc,s,0,caml_ml_string_length(s));
      caml_ml_output_char(oc,10);
      return caml_ml_flush(oc)}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_yV_)
             {_yV_ = caml_wrap_exception(_yV_);
              if(_yV_[1] !== Sys_error)throw _yV_;
              var _yU_=_yV_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function fold(none,some,param)
     {if(param){var v=param[1];return caml_call1(some,v)}return none}
    function lowercase_ascii(c)
     {if(65 <= c && ! (90 < c))return c + 32 | 0;return c}
    function f(c){if(97 <= c && ! (122 < c))return c - 32 | 0;return c}
    caml_sys_get_argv(0);
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons(a,l){return [0,a,l]}
    function hd(param){if(param){var a=param[1];return a}return failwith(_m_)}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    typeof match === "number";
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return op(l,flatten(r))}return 0}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub_string(b,ofs,len)
     {var switch$0=0;
      if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(b) - len | 0) < ofs))
       {var r=caml_create_bytes(len);
        caml_blit_bytes(b,ofs,r,0,len);
        var _yT_=r;
        switch$0 = 1}
      if(! switch$0)var _yT_=invalid_arg(_p_);
      return caml_string_of_bytes(_yT_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_r_)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _yO_=param[2],_yP_=param[1];
            if(_yO_)
             {var
               x=(caml_ml_string_length(_yP_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(_s_),
               acc=acc$0,
               param=_yO_;
              continue}
            var _yS_=caml_ml_string_length(_yP_) + acc | 0}
          else
           var _yS_=acc;
          var dst=caml_create_bytes(_yS_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _yQ_=param$0[2],_yR_=param$0[1];
              if(_yQ_)
               {caml_blit_string(_yR_,0,dst,pos,caml_ml_string_length(_yR_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_yR_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_yR_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_yQ_;
                continue}
              caml_blit_string(_yR_,0,dst,pos,caml_ml_string_length(_yR_))}
            return caml_string_of_bytes(dst)}}}
      return _t_}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _yM_=1;return _yM_}
       catch(_yN_)
        {_yN_ = caml_wrap_exception(_yN_);
         if(_yN_ === Not_found)return 0;
         throw _yN_}
      return invalid_arg(_u_)}
    function contains(s,c){return contains_from(s,0,c)}
    caml_fresh_oo_id(0);
    function _E_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_yL_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_yL_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_yG_=height(lr);
            if(_yG_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _yH_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_yH_)}
            return invalid_arg(_w_)}
          return invalid_arg(_x_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_yI_=height(rl);
            if(_yI_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _yJ_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_yJ_)}
            return invalid_arg(_y_)}
          return invalid_arg(_z_)}
        var _yK_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_yK_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _yF_=0 === c?1:0;
            if(_yF_)return _yF_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _yE_=param$0[1];
            if(_yE_){var param$0=_yE_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _yD_=param$0[1];
            if(_yD_){var param$0=_yD_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _yA_=param$0[4],_yB_=param$0[3],_yC_=param$0[2];
            if(_yA_){var param$0=_yA_;continue}
            return [0,_yC_,_yB_]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _yx_=param$0[4],_yy_=param$0[3],_yz_=param$0[2];
            if(_yx_){var param$0=_yx_;continue}
            return [0,[0,_yz_,_yy_]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _yw_=param[1];
          if(_yw_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_yw_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_A_)}
      function _x$_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _x$_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _x$_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _yt_=caml_call2(p,v,d);
            if(_yt_)
             {var _yu_=for_all(p,l);
              if(_yu_){var param$0=r;continue}
              var _yv_=_yu_}
            else
             var _yv_=_yt_;
            return _yv_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _yq_=caml_call2(p,v,d);
            if(_yq_)
             var _yr_=_yq_;
            else
             {var _ys_=exists(p,l);
              if(! _ys_){var param$0=r;continue}
              var _yr_=_ys_}
            return _yr_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _B_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _ym_=merge(f,r1,r2),
             _yn_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_yn_,_ym_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _yo_=merge(f,r1$0,r2$0),
           _yp_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_yp_,_yo_)}
        throw [0,Assert_failure,_C_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _yk_=concat(lf,rf);return [0,join(lt,v,d,rt),_yk_]}
          var _yl_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_yl_]}
        return _D_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _yh_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_yh_)
               {var _yi_=caml_call2(cmp,d1,d2);
                if(_yi_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _yj_=_yi_}
              else
               var _yj_=_yh_;
              return _yj_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_yg_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _yg_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      function add_seq(i,m)
       {var acc=m,seq=i;
        for(;;)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             next=match[2],
             x=match[1],
             v=x[2],
             k=x[1],
             acc$0=add(k,v,acc),
             acc=acc$0,
             seq=next;
            continue}
          return acc}}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_ye_=cons_enum(t,rest);
          return [0,[0,k,v],function(_yf_){return seq_of_enum(_ye_,_yf_)}]}
        return 0}
      function to_seq(m)
       {var _yc_=cons_enum(m,0);
        return function(_yd_){return seq_of_enum(_yc_,_yd_)}}
      function to_seq_from(low,m)
       {var m$0=m,c=0;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             n=caml_call2(Ord[1],v,low);
            if(0 !== n)
             {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
              var m$0=r;
              continue}
            var _ya_=[0,v,d,r,c]}
          else
           var _ya_=c;
          return function(_yb_){return seq_of_enum(_ya_,_yb_)}}}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi,
              to_seq,
              to_seq_from,
              add_seq,
              of_seq]}
    var Undefined=[248,_F_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    var
     Failure$0=[248,_G_,caml_fresh_oo_id(0)],
     Error=[248,_H_,caml_fresh_oo_id(0)];
    function fill_buff(b)
     {var len=caml_ml_bytes_length(b[2]),_x8_=b[2],switch$0=0,_x9_=b[1];
      if(0 <= len && ! ((caml_ml_bytes_length(_x8_) - len | 0) < 0))
       {var _x__=caml_ml_input(_x9_,_x8_,0,len);switch$0 = 1}
      if(! switch$0)var _x__=invalid_arg(_e_);
      b[3] = _x__;
      b[4] = 0;
      return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_I_]}
           case 2:
            var
             f=d$0[1],
             _x4_=caml_obj_tag(f),
             d$1=250 === _x4_?f[1]:246 === _x4_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _x5_=d$0[1],_x6_=_x5_[1];
            if(_x6_)
             {var _x7_=_x6_[1];
              if(_x7_){var a$0=_x7_[1];_x5_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_x5_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _x5_[1] = _J_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _xZ_=s[2];
        if(typeof _xZ_ === "number")
         return 0;
        else
         switch(_xZ_[0])
          {case 0:var a=_xZ_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_K_]}
           case 2:
            var
             f=_xZ_[1],
             _x0_=caml_obj_tag(f),
             _x1_=250 === _x0_?f[1]:246 === _x0_?force_lazy_block(f):f;
            s[2] = _x1_;
            continue;
           case 3:
            var _x2_=_xZ_[1],_x3_=_x2_[1];
            if(_x3_){var a$1=_x3_[1];return a$1}
            var x=caml_call1(_x2_[2],s[1]);
            _x2_[1] = [0,x];
            return x;
           default:
            var b=_xZ_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk(param)
     {if(param)
       {var data=param[1];
        for(;;)
         {var _xX_=data[2];
          if(typeof _xX_ !== "number")
           switch(_xX_[0])
            {case 0:
              var d=_xX_[2];data[1] = data[1] + 1 | 0;data[2] = d;return 0;
             case 3:
              var _xY_=_xX_[1];
              if(_xY_[1]){data[1] = data[1] + 1 | 0;_xY_[1] = 0;return 0}
              break;
             case 4:
              var b=_xX_[1];
              if(b[3] <= b[4])fill_buff(b);
              return 0 === b[3]
                      ?(data[2] = 0,0)
                      :(data[1] = data[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
             }
          var match=peek_data(data);
          if(match)continue;
          return 0}}
      return 0}
    function next(s)
     {var match=peek(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_L_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _xV_=len < min_len?1:0;
      if(_xV_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _xW_=0}
      else
       var _xW_=_xV_;
      return _xW_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_W_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_X_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_ab_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_ad_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_ae_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_af_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_ag_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_ah_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_ai_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _xx_=function(param){return 0},
         _xy_=function(param){return 0},
         _xz_=function(param){return 0};
        return [0,function(param){return 0},_xz_,_xy_,_xx_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _xA_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_xA_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _xB_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _xB_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _xC_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _xC_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _xD_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _xD_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _xE_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _xE_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _xF_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _xF_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _xG_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _xG_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _xH_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _xH_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _xI_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _xI_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _xJ_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _xK_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _xL_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _xL_,
                  _xK_,
                  _xJ_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _xM_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _xM_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _xN_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _xN_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _xO_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _xO_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _xP_=function(param){caml_call1(de$12,0);return 0},
           _xQ_=function(param){caml_call1(ed$12,0);return 0},
           _xR_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _xR_,
                  _xQ_,
                  _xP_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _xS_=function(param){caml_call1(de$13,0);return 0},
           _xT_=function(param){caml_call1(ed$13,0);return 0},
           _xU_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _xU_,
                  _xT_,
                  _xS_]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_aj_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_xe_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_xe_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_xf_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_xf_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_xg_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_xg_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_xh_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_xh_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_xi_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_xi_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_xj_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_xj_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_xk_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_xk_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_xl_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_xl_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_xm_=ty1[2],_xn_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_xo_=trans(_xm_,rest2$7);
              return [8,trans(_xn_,ty2),_xo_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_as_];
          break;
         case 9:
          var switch$10=0,_xp_=ty1[3],_xq_=ty1[2],_xr_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_xq_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_xr_,ty22,trans(_xp_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_at_];
          break;
         case 10:
          var _xs_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_xs_,rest2$9)]}
          throw [0,Assert_failure,_au_];
         case 11:
          var switch$11=0,_xt_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_xt_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_av_];
          break;
         case 12:
          var switch$12=0,_xu_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_xu_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_aw_];
          break;
         case 13:
          var switch$13=0,_xv_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_xv_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_ax_];
          break;
         default:
          var switch$14=0,_xw_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_xw_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ay_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_am_];
        case 1:throw [0,Assert_failure,_an_];
        case 2:throw [0,Assert_failure,_ao_];
        case 3:throw [0,Assert_failure,_ap_];
        case 4:throw [0,Assert_failure,_aq_];
        case 5:throw [0,Assert_failure,_ak_];
        case 6:throw [0,Assert_failure,_al_];
        default:throw [0,Assert_failure,_ar_]}}
    var Type_mismatch=[248,_az_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _xd_=match[2];
        if(typeof _xd_ !== "number" && 2 === _xd_[0])
         {var rest$0=_xd_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _wK_=type_padding(pad,fmtty),
           _wL_=_wK_[2],
           _wM_=_wK_[1];
          if(typeof _wL_ !== "number" && 1 === _wL_[0])
           {var
             fmtty_rest$1=_wL_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_wM_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _wN_=type_padding(pad$0,fmtty),
           _wO_=_wN_[2],
           _wP_=_wN_[1];
          if(typeof _wO_ !== "number" && 1 === _wO_[0])
           {var
             fmtty_rest$2=_wO_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_wP_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _wQ_=type_padprec(pad$1,prec,fmtty),
           _wR_=_wQ_[3],
           _wS_=_wQ_[2],
           _wT_=_wQ_[1];
          if(typeof _wR_ !== "number" && 2 === _wR_[0])
           {var
             fmtty_rest$3=_wR_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_wT_,_wS_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _wU_=type_padprec(pad$2,prec$0,fmtty),
           _wV_=_wU_[3],
           _wW_=_wU_[2],
           _wX_=_wU_[1];
          if(typeof _wV_ !== "number" && 3 === _wV_[0])
           {var
             fmtty_rest$4=_wV_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_wX_,_wW_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _wY_=type_padprec(pad$3,prec$1,fmtty),
           _wZ_=_wY_[3],
           _w0_=_wY_[2],
           _w1_=_wY_[1];
          if(typeof _wZ_ !== "number" && 4 === _wZ_[0])
           {var
             fmtty_rest$5=_wZ_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_w1_,_w0_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _w2_=type_padprec(pad$4,prec$2,fmtty),
           _w3_=_w2_[3],
           _w4_=_w2_[2],
           _w5_=_w2_[1];
          if(typeof _w3_ !== "number" && 5 === _w3_[0])
           {var
             fmtty_rest$6=_w3_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_w5_,_w4_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _w6_=type_padprec(pad$5,prec$3,fmtty),
           _w7_=_w6_[3],
           _w8_=_w6_[2],
           _w9_=_w6_[1];
          if(typeof _w7_ !== "number" && 6 === _w7_[0])
           {var
             fmtty_rest$7=_w7_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_w9_,_w8_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _w__=type_padding(pad$6,fmtty),
           _w$_=_w__[2],
           _xa_=_w__[1];
          if(typeof _w$_ !== "number" && 7 === _w$_[0])
           {var
             fmtty_rest$8=_w$_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_xa_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _xb_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_xb_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _xc_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$27=_xc_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_xc_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _wI_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_wI_))
             throw Type_mismatch;
            var _wJ_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_wJ_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _wH_=2 === padty$0?48:32,res=make(width$0,_wH_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _wF_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _wF_ >>> 0)
           {if(33 < (_wF_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _wF_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _wy_=caml_ml_bytes_length(s$0) - 1 | 0,
           _wx_=0;
          if(! (_wy_ < 0))
           {var i$0=_wx_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _wC_=match - 34 | 0,switch$2=0;
                if(58 < _wC_ >>> 0)
                 {if(93 <= _wC_)switch$2 = 1}
                else
                 if(56 < (_wC_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _wD_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _wD_=4;break;case 1:var _wD_=2;break}
              n[1] = n[1] + _wD_ | 0;
              var _wE_=i$0 + 1 | 0;
              if(_wy_ !== i$0){var i$0=_wE_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           var _wG_=copy(s$0);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _wA_=caml_ml_bytes_length(s$0) - 1 | 0,_wz_=0;
            if(! (_wA_ < 0))
             {var i=_wz_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _wB_=i + 1 | 0;
                if(_wA_ !== i){var i=_wB_;continue}
                break}}
            var _wG_=s}
          var str$0=caml_string_of_bytes(_wG_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_ws_=caml_ml_string_length(s) - 1 | 0,_wr_=0;
        if(! (_ws_ < 0))
         {var i$0=_wr_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _ww_=i$0 + 1 | 0;
            if(_ws_ !== i$0){var i$0=_ww_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _wu_=caml_ml_string_length(s) - 1 | 0,
         _wt_=0;
        if(! (_wu_ < 0))
         {var i=_wt_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _wv_=i + 1 | 0;
            if(_wu_ !== i){var i=_wv_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _wq_=_aB_;break;
        case 2:var _wq_=_aC_;break;
        case 4:var _wq_=_aE_;break;
        case 5:var _wq_=_aF_;break;
        case 6:var _wq_=_aG_;break;
        case 7:var _wq_=_aH_;break;
        case 8:var _wq_=_aI_;break;
        case 9:var _wq_=_aJ_;break;
        case 10:var _wq_=_aK_;break;
        case 11:var _wq_=_aL_;break;
        case 0:
        case 13:var _wq_=_aA_;break;
        case 3:
        case 14:var _wq_=_aD_;break;
        default:var _wq_=_aM_}
      return transform_int_alt(iconv,caml_format_int(_wq_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _wp_=_a1_;break;
        case 2:var _wp_=_a2_;break;
        case 4:var _wp_=_a4_;break;
        case 5:var _wp_=_a5_;break;
        case 6:var _wp_=_a6_;break;
        case 7:var _wp_=_a7_;break;
        case 8:var _wp_=_a8_;break;
        case 9:var _wp_=_a9_;break;
        case 10:var _wp_=_a__;break;
        case 11:var _wp_=_a$_;break;
        case 0:
        case 13:var _wp_=_a0_;break;
        case 3:
        case 14:var _wp_=_a3_;break;
        default:var _wp_=_ba_}
      return transform_int_alt(iconv,caml_format_int(_wp_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _wo_=_bc_;break;
        case 2:var _wo_=_bd_;break;
        case 4:var _wo_=_bf_;break;
        case 5:var _wo_=_bg_;break;
        case 6:var _wo_=_bh_;break;
        case 7:var _wo_=_bi_;break;
        case 8:var _wo_=_bj_;break;
        case 9:var _wo_=_bk_;break;
        case 10:var _wo_=_bl_;break;
        case 11:var _wo_=_bm_;break;
        case 0:
        case 13:var _wo_=_bb_;break;
        case 3:
        case 14:var _wo_=_be_;break;
        default:var _wo_=_bn_}
      return transform_int_alt(iconv,caml_format_int(_wo_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _wn_=_aO_;break;
        case 2:var _wn_=_aP_;break;
        case 4:var _wn_=_aR_;break;
        case 5:var _wn_=_aS_;break;
        case 6:var _wn_=_aT_;break;
        case 7:var _wn_=_aU_;break;
        case 8:var _wn_=_aV_;break;
        case 9:var _wn_=_aW_;break;
        case 10:var _wn_=_aX_;break;
        case 11:var _wn_=_aY_;break;
        case 0:
        case 13:var _wn_=_aN_;break;
        case 3:
        case 14:var _wn_=_aQ_;break;
        default:var _wn_=_aZ_}
      return transform_int_alt(iconv,caml_int64_format(_wn_,n))}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {var switch$0=0;
        if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:switch$0 = 1;break;
           case 0:
           case 3:var sign=43;break;
           default:var sign=32}
        else
         switch$0 = 1;
        if(switch$0)var sign=45;
        var s$0=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
          if(0 === l)
           var _wj_=s;
          else
           {var r=caml_create_bytes(l),_wh_=l - 1 | 0,_wg_=0;
            if(! (_wh_ < 0))
             {var i=_wg_;
              for(;;)
               {caml_bytes_unsafe_set(r,i,f(caml_bytes_unsafe_get(s,i)));
                var _wi_=i + 1 | 0;
                if(_wh_ !== i){var i=_wi_;continue}
                break}}
            var _wj_=r}
          return caml_string_of_bytes(_wj_)}
        return s$0}
      if(15 === fconv)
       var _wk_=_bo_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_string_of_jsbytes("" + prec));
        buffer_add_char(buf,symb);
        var _wk_=buffer_contents(buf)}
      var str=caml_format_float(_wk_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0.?_bp_:_bq_;
        if(4 <= match$0)return _br_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _wm_=0;
          else
           {var match=caml_string_get(str,i$0),_wl_=match - 46 | 0,switch$1=0;
            if(23 < _wl_ >>> 0)
             {if(55 === _wl_)switch$1 = 1}
            else
             if(21 < (_wl_ - 1 | 0) >>> 0)switch$1 = 1;
            if(! switch$1){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _wm_=1}
          return _wm_?str:symbol(str,_bs_)}}
      return str}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _wd_=pad[2],_we_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_we_,_wd_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_we_,_wd_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_we_,_wd_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _wf_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_wf_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_wf_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_wf_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_g_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_h_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_i_;break;
                  case 9:var str=_j_;break;
                  case 10:var str=_k_;break;
                  case 13:var str=_l_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _v$_=pad$5[2],_wa_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_wa_,_v$_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_wa_,_v$_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_wa_,_v$_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _wb_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_wb_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_wb_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_wb_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _wc_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _wc_[2] === "number")
              {var fmt=_wc_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _v9_=fmt$0[1];
           if(0 === _v9_[0])
            {var
              rest$13=fmt$0[2],
              match=_v9_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_v9_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bt_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bu_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bv_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bw_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _v__=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_v__)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_v__])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_v8_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bx_];
         default:throw [0,Assert_failure,_by_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _v7_=[8,acc,_bz_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_v7_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_v7_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _v6_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_v6_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_v6_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1];
           if(typeof fmting_lit === "number")
            switch(fmting_lit)
             {case 0:var s=_M_;break;
              case 1:var s=_N_;break;
              case 2:var s=_O_;break;
              case 3:var s=_P_;break;
              case 4:var s=_Q_;break;
              case 5:var s=_R_;break;
              default:var s=_S_}
           else
            switch(fmting_lit[0])
             {case 0:var str=fmting_lit[1],s=str;break;
              case 1:var str$0=fmting_lit[1],s=str$0;break;
              default:var c=fmting_lit[1],s=symbol(_T_,make$0(1,c))}
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _v4_=acc$0[2],_v5_=acc$0[1];
           if(0 === _v4_[0])
            {var acc$1=_v4_[1];
             strput_acc(b,_v5_);
             add_string(b,_bA_);
             var acc$0=acc$1;
             continue}
           var acc$2=_v4_[1];
           strput_acc(b,_v5_);
           add_string(b,_bB_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c$0=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c$0);
           b[2] = pos + 1 | 0;
           return 0}}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,fmt)}
    var printers=[0,0];
    function field(x,i)
     {var a=x[1 + i];
      return 1 - (typeof a === "number"?1:0)
              ?caml_obj_tag(a) === 252
                ?caml_call1(sprintf(_bC_),a)
                :caml_obj_tag(a) === 253?string_of_float(a):_bD_
              :caml_call1(sprintf(_bE_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bF_;
      var _v2_=other_fields(x,i + 1 | 0),_v3_=field(x,i);
      return caml_call2(sprintf(_bG_),_v3_,_v2_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _vZ_=other_fields(x,2),_v0_=field(x,1);
        return caml_call2(sprintf(_bH_),_v0_,_vZ_)}
      switch(match)
       {case 0:return _bI_;
        case 1:return _bJ_;
        default:var _v1_=field(x,1);return caml_call1(sprintf(_bK_),_v1_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _vX_=caml_call1(hd,x),_vW_=_vX_}catch(_vY_){var _vW_=0}
            if(_vW_){var s=_vW_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bL_;
          if(x === Stack_overflow)return _bM_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bN_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bO_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bP_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return symbol(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    try
     {var _i__=caml_sys_getenv(_i9_),params=_i__}
    catch(_vU_)
     {_vU_ = caml_wrap_exception(_vU_);
      if(_vU_ !== Not_found)throw _vU_;
      try
       {var _i8_=caml_sys_getenv(_i7_),_bS_=_i8_}
      catch(_vV_)
       {_vV_ = caml_wrap_exception(_vV_);
        if(_vV_ !== Not_found)throw _vV_;
        var _bS_=_bR_}
      var params=_bS_}
    var
     random=contains(params,82),
     prng=
      [246,
       function(_vT_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[1 + i$0] = i$0;
           var _vS_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_vS_;continue}
           var accu=[0,_bQ_],_vO_=54 + max(55,l) | 0,_vN_=0;
           if(! (_vO_ < 0))
            {var i=_vN_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[1 + k],
                str=symbol(accu[1],caml_string_of_jsbytes("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _vP_=accu[1],
                _vJ_=caml_string_get(_vP_,3) << 24,
                _vK_=caml_string_get(_vP_,2) << 16,
                _vL_=caml_string_get(_vP_,1) << 8,
                _vM_=
                 ((caml_string_get(_vP_,0) + _vL_ | 0) + _vK_ | 0)
                 +
                 _vJ_
                 |
                 0,
                _vQ_=
                 (caml_check_bound(result[1],j)[1 + j] ^ _vM_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[1 + j] = _vQ_;
               var _vR_=i + 1 | 0;
               if(_vO_ !== i){var i=_vR_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function indexfun(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod(caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function find$0(h,key)
     {var _vI_=indexfun(h,key),match=caml_check_bound(h[2],_vI_)[1 + _vI_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function f$0(s)
     {var accu=[0,0],_vF_=caml_ml_string_length(s) - 1 | 0,_vE_=0;
      if(! (_vF_ < 0))
       {var i=_vE_;
        for(;;)
         {var _vG_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _vG_ | 0;
          var _vH_=i + 1 | 0;
          if(_vF_ !== i){var i=_vH_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare=caml_string_compare,
     Vars=_E_([0,compare]),
     compare$0=caml_string_compare,
     Meths=_E_([0,compare$0]),
     compare$1=caml_int_compare,
     Labs=_E_([0,compare$1]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _vy_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _vy_;
      var _vA_=len - 1 | 0,_vz_=0;
      if(! (_vA_ < 0))
       {var i=_vz_;
        for(;;)
         {var
           _vC_=(i * 2 | 0) + 3 | 0,
           _vB_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_vC_)[1 + _vC_] = _vB_;
          var _vD_=i + 1 | 0;
          if(_vA_ !== i){var i=_vD_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var len=array[2].length - 1,_vv_=len < new_size?1:0;
      if(_vv_)
       {var a2=caml_make_vect(new_size,dummy_met),_vw_=array[2],switch$0=0;
        if
         (0
          <=
          len
          &&
          !
          ((_vw_.length - 1 - len | 0) < 0)
          &&
          !
          ((a2.length - 1 - len | 0) < 0))
         {caml_array_blit(_vw_,0,a2,0,len);switch$0 = 1}
        if(! switch$0)invalid_arg(_v_);
        array[2] = a2;
        var _vx_=0}
      else
       var _vx_=_vv_;
      return _vx_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _vt_=caml_call2(Meths[27],name,table[3]);return _vt_}
      catch(_vu_)
       {_vu_ = caml_wrap_exception(_vu_);
        if(_vu_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _vu_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _vr_=caml_call2(Vars[27],name,table[7]);return _vr_}
      catch(_vs_)
       {_vs_ = caml_wrap_exception(_vs_);
        if(_vs_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_bT_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _vs_}}
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var x=16;
      for(;;)
       {if(! (17 <= x) && ! (max_array_length < (x * 2 | 0)))
         {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         {var
           _uT_=caml_obj_tag(prng),
           _uU_=250 === _uT_?prng[1]:246 === _uT_?force_lazy_block(prng):prng;
          _uU_[2] = (_uU_[2] + 1 | 0) % 55 | 0;
          var
           _uO_=_uU_[2],
           curval=caml_check_bound(_uU_[1],_uO_)[1 + _uO_],
           _uP_=(_uU_[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(_uU_[1],_uP_)[1 + _uP_]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           newval30=newval & 1073741823,
           _uQ_=_uU_[2];
          caml_check_bound(_uU_[1],_uQ_)[1 + _uQ_] = newval30;
          var seed=newval30}
        else
         var seed=0;
        var kwd_table=[0,0,caml_make_vect(x,0),seed,x],param=keywords;
        for(;;)
         {if(param)
           {var
             l=param[2],
             a=param[1],
             data$0=[0,a],
             i$1=indexfun(kwd_table,a),
             bucket=[0,a,data$0,caml_check_bound(kwd_table[2],i$1)[1 + i$1]];
            caml_check_bound(kwd_table[2],i$1)[1 + i$1] = bucket;
            kwd_table[1] = kwd_table[1] + 1 | 0;
            if(kwd_table[2].length - 1 << 1 < kwd_table[1])
             {var
               odata=kwd_table[2],
               osize=odata.length - 1,
               nsize=osize * 2 | 0;
              if(nsize < max_array_length)
               {var
                 ndata=caml_make_vect(nsize,0),
                 ndata_tail=caml_make_vect(nsize,0),
                 _uR_=kwd_table.length - 1 < 4?1:0,
                 _uS_=_uR_ || (kwd_table[4] < 0?1:0),
                 inplace=1 - _uS_;
                kwd_table[2] = ndata;
                var _uW_=osize - 1 | 0,_uV_=0;
                if(! (_uW_ < 0))
                 {var i$0=_uV_;
                  a:
                  for(;;)
                   {var
                     cell$1=caml_check_bound(odata,i$0)[1 + i$0],
                     cell=cell$1;
                    for(;;)
                     {if(cell)
                       {var
                         key=cell[1],
                         data=cell[2],
                         next=cell[3],
                         cell$0=inplace?cell:[0,key,data,0],
                         nidx=indexfun(kwd_table,key),
                         match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                        if(match)
                         match[3] = cell$0;
                        else
                         caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                        caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                        var cell=next;
                        continue}
                      var _u0_=i$0 + 1 | 0;
                      if(_uW_ !== i$0){var i$0=_u0_;continue a}
                      break}
                    break}}
                if(inplace)
                 {var _uY_=nsize - 1 | 0,_uX_=0;
                  if(! (_uY_ < 0))
                   {var i=_uX_;
                    for(;;)
                     {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
                      if(match$0)match$0[3] = 0;
                      var _uZ_=i + 1 | 0;
                      if(_uY_ !== i){var i=_uZ_;continue}
                      break}}}}}
            var param=l;
            continue}
          var
           ident_or_keyword=
            function(id)
             {try
               {var _vp_=find$0(kwd_table,id);return _vp_}
              catch(_vq_)
               {_vq_ = caml_wrap_exception(_vq_);
                if(_vq_ === Not_found)return [1,id];
                throw _vq_}},
           keyword_or_error=
            function(c)
             {var s=make$0(1,c);
              try
               {var _vn_=find$0(kwd_table,s);return _vn_}
              catch(_vo_)
               {_vo_ = caml_wrap_exception(_vo_);
                if(_vo_ === Not_found)throw [0,Error,symbol(_bU_,s)];
                throw _vo_}},
           end_exponent_part=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _vm_=match[1],switcher=_vm_ - 48 | 0;
                  if(! (9 < switcher >>> 0)){junk(strm);store(_vm_);continue}}
                return [0,[3,caml_float_of_string(get_string(0))]]}},
           exponent_part=
            function(strm)
             {var match=peek(strm);
              if(match)
               {var _vl_=match[1],switch$0=0;
                if(43 !== _vl_ && 45 !== _vl_)switch$0 = 1;
                if(! switch$0)
                 {junk(strm);store(_vl_);return end_exponent_part(strm)}}
              return end_exponent_part(strm)},
           number=
            function(s)
             {for(;;)
               {var match=peek(s);
                if(match)
                 {var _vi_=match[1];
                  if(58 <= _vi_)
                   {var switch$0=0;
                    if(69 === _vi_ || 101 === _vi_)switch$0 = 1;
                    if(switch$0){junk(s);store(69);return exponent_part(s)}}
                  else
                   {if(46 === _vi_)
                     {junk(s);
                      store(46);
                      for(;;)
                       {var match$0=peek(s);
                        if(match$0)
                         {var _vj_=match$0[1],_vk_=_vj_ - 69 | 0;
                          if(32 < _vk_ >>> 0)
                           {var switcher=_vk_ + 21 | 0;
                            if(! (9 < switcher >>> 0)){junk(s);store(_vj_);continue}}
                          else
                           {var switcher$0=_vk_ - 1 | 0;
                            if(30 < switcher$0 >>> 0)
                             {junk(s);store(69);return exponent_part(s)}}}
                        return [0,[3,caml_float_of_string(get_string(0))]]}}
                    if(48 <= _vi_){junk(s);store(_vi_);continue}}}
                return [0,[2,caml_int_of_string(get_string(0))]]}},
           ident2=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _vg_=match[1],switch$0=0;
                  if(94 <= _vg_)
                   {var _vh_=_vg_ - 95 | 0;
                    if(30 < _vh_ >>> 0)
                     {if(! (32 <= _vh_))switch$0 = 1}
                    else
                     if(29 === _vh_)switch$0 = 1}
                  else
                   if(65 <= _vg_)
                    {if(92 === _vg_)switch$0 = 1}
                   else
                    if(33 <= _vg_)
                     switch(_vg_ - 33 | 0)
                      {case 0:
                       case 2:
                       case 3:
                       case 4:
                       case 5:
                       case 9:
                       case 10:
                       case 12:
                       case 14:
                       case 25:
                       case 27:
                       case 28:
                       case 29:
                       case 30:
                       case 31:switch$0 = 1;break
                       }
                  if(switch$0){junk(strm);store(_vg_);continue}}
                return [0,ident_or_keyword(get_string(0))]}},
           neg_number=
            function(s)
             {var match=peek(s);
              if(match)
               {var _vf_=match[1],switcher=_vf_ - 48 | 0;
                if(! (9 < switcher >>> 0))
                 {junk(s);
                  reset_buffer(0);
                  store(45);
                  store(_vf_);
                  return number(s)}}
              reset_buffer(0);
              store(45);
              return ident2(s)},
           ident=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _vd_=match[1],switch$0=0;
                  if(91 <= _vd_)
                   {var _ve_=_vd_ - 95 | 0;
                    if(27 < _ve_ >>> 0)
                     {if(97 <= _ve_)switch$0 = 1}
                    else
                     if(1 !== _ve_)switch$0 = 1}
                  else
                   if(48 <= _vd_)
                    {if(6 < (_vd_ - 58 | 0) >>> 0)switch$0 = 1}
                   else
                    if(39 === _vd_)switch$0 = 1;
                  if(switch$0){junk(strm);store(_vd_);continue}}
                return [0,ident_or_keyword(get_string(0))]}},
           next_token$0=
            function(counter,strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _u5_=match[1],switch$0=0;
                  if(124 <= _u5_)
                   {if(127 <= _u5_)
                     {if(192 <= _u5_)switch$0 = 1}
                    else
                     if(125 !== _u5_)switch$0 = 2}
                  else
                   {var _u6_=_u5_ - 65 | 0;
                    if(57 < _u6_ >>> 0)
                     {if(! (58 <= _u6_))
                       {var switcher=_u6_ + 65 | 0;
                        switch(switcher)
                         {case 34:
                           junk(strm);
                           reset_buffer(0);
                           for(;;)
                            {var match$1=peek(strm);
                             if(match$1)
                              {var _u8_=match$1[1];
                               if(34 === _u8_){junk(strm);return [0,[4,get_string(0)]]}
                               if(92 === _u8_)
                                {junk(strm);
                                 try
                                  {var c$0=escape(strm)}
                                 catch(_vc_)
                                  {_vc_ = caml_wrap_exception(_vc_);
                                   if(_vc_ === Failure$0)throw [0,Error,_bX_];
                                   throw _vc_;
                                   var _u$_=_vc_}
                                 store(c$0);
                                 continue}
                               junk(strm);
                               store(_u8_);
                               continue}
                             throw Failure$0}
                          case 39:
                           junk(strm);
                           try
                            {var match$2=peek(strm);
                             if(! match$2)throw Failure$0;
                             var _u9_=match$2[1];
                             if(92 === _u9_)
                              {junk(strm);
                               try
                                {var _u__=escape(strm)}
                               catch(_vb_)
                                {_vb_ = caml_wrap_exception(_vb_);
                                 if(_vb_ === Failure$0)throw [0,Error,_bY_];
                                 throw _vb_}
                               var c=_u__}
                             else
                              {junk(strm);var c=_u9_}}
                           catch(_va_)
                            {_va_ = caml_wrap_exception(_va_);
                             if(_va_ === Failure$0)throw [0,Error,_bV_];
                             throw _va_}
                           var match$0=peek(strm);
                           if(match$0 && 39 === match$0[1])
                            {junk(strm);return [0,[5,c]]}
                           throw [0,Error,_bW_];
                          case 40:
                           junk(strm);
                           if(counter < 50)
                            {var counter$0=counter + 1 | 0;
                             return maybe_comment(counter$0,strm)}
                           return caml_trampoline_return(maybe_comment,[0,strm]);
                          case 45:junk(strm);return neg_number(strm);
                          case 9:
                          case 10:
                          case 12:
                          case 13:
                          case 26:
                          case 32:junk(strm);continue;
                          case 48:
                          case 49:
                          case 50:
                          case 51:
                          case 52:
                          case 53:
                          case 54:
                          case 55:
                          case 56:
                          case 57:
                           junk(strm);reset_buffer(0);store(_u5_);return number(strm);
                          case 33:
                          case 35:
                          case 36:
                          case 37:
                          case 38:
                          case 42:
                          case 43:
                          case 47:
                          case 58:
                          case 60:
                          case 61:
                          case 62:
                          case 63:
                          case 64:switch$0 = 2;break
                          }}}
                    else
                     {var _u7_=_u6_ - 26 | 0;
                      if(5 < _u7_ >>> 0)
                       switch$0 = 1;
                      else
                       switch(_u7_)
                        {case 4:switch$0 = 1;break;case 1:case 3:switch$0 = 2;break}}}
                  switch(switch$0)
                   {case 0:junk(strm);return [0,keyword_or_error(_u5_)];
                    case 1:
                     junk(strm);reset_buffer(0);store(_u5_);return ident(strm);
                    default:
                     junk(strm);reset_buffer(0);store(_u5_);return ident2(strm)}}
                return 0}},
           maybe_comment=
            function(counter,strm)
             {var match=peek(strm);
              if(match && 42 === match[1])
               {junk(strm);
                comment(strm);
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return next_token$0(counter$0,strm)}
                return caml_trampoline_return(next_token$0,[0,strm])}
              return [0,keyword_or_error(40)]},
           next_token=
            function(strm){return caml_trampoline(next_token$0(0,strm))},
           escape=
            function(strm)
             {var match=peek(strm);
              if(match)
               {var _u2_=match[1];
                if(58 <= _u2_)
                 {var switcher=_u2_ - 110 | 0;
                  if(! (6 < switcher >>> 0))
                   switch(switcher)
                    {case 0:junk(strm);return 10;
                     case 4:junk(strm);return 13;
                     case 6:junk(strm);return 9
                     }}
                else
                 if(48 <= _u2_)
                  {junk(strm);
                   var match$0=peek(strm);
                   if(match$0)
                    {var _u3_=match$0[1],switcher$0=_u3_ - 48 | 0;
                     if(! (9 < switcher$0 >>> 0))
                      {junk(strm);
                       var match$1=peek(strm);
                       if(match$1)
                        {var _u4_=match$1[1],switcher$1=_u4_ - 48 | 0;
                         if(! (9 < switcher$1 >>> 0))
                          {junk(strm);
                           var
                            n=
                             (((_u2_ - 48 | 0) * 100 | 0)
                              +
                              ((_u3_ - 48 | 0) * 10 | 0)
                              |
                              0)
                             +
                             (_u4_ - 48 | 0)
                             |
                             0;
                           if(0 <= n && ! (255 < n))return n;
                           return invalid_arg(_f_)}}
                       throw [0,Error,_b0_]}}
                   throw [0,Error,_bZ_]}
                junk(strm);
                return _u2_}
              throw Failure$0},
           comment=
            function(strm)
             {b:
              for(;;)
               {var match=peek(strm);
                if(match)
                 {var switcher=match[1] - 40 | 0;
                  if(! (2 < switcher >>> 0))
                   switch(switcher)
                    {case 0:
                      junk(strm);
                      var match$0=peek(strm);
                      if(match$0)
                       {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                        junk(strm);
                        continue}
                      throw Failure$0;
                     case 1:break;
                     default:
                      junk(strm);
                      for(;;)
                       {var match$1=peek(strm);
                        if(match$1)
                         {var _u1_=match$1[1];
                          if(41 === _u1_){junk(strm);return 0}
                          if(42 === _u1_){junk(strm);continue}
                          junk(strm);
                          continue b}
                        throw Failure$0}}
                  junk(strm);
                  continue}
                throw Failure$0}};
          return function(input)
           {return from(function(count){return next_token(input)})}}}}
    var
     window$0=joo_global_object,
     no_handler=null,
     undefined$0=undefined,
     array_length=window$0.Array,
     Error$0=[248,_b1_,caml_fresh_oo_id(0)];
    register_exception(_b2_,[0,Error$0,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length
                ?0
                :[0,caml_string_of_jsstring(e.toString())]});
    function export$0(field,x)
     {var field$0=caml_jsstring_of_string(field);
      return caml_js_export_var(0)[field$0] = x}
    function appendChild(p,n){p.appendChild(n);return 0}
    caml_fresh_oo_id(0);
    var html_element=window$0.HTMLElement;
    html_element === undefined$0;
    function pp_var(v)
     {var s=caml_bytes_of_string(v);return caml_string_of_bytes(apply1(f,s))}
    function pp_func(f)
     {var s=caml_bytes_of_string(f);
      return caml_string_of_bytes(apply1(lowercase_ascii,s))}
    function parens(s){return symbol(_ca_,symbol(s,_b$_))}
    function pp_expr(param)
     {switch(param[0])
       {case 0:var v=param[1];return pp_var(v);
        case 1:var r=param[1];return caml_string_of_jsbytes("" + r);
        case 2:
         var e2=param[2],e1=param[1],_uL_=symbol(_cb_,pp_expr(e2));
         return parens(symbol(pp_expr(e1),_uL_));
        case 3:
         var e2$0=param[2],e1$0=param[1],_uM_=symbol(_cc_,pp_expr(e2$0));
         return parens(symbol(pp_expr(e1$0),_uM_));
        case 4:
         var e2$1=param[2],e1$1=param[1];
         return parens
                 (symbol
                   (caml_string_of_jsbytes("" + e1$1),
                    symbol(_cd_,pp_expr(e2$1))));
        case 5:
         var
          e2$2=param[2],
          e1$2=param[1],
          _uN_=symbol(_ce_,caml_string_of_jsbytes("" + e2$2));
         return parens(symbol(pp_expr(e1$2),_uN_));
        default:var e=param[1];return symbol(_cf_,pp_expr(e))}}
    function pp_acall(param)
     {var el=param[2],f=param[1];
      if(0 === el)return pp_func(f);
      var _uK_=symbol(_ci_,symbol(concat(_ch_,map(pp_expr,el)),_cg_));
      return symbol(pp_func(f),_uK_)}
    function pp_pred(param)
     {var e2=param[3],o=param[2],e1=param[1],_uH_=symbol(_cj_,pp_expr(e2));
      switch(o)
       {case 0:var _uI_=_b6_;break;
        case 1:var _uI_=_b7_;break;
        case 2:var _uI_=_b8_;break;
        case 3:var _uI_=_b9_;break;
        default:var _uI_=_b__}
      var _uJ_=symbol(_ck_,symbol(_uI_,_uH_));
      return symbol(pp_expr(e1),_uJ_)}
    function pp_eqn(param)
     {var
       pl=param[5],
       cl=param[4],
       e=param[3],
       to_nat=param[2],
       call=param[1],
       _uB_=
        symbol(_co_,symbol(_cn_,symbol(concat(_cm_,map(pp_pred,pl)),_cl_))),
       _uC_=
        symbol(_cr_,symbol(_cq_,symbol(concat(_cp_,map(pp_acall,cl)),_uB_))),
       _uD_=pp_expr(e),
       _uE_=
        to_nat
         ?function(x){return symbol(_cs_,parens(x))}
         :function(x){return x},
       _uF_=symbol(_ct_,symbol(_uE_(_uD_),_uC_)),
       vl=call[2],
       f=call[1];
      if(0 === vl)
       var _uG_=pp_func(f);
      else
       var
        _uA_=symbol(_b5_,symbol(concat(_b4_,map(pp_var,vl)),_b3_)),
        _uG_=symbol(pp_func(f),_uA_);
      return symbol(_cu_,symbol(_uG_,_uF_))}
    var f$1=[0,prerr_endline];
    function error(s){return caml_call1(f$1[1],s)}
    function set_error(g){f$1[1] = g;return 0}
    function prefix(n,param)
     {if(0 === n)return 0;
      if(param)
       {var tl=param[2],hd=param[1];return [0,hd,prefix(n - 1 | 0,tl)]}
      throw [0,Assert_failure,_cw_]}
    function mk_list(c,n){return 0 === n?0:[0,c,mk_list(c,n - 1 | 0)]}
    function eq_tag(t1,t2)
     {switch(t1)
       {case 0:if(0 === t2)return _cx_;break;
        case 1:if(1 === t2)return _cy_;break;
        case 2:if(2 === t2)return _cz_;break;
        default:if(3 <= t2)return _cA_}
      return 0}
    function eq_tag_list(tl1,tl2)
     {if(tl1)
       {if(tl2)
         {var
           tl2$0=tl2[2],
           t2=tl2[1],
           tl1$0=tl1[2],
           t1=tl1[1],
           match=eq_tag(t1,t2);
          if(match)
           {var match$0=eq_tag_list(tl1$0,tl2$0);return match$0?_cB_:0}
          return 0}}
      else
       if(! tl2)return _cC_;
      return 0}
    function tag_of_lhs(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0]){var f=param[1];return f[1]}
        var v=param[1];
        return v[1]}}
    function tag_list_length(param)
     {if(param){var tl=param[2];return 1 + tag_list_length(tl) | 0}return 0}
    function var_list_length(param)
     {if(param){var tl=param[2];return 1 + var_list_length(tl) | 0}return 0}
    function expr_list_map(o,tl,match)
     {if(tl)
       {var
         el=match[2],
         e=match[1],
         tl$0=tl[2],
         t=tl[1],
         _uz_=expr_list_map(o,tl$0,el);
        return [0,caml_call3(caml_get_public_method(o,102,160),o,t,e),_uz_]}
      return 0}
    function mk_indent(indent){return make$0(3 * indent | 0,32)}
    function pp_tag(param)
     {switch(param)
       {case 0:return _cD_;
        case 1:return _cE_;
        case 2:return _cF_;
        default:return _cG_}}
    function pp_tag_list(param)
     {if(param)
       {var tl=param[2],x=param[1],_uy_=pp_tag_list(tl);
        return [0,pp_tag(x),_uy_]}
      return 0}
    function pp_decl(param)
     {var s=param[2],t=param[1],_ux_=symbol(_cH_,s);
      return symbol(pp_tag(t),_ux_)}
    function pp_var_list(param)
     {if(param)
       {var tl=param[2],v=param[1],_uw_=pp_var_list(tl);
        return [0,pp_decl(v),_uw_]}
      return 0}
    function pp_expr$0(tag,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:return _cL_;case 1:return _cM_;default:return _cN_}
      else
       switch(param[0])
        {case 0:var v=param[1];return v[2];
         case 1:var f=param[1];return f[2];
         case 2:
          var
           e2=param[2],
           e1=param[1],
           _un_=symbol(_cP_,symbol(pp_expr$0(tag,e2),_cO_));
          return symbol(_cQ_,symbol(pp_expr$0(tag,e1),_un_));
         case 3:
          var
           e2$0=param[2],
           e1$0=param[1],
           _uo_=symbol(_cS_,symbol(pp_expr$0(tag,e2$0),_cR_));
          return symbol(_cT_,symbol(pp_expr$0(tag,e1$0),_uo_));
         case 4:
          var
           e=param[2],
           c=param[1],
           _up_=symbol(_cV_,symbol(pp_expr$0(tag,e),_cU_));
          return symbol(_cW_,symbol(pp_expr$0(tag,c),_up_));
         case 5:
          var
           e$0=param[2],
           c$0=param[1],
           _uq_=symbol(_cY_,symbol(pp_expr$0(tag,e$0),_cX_));
          return symbol(_cZ_,symbol(pp_expr$0(tag,c$0),_uq_));
         case 6:var e$1=param[1];return symbol(_c0_,pp_expr$0(tag,e$1));
         case 7:
          var
           e2$1=param[2],
           e1$1=param[1],
           _ur_=symbol(_c2_,symbol(pp_expr$0(1,e2$1),_c1_));
          return symbol(_c3_,symbol(pp_expr$0(1,e1$1),_ur_));
         case 8:
          var
           e2$2=param[2],
           e1$2=param[1],
           _us_=symbol(_c5_,symbol(pp_expr$0(1,e2$2),_c4_));
          return symbol(_c6_,symbol(pp_expr$0(1,e1$2),_us_));
         case 9:
          var
           e2$3=param[3],
           e1$3=param[2],
           tag$0=param[1],
           _ut_=symbol(_c8_,symbol(pp_expr$0(tag$0,e2$3),_c7_));
          return symbol(_c9_,symbol(pp_expr$0(tag$0,e1$3),_ut_));
         case 10:
          var
           g2=param[2],
           g1=param[1],
           _uu_=symbol(_c$_,symbol(pp_expr$0(tag,g2),_c__));
          return symbol(_da_,symbol(pp_expr$0(tag,g1),_uu_));
         case 11:
          var
           g2$0=param[2],
           g1$0=param[1],
           _uv_=symbol(_dc_,symbol(pp_expr$0(tag,g2$0),_db_));
          return symbol(_dd_,symbol(pp_expr$0(tag,g1$0),_uv_));
         case 12:var g=param[1];return symbol(_de_,pp_expr$0(tag,g));
         case 13:
          var v$0=param[1];
          switch(tag)
           {case 0:throw [0,Assert_failure,_cI_];
            case 1:return caml_string_of_jsbytes("" + v$0);
            case 2:return string_of_bool(v$0);
            default:return v$0}
         default:var e$2=param[1];return symbol(pp_expr$0(3,e$2),_df_)}}
    function pp_expr_list(tg,match)
     {if(tg)
       {var
         tl=match[2],
         v=match[1],
         tagl=tg[2],
         tag=tg[1],
         _um_=pp_expr_list(tagl,tl);
        return [0,pp_expr$0(tag,v),_um_]}
      return 0}
    function pp_meth(opt,param)
     {var id=param[3],tags=param[2],rtag=param[1];
      if(opt)var sth=opt[1],verbose=sth;else var verbose=0;
      if(verbose)
       {var _ul_=symbol(_dh_,symbol(pp_tag(rtag),_dg_));
        return symbol
                (id,symbol(_dj_,symbol(concat(_di_,pp_tag_list(tags)),_ul_)))}
      return id}
    function pp_rhs(tag,param)
     {if(0 === param[0]){var e=param[1];return pp_expr$0(tag,e)}
      var
       exprl=param[4],
       value=param[3],
       meth=param[2],
       addr=param[1],
       _uh_=symbol(_dp_,symbol(concat(_do_,pp_expr_list(meth[2],exprl)),_dn_));
      if(value)
       var v=value[1],_ui_=symbol(_dr_,symbol(pp_expr$0(1,v),_dq_));
      else
       var _ui_=_dt_;
      var
       _uj_=symbol(_ui_,_uh_),
       _uk_=symbol(_ds_,symbol(pp_meth(0,meth),_uj_));
      return symbol(pp_expr$0(3,addr),_uk_)}
    function pp_stm(indent,opt,tag,stm)
     {if(opt)var sth=opt[1],breakline=sth;else var breakline=1;
      var switch$0=0;
      if(typeof stm === "number" && 0 === stm)var _t5_=_du_;else switch$0 = 1;
      if(switch$0)var _t5_=breakline?_dK_:_dL_;
      if(typeof stm === "number")
       switch(stm)
        {case 0:var _t6_=_dv_;break;
         case 1:var _t6_=_dx_;break;
         default:var _t6_=_dy_}
      else
       switch(stm[0])
        {case 0:
          var e=stm[1],_t6_=symbol(_dA_,symbol(pp_rhs(tag,e),_dz_));break;
         case 1:
          var
           stm$0=stm[3],
           rhs=stm[2],
           lhs=stm[1],
           switch$1=0,
           _t9_=pp_stm(indent,_dB_,tag,stm$0);
          if(typeof stm$0 === "number" && 0 === stm$0)
           {var _t__=_dC_;switch$1 = 1}
          if(! switch$1)var _t__=_dE_;
          var
           _t$_=symbol(_dD_,symbol(_t__,_t9_)),
           _ua_=symbol(pp_rhs(tag_of_lhs(lhs),rhs),_t$_);
          if(typeof lhs === "number")
           var _ub_=_dk_;
          else
           if(0 === lhs[0])
            var f=lhs[1],_ub_=symbol(f[2],_dl_);
           else
            var v=lhs[1],_ub_=symbol(v[2],_dm_);
          var _t6_=symbol(_ub_,_ua_);
          break;
         default:
          var
           stm3=stm[4],
           stm2=stm[3],
           stm1=stm[2],
           c=stm[1],
           _uc_=symbol(_dG_,pp_stm(indent,_dF_,tag,stm3)),
           _ud_=symbol(mk_indent(indent),_uc_),
           _ue_=symbol(_dH_,symbol(pp_stm(indent + 1 | 0,0,tag,stm2),_ud_)),
           _uf_=symbol(mk_indent(indent),_ue_),
           _ug_=symbol(_dI_,symbol(pp_stm(indent + 1 | 0,0,tag,stm1),_uf_)),
           _t6_=symbol(_dJ_,symbol(pp_expr$0(2,c),_ug_))}
      var switch$2=0,_t7_=symbol(_t6_,_t5_);
      if(typeof stm === "number" && 0 === stm){var _t8_=_dw_;switch$2 = 1}
      if(! switch$2)var _t8_=mk_indent(indent);
      return symbol(_t8_,_t7_)}
    function pp_block(indent,payable,tag,param)
     {var
       stm=param[3],
       lvl=param[2],
       vl=param[1],
       _tW_=symbol(mk_indent(indent),_dM_),
       _tX_=symbol(pp_stm(indent + 1 | 0,0,tag,stm),_tW_),
       _tY_=pp_var_list(lvl),
       _tZ_=
        symbol
         (_dP_,
          symbol
           (concat
             (_dO_,
              map
               (function(s)
                 {var _t4_=symbol(s,_dN_);
                  return symbol(mk_indent(indent + 1 | 0),_t4_)},
                _tY_)),
            _tX_)),
       _t0_=payable?_dQ_:_dX_,
       _t1_=symbol(_t0_,_tZ_),
       _t2_=0 === tag?_dR_:symbol(_dW_,symbol(pp_tag(tag),_dV_)),
       _t3_=symbol(_dS_,symbol(_t2_,_t1_));
      return symbol(_dU_,symbol(concat(_dT_,pp_var_list(vl)),_t3_))}
    function pp_a_contract(param)
     {var
       fields=param[4],
       fallback=param[3],
       methods=param[2],
       addr=param[1],
       indent=1;
      if(fallback)
       var
        b=fallback[1],
        _tP_=symbol(_d1_,pp_block(indent,1,0,b)),
        _tQ_=symbol(mk_indent(indent),_tP_);
      else
       var _tQ_=_d2_;
      var
       _tR_=symbol(_tQ_,_d3_),
       indent$0=1,
       _tS_=
        symbol
         (_d4_,
          symbol
           (concat
             (_d0_,
              map
               (function(param)
                 {var
                   payable=param[3],
                   b=param[2],
                   m=param[1],
                   _tU_=symbol(_dY_,pp_block(indent$0,payable,m[1],b)),
                   _tV_=symbol(_dZ_,symbol(pp_meth(0,m),_tU_));
                  return symbol(mk_indent(indent$0),_tV_)},
                methods)),
            _tR_)),
       indent$1=1;
      return symbol
              (_d6_,
               symbol
                (addr,
                 symbol
                  (_d5_,
                   symbol
                    (concat
                      (_cK_,
                       map
                        (function(f$0)
                          {var f=f$0[1],_tT_=symbol(pp_decl(f),_cJ_);
                           return symbol(mk_indent(indent$1),_tT_)},
                         fields)),
                     _tS_))))}
    function pp_configuration(l){return concat(_d7_,map(pp_a_contract,l))}
    function expr_list_of_var_list(param)
     {if(param)
       {var tl=param[2],hd=param[1];
        return [0,[0,hd],expr_list_of_var_list(tl)]}
      return 0}
    function any_method_decl_of_fallback(fb){return [0,fallback,fb,1]}
    var
     Fail=[248,_d9_,caml_fresh_oo_id(0)],
     Reject=[248,_d__,caml_fresh_oo_id(0)];
    function best(err1,err2)
     {if(caml_string_equal(err1[1],_d$_))return err2;
      if(caml_string_equal(err2[1],_ea_))return err1;
      var _tL_=length(err2[2]);
      if(length(err1[2]) < _tL_)return err1;
      var _tM_=length(err2[2]);
      if(length(err1[2]) === _tM_)
       {var _tN_=err1[2],_tO_=symbol(_eb_,err2[1]);
        return [0,symbol(err1[1],_tO_),_tN_]}
      return err2}
    function cfst(x,param){return x}
    function csnd(param,x){return x}
    function addel(l,el){return op(l,[0,el,0])}
    function remove_minspace(param)
     {if(param)
       {var _tK_=param[1];
        if(2 === _tK_[0])
         {var tl$0=param[2],x=_tK_[1];
          if(! (0 <= x))
           return op(_ec_,op([0,[2,- x | 0],0],remove_minspace(tl$0)))}
        var tl=param[2];
        return op([0,_tK_,0],remove_minspace(tl))}
      return 0}
    function get_tokens(lexer,file)
     {var streamt=caml_call1(lexer,file);
      function aux(acc,s)
       {try
         {var _tI_=aux([0,next(s),acc],s);return _tI_}
        catch(_tJ_)
         {_tJ_ = caml_wrap_exception(_tJ_);
          if(_tJ_ === Failure$0)return acc;
          throw _tJ_}}
      return remove_minspace(rev(aux(0,streamt)))}
    function string_of_token(param)
     {switch(param[0])
       {case 0:var x=param[1];return symbol(_ed_,x);
        case 1:var x$0=param[1];return symbol(_ee_,x$0);
        case 2:
         var n=param[1];return symbol(_ef_,caml_string_of_jsbytes("" + n));
        case 3:var f=param[1];return symbol(_eg_,string_of_float(f));
        case 4:var s=param[1];return symbol(_eh_,s);
        default:var c=param[1];return symbol(_ei_,make$0(1,c))}}
    function print_token_list(l)
     {return concat
              (_ek_,
               map(function(t){return symbol(string_of_token(t),_ej_)},l))}
    function comb_parser(pars,f,s,tbl)
     {var
       match=caml_call2(pars,s,tbl),
       nt=match[4],
       error=match[3],
       nast=match[2],
       ns=match[1];
      try
       {var x=caml_call1(f,nast)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,s])]}
        throw exn}
      return [0,ns,x,error,nt]}
    function eof(s,t)
     {if(s)throw [0,Fail,[0,_el_,s]];return [0,s,0,[0,_em_,s],t]}
    function const$0(kwd,f,s,tbl)
     {if(s)
       {var tl=s[2],t=s[1];
        if(caml_equal(kwd,t))
         {try
           {var x=caml_call1(f,t)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Reject){var msg=exn[2];throw [0,Fail,[0,msg,s]]}
            throw exn}
          return [0,tl,x,[0,_en_,tl],tbl]}}
      throw [0,Fail,[0,symbol(string_of_token(kwd),_eo_),s]]}
    function kwd(str)
     {function _tD_(_tH_){return 0}
      var _tE_=[0,str];
      return function(_tF_,_tG_){return const$0(_tE_,_tD_,_tF_,_tG_)}}
    function option(p,s,tbl)
     {try
       {var
         match=caml_call2(p,s,tbl),
         ntbl=match[4],
         error$0=match[3],
         res=match[2],
         next=match[1],
         _tC_=[0,next,[0,res],error$0,ntbl];
        return _tC_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail){var error=exn[2];return [0,s,0,error,tbl]}
        throw exn}}
    function option2(d,p,s,tbl)
     {try
       {var
         match=caml_call2(p,s,tbl),
         ntbl=match[4],
         error$0=match[3],
         res=match[2],
         next=match[1],
         _tB_=[0,next,res,error$0,ntbl];
        return _tB_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var error=exn[2];return [0,s,d,best(error,[0,_ep_,s]),tbl]}
        throw exn}}
    function choice(p1,p2,s,tbl)
     {try
       {var _tA_=caml_call2(p1,s,tbl);return _tA_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var error1=exn[2];
          try
           {var _tz_=caml_call2(p2,s,tbl);return _tz_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Fail)
             {var error2=exn[2];throw [0,Fail,best(error1,error2)]}
            throw exn}}
        throw exn}}
    function choice_list(param)
     {if(param)
       {var _tu_=param[2],_tv_=param[1];
        if(_tu_)
         {var _tw_=choice_list(_tu_);
          return function(_tx_,_ty_){return choice(_tv_,_tw_,_tx_,_ty_)}}
        return _tv_}
      throw [0,Assert_failure,_eq_]}
    function concat$0(p1,p2,f,s,tbl)
     {var
       match=caml_call2(p1,s,tbl),
       tbl1=match[4],
       error1=match[3],
       ast1=match[2],
       rest1=match[1];
      try
       {var
         match$0=caml_call2(p2,rest1,tbl1),
         tbl2=match$0[4],
         error2$0=match$0[3],
         ast2=match$0[2],
         rest2=match$0[1];
        try
         {var x=caml_call2(f,ast1,ast2)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Reject)
           {var msg=exn[2];
            throw [0,Fail,best(best(error1,error2$0),[0,msg,s])]}
          throw exn}
        var _tt_=[0,rest2,x,best(error1,error2$0),tbl2];
        return _tt_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var error2=exn[2];throw [0,Fail,best(error1,error2)]}
        throw exn}}
    function kleenestar(p,empty_ast,f,s,t)
     {function aux(s1,acc,error,tbl)
       {try
         {var
           match=caml_call2(p,s1,tbl),
           ntbl=match[4],
           error1$0=match[3],
           ast1=match[2],
           rest1=match[1];
          try
           {var x=caml_call2(f,acc,ast1)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Reject)
             {var msg=exn[2];throw [0,Fail,best(error1$0,[0,msg,s1])]}
            throw exn}
          var _ts_=aux(rest1,x,best(error1$0,error),ntbl);
          return _ts_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Fail)
           {var error1=exn[2];return [0,s1,acc,best(error1,error),tbl]}
          throw exn}}
      return aux(s,empty_ast,[0,_er_,s],t)}
    function x_cont(x_expr,x_binop,s)
     {function _tg_(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))}
      function _th_(_tr_){return x_cont(x_expr,x_binop,_tr_)}
      function _ti_(f,x,y){return caml_call2(f,y,x)}
      function _tj_(_tp_,_tq_){return concat$0(x_binop,x_expr,_ti_,_tp_,_tq_)}
      function _tk_(_tn_,_to_){return concat$0(_tj_,_th_,_tg_,_tn_,_to_)}
      function _tl_(x){return x}
      return function(_tm_){return option2(_tl_,_tk_,s,_tm_)}}
    function nelist(x_expr,x_binop)
     {function _tb_(x,f){return caml_call1(f,x)}
      function _tc_(_tf_){return x_cont(x_expr,x_binop,_tf_)}
      return function(_td_,_te_){return concat$0(x_expr,_tc_,_tb_,_td_,_te_)}}
    function pp_any_expr(param)
     {var e=param[2],t=param[1];return pp_expr$0(t,e)}
    function check_type(tag,param)
     {var e=param[2],t=param[1],match=eq_tag(tag,t);
      if(match)return e;
      var _ta_=symbol(_es_,pp_tag(tag));
      throw [0,Reject,symbol(pp_expr$0(t,e),_ta_)]}
    function get_field(tbl,varname)
     {var tbl$0=tbl;
      for(;;)
       {if(tbl$0)
         {var _s$_=tbl$0[1];
          if(1 === _s$_[0])
           {var islocal=_s$_[2],match=_s$_[1],name=match[2],tag=match[1];
            if(caml_string_equal(varname,name))
             return [0,[0,[0,[0,tag,name]],islocal]]}
          var tbl$1=tbl$0[2],tbl$0=tbl$1;
          continue}
        return 0}}
    function add_field_to_table(tbl,param,is_local)
     {var
       match=param[1],
       fieldname=match[2],
       t=match[1],
       match$0=get_field(tbl,fieldname);
      if(match$0)
       {var match$1=match$0[1],is_local2=match$1[2];
        if(! is_local2 && is_local)
         return [0,[1,[0,t,fieldname],is_local],tbl];
        throw [0,Reject,symbol(fieldname,_et_)]}
      return [0,[1,[0,t,fieldname],is_local],tbl]}
    function add_fun_to_table(tbl$1,param)
     {var match$0=param[1],funname=match$0[3],l=match$0[2],t=match$0[1];
      if(caml_string_equal(funname,_eu_))throw [0,Reject,_ev_];
      var tbl=tbl$1;
      for(;;)
       {if(tbl)
         {var _s__=tbl[1],switch$0=0;
          if(2 === _s__[0])
           {var match=_s__[1],name=match[3],tagl=match[2],rettag=match[1];
            if(caml_string_equal(funname,name))
             {var match$1=[0,[0,[0,rettag,tagl,name]]];switch$0 = 1}}
          if(! switch$0){var tbl$0=tbl[2],tbl=tbl$0;continue}}
        else
         var match$1=0;
        if(match$1)
         {var match$2=match$1[1][1],l$0=match$2[2],match$3=eq_tag_list(l,l$0);
          if(match$3)throw [0,Reject,symbol(funname,_ew_)];
          return [0,[2,[0,t,l,funname]],tbl$1]}
        return [0,[2,[0,t,l,funname]],tbl$1]}}
    function get_contract(tbl,name)
     {var tbl$0=tbl;
      for(;;)
       {if(tbl$0)
         {var _s9_=tbl$0[1];
          if(0 === _s9_[0])
           {var name$0=_s9_[1];
            if(caml_string_equal(name,name$0))return [0,name]}
          var tbl$1=tbl$0[2],tbl$0=tbl$1;
          continue}
        return 0}}
    function add_contract_to_table(tbl,name)
     {var match=get_contract(tbl,name);
      if(match)throw [0,Reject,symbol(_ey_,symbol(name,_ex_))];
      return [0,[0,name],tbl]}
    function remove_local_vars(tbl)
     {return caml_call1
              (find_all
                (function(param)
                  {if(1 === param[0] && 0 !== param[2])return 0;return 1}),
               tbl)}
    function plus(e1,e2)
     {if(1 === e1[1] && 1 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,1,[2,v1,v2]]}
      var _s8_=symbol(_eA_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s8_)]}
    function uminus(e)
     {if(1 === e[1]){var e$0=e[2];return [0,1,[6,e$0]]}
      throw [0,Reject,symbol(_eB_,pp_any_expr(e))]}
    function minus(e1,e2)
     {if(1 === e1[1] && 1 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,1,[3,v1,v2]]}
      var _s7_=symbol(_eC_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s7_)]}
    function mult(e1,e2)
     {if(1 === e1[1] && 1 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,1,[4,v1,v2]]}
      var _s6_=symbol(_eD_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s6_)]}
    function div(e1,e2)
     {if(1 === e1[1] && 1 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,1,[5,v1,v2]]}
      var _s5_=symbol(_eE_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s5_)]}
    function gt(e1,e2)
     {if(1 === e1[1] && 1 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,2,[8,v1,v2]]}
      var _s4_=symbol(_eF_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s4_)]}
    function ge(e1,e2)
     {if(1 === e1[1] && 1 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,2,[7,v1,v2]]}
      var _s3_=symbol(_eG_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s3_)]}
    function eq(e1,e2)
     {var v2=e2[2],t2=e2[1],v1=e1[2],t1=e1[1],match=eq_tag(t1,t2);
      if(match)return [0,2,[9,t1,v1,v2]];
      var _s2_=symbol(_eH_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s2_)]}
    function lt(e1,e2){return gt(e2,e1)}
    function le(e1,e2){return ge(e2,e1)}
    function andb(e1,e2)
     {if(2 === e1[1] && 2 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,2,[10,v1,v2]]}
      var _s1_=symbol(_eI_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s1_)]}
    function orb(e1,e2)
     {if(2 === e1[1] && 2 === e2[1])
       {var v2=e2[2],v1=e1[2];return [0,2,[11,v1,v2]]}
      var _s0_=symbol(_eJ_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_s0_)]}
    function notb(e)
     {if(2 === e[1]){var v=e[2];return [0,2,[12,v]]}
      throw [0,Reject,symbol(_eK_,pp_any_expr(e))]}
    function neq(e1,e2){return notb(eq(e1,e2))}
    function varname(s,t)
     {if(s)
       {var _sZ_=s[1];
        if(1 === _sZ_[0]){var tl=s[2],x=_sZ_[1];return [0,tl,x,[0,_eM_,tl],t]}}
      throw [0,Fail,[0,_eL_,s]]}
    function couple(el1,el2){return [0,el1,el2]}
    function var_pars(tag,s,tbl)
     {try
       {var x=hd(s)}
      catch(_sY_)
       {_sY_ = caml_wrap_exception(_sY_);
        if(_sY_[1] === Failure)throw [0,Fail,[0,_eN_,s]];
        throw _sY_}
      return const$0
              (x,
               function(param)
                {if(s)
                  {var _sU_=s[1];
                   if(1 === _sU_[0])
                    {var var$0=_sU_[1],match=get_field(tbl,var$0);
                     if(match)
                      {var
                        _sV_=match[1],
                        islocal=_sV_[2],
                        match$0=_sV_[1][1],
                        name=match$0[2],
                        tagfield=match$0[1];
                       if(eq_tag(tagfield,tag))
                        {var
                          _sW_=
                           0 === islocal?[1,[0,tagfield,name]]:[0,[0,tagfield,name]];
                         return _sW_}
                       var _sX_=symbol(_eP_,pp_tag(tag));
                       throw [0,Reject,symbol(pp_tag(tagfield),_sX_)]}
                     throw [0,Reject,symbol(var$0,_eQ_)]}}
                 throw [0,Reject,_eO_]},
               s,
               tbl)}
    function value_pars(tag,s,tbl)
     {try
       {var t=hd(s)}
      catch(_sT_)
       {_sT_ = caml_wrap_exception(_sT_);
        if(_sT_[1] === Failure)throw [0,Fail,[0,_eZ_,s]];
        throw _sT_}
      return const$0
              (t,
               function(match$0)
                {switch(tag)
                  {case 1:
                    if(2 === match$0[0]){var x=match$0[1];return [13,x]}break;
                   case 2:
                    if(0 === match$0[0])
                     {var _sS_=match$0[1];
                      if(! caml_string_notequal(_sS_,_eT_))return _eW_;
                      if(! caml_string_notequal(_sS_,_eU_))return _eV_}
                    break;
                   case 3:
                    if(1 === match$0[0])
                     {var x$0=match$0[1],match=get_contract(tbl,x$0);
                      if(match){var a=match[1];return [13,a]}
                      throw [0,Reject,symbol(_eY_,symbol(pp_tag(tag),_eX_))]}
                    break
                   }
                 throw [0,Reject,symbol(_eS_,symbol(pp_tag(tag),_eR_))]},
               s,
               tbl)}
    function _e0_(param){return 0}
    function this_pars(_sQ_,_sR_){return const$0(_e1_,_e0_,_sQ_,_sR_)}
    function brackets_pars(pars)
     {var _sJ_=kwd(_e2_),_sK_=kwd(_e3_);
      function _sL_(_sO_,_sP_){return concat$0(_sK_,pars,csnd,_sO_,_sP_)}
      return function(_sM_,_sN_){return concat$0(_sL_,_sJ_,cfst,_sM_,_sN_)}}
    function _e4_(param){return 1}
    var _e6_=kwd(_e5_),_e8_=kwd(_e7_),_e__=kwd(_e9_);
    function _e$_(_sH_,_sI_){return concat$0(_e__,_e8_,csnd,_sH_,_sI_)}
    function _fa_(_sF_,_sG_){return concat$0(_e$_,_e6_,csnd,_sF_,_sG_)}
    function msg_sender_pars(_sD_,_sE_)
     {return comb_parser(_fa_,_e4_,_sD_,_sE_)}
    function _fb_(param){return _fc_}
    var _fe_=kwd(_fd_),_fg_=kwd(_ff_),_fi_=kwd(_fh_);
    function _fj_(_sB_,_sC_){return concat$0(_fi_,_fg_,csnd,_sB_,_sC_)}
    function _fk_(_sz_,_sA_){return concat$0(_fj_,_fe_,csnd,_sz_,_sA_)}
    function msg_value_pars(_sx_,_sy_)
     {return comb_parser(_fk_,_fb_,_sx_,_sy_)}
    function base(tag,s,tbl)
     {var
       _sr_=0,
       _ss_=[0,function(_sv_,_sw_){return value_pars(tag,_sv_,_sw_)},_sr_];
      return caml_call2
              (choice_list
                ([0,function(_st_,_su_){return var_pars(tag,_st_,_su_)},_ss_]),
               s,
               tbl)}
    function atomic_int_expr(s)
     {var _se_=[0,brackets_pars(int_expr),0];
      function _sf_(param){return uminus}
      var
       _sg_=kwd(_fl_),
       _sh_=
        [0,
         function(_sp_,_sq_)
          {return concat$0(_sg_,atomic_int_expr,_sf_,_sp_,_sq_)},
         _se_];
      function _si_(expr){return [0,1,expr]}
      var _sj_=1;
      function _sk_(_sn_,_so_){return base(_sj_,_sn_,_so_)}
      return caml_call1
              (choice_list
                ([0,
                  msg_value_pars,
                  [0,
                   balance_pars,
                   [0,
                    function(_sl_,_sm_){return comb_parser(_sk_,_si_,_sl_,_sm_)},
                    _sh_]]]),
               s)}
    function mul_int_expr(s)
     {return caml_call1(nelist(atomic_int_expr,mul_binop),s)}
    function int_expr(s){return caml_call1(nelist(mul_int_expr,add_binop),s)}
    function add_binop(s)
     {var _r8_=0;
      function _r9_(param){return minus}
      var
       _r__=
        [0,function(_sc_,_sd_){return const$0(_fm_,_r9_,_sc_,_sd_)},_r8_];
      function _r$_(param){return plus}
      return caml_call1
              (choice_list
                ([0,
                  function(_sa_,_sb_){return const$0(_fn_,_r$_,_sa_,_sb_)},
                  _r__]),
               s)}
    function mul_binop(s)
     {var _r0_=0;
      function _r1_(param){return div}
      var
       _r2_=
        [0,function(_r6_,_r7_){return const$0(_fo_,_r1_,_r6_,_r7_)},_r0_];
      function _r3_(param){return mult}
      return caml_call1
              (choice_list
                ([0,
                  function(_r4_,_r5_){return const$0(_fp_,_r3_,_r4_,_r5_)},
                  _r2_]),
               s)}
    function atomic_bool_expr(s)
     {var _rx_=0;
      function _ry_(x,f){return caml_call1(f,x)}
      function _rz_(f,y,x){return caml_call2(f,x,y)}
      function _rA_(_rY_,_rZ_){return concat$0(cmpop,int_expr,_rz_,_rY_,_rZ_)}
      var
       _rB_=
        [0,
         function(_rW_,_rX_){return concat$0(int_expr,_rA_,_ry_,_rW_,_rX_)},
         _rx_];
      function _rC_(param){return notb}
      var
       _rD_=kwd(_fq_),
       _rE_=
        [0,
         function(_rU_,_rV_)
          {return concat$0(_rD_,atomic_bool_expr,_rC_,_rU_,_rV_)},
         _rB_],
       _rF_=kwd(_fr_),
       _rG_=kwd(_fs_);
      function _rH_(_rS_,_rT_){return concat$0(_rG_,bool_expr,csnd,_rS_,_rT_)}
      var
       _rI_=
        [0,
         function(_rQ_,_rR_){return concat$0(_rH_,_rF_,cfst,_rQ_,_rR_)},
         _rE_];
      function _rJ_(expr){return [0,2,expr]}
      var _rK_=2;
      function _rL_(_rO_,_rP_){return base(_rK_,_rO_,_rP_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_rM_,_rN_){return comb_parser(_rL_,_rJ_,_rM_,_rN_)},
                  _rI_]),
               s)}
    function cmpop(s)
     {var _rh_=0;
      function _ri_(param){return le}
      var
       _rj_=
        [0,function(_rv_,_rw_){return const$0(_ft_,_ri_,_rv_,_rw_)},_rh_];
      function _rk_(param){return lt}
      var
       _rl_=
        [0,function(_rt_,_ru_){return const$0(_fu_,_rk_,_rt_,_ru_)},_rj_];
      function _rm_(param){return ge}
      var
       _rn_=
        [0,function(_rr_,_rs_){return const$0(_fv_,_rm_,_rr_,_rs_)},_rl_];
      function _ro_(param){return gt}
      return caml_call1
              (choice_list
                ([0,
                  function(_rp_,_rq_){return const$0(_fw_,_ro_,_rp_,_rq_)},
                  _rn_]),
               s)}
    function eqop(s)
     {var _q$_=0;
      function _ra_(param){return neq}
      var
       _rb_=
        [0,function(_rf_,_rg_){return const$0(_fx_,_ra_,_rf_,_rg_)},_q$_];
      function _rc_(param){return eq}
      return caml_call1
              (choice_list
                ([0,
                  function(_rd_,_re_){return const$0(_fy_,_rc_,_rd_,_re_)},
                  _rb_]),
               s)}
    function eq_bool_expr(s)
     {return caml_call1
              (nelist
                (choice_list
                  ([0,atomic_bool_expr,[0,int_expr,[0,contract_expr,0]]]),
                 eqop),
               s)}
    function and_bool_expr(s)
     {return caml_call1(nelist(eq_bool_expr,and_binop),s)}
    function bool_expr(s){return caml_call1(nelist(and_bool_expr,or_binop),s)}
    function and_binop(s)
     {var _q7_=0;
      function _q8_(param){return andb}
      return caml_call1
              (choice_list
                ([0,
                  function(_q9_,_q__){return const$0(_fz_,_q8_,_q9_,_q__)},
                  _q7_]),
               s)}
    function or_binop(s)
     {var _q3_=0;
      function _q4_(param){return orb}
      return caml_call1
              (choice_list
                ([0,
                  function(_q5_,_q6_){return const$0(_fA_,_q4_,_q5_,_q6_)},
                  _q3_]),
               s)}
    function balance_pars(s)
     {function _qW_(a$0,param)
       {if(3 <= a$0[1]){var a=a$0[2];return [0,1,[14,a]]}
        throw [0,Reject,symbol(pp_any_expr(a$0),_ez_)]}
      var _qX_=kwd(_fB_),_qY_=kwd(_fC_);
      function _qZ_(_q1_,_q2_)
       {return concat$0(contract_expr,_qY_,cfst,_q1_,_q2_)}
      return function(_q0_){return concat$0(_qZ_,_qX_,_qW_,s,_q0_)}}
    function contract_expr(s)
     {function aux(s)
       {var _qS_=[0,this_pars,[0,brackets_pars(aux),0]],_qT_=3;
        return caml_call1
                (choice_list
                  ([0,
                    msg_sender_pars,
                    [0,function(_qU_,_qV_){return base(_qT_,_qU_,_qV_)},_qS_]]),
                 s)}
      function _qQ_(expr){return [0,3,expr]}
      return function(_qR_){return comb_parser(aux,_qQ_,s,_qR_)}}
    function expr_pars(s)
     {var
       _qJ_=kwd(_fD_),
       _qI_=[0,int_expr,[0,bool_expr,[0,contract_expr,0]]],
       _qK_=kwd(_fE_);
      function _qL_(_qO_,_qP_){return concat$0(_qK_,expr_pars,csnd,_qO_,_qP_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_qM_,_qN_)
                   {return concat$0(_qL_,_qJ_,cfst,_qM_,_qN_)},
                  _qI_]),
               s)}
    function tag_pars(str,tag)
     {function _qE_(param){return [0,tag]}
      var _qF_=[0,str];
      return function(_qG_,_qH_){return const$0(_qF_,_qE_,_qG_,_qH_)}}
    var
     _fG_=[0,tag_pars(_fF_,3),0],
     _fI_=[0,tag_pars(_fH_,2),_fG_],
     type_pars=choice_list([0,tag_pars(_fJ_,1),_fI_]);
    function field_pars(islocal,s,t)
     {var _qA_=kwd(_fK_);
      function _qB_(param,v){var t=param[1];return [0,[0,t,v]]}
      var
       match=
        concat$0
         (function(_qC_,_qD_)
           {return concat$0(type_pars,varname,_qB_,_qC_,_qD_)},
          _qA_,
          cfst,
          s,
          t),
       tbl=match[4],
       error=match[3],
       field=match[2],
       ns=match[1];
      try
       {var x=add_field_to_table(tbl,field,islocal)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,s])]}
        throw exn}
      return [0,ns,field,error,x]}
    function _fL_(param)
     {var match=param[1],id=match[2],tag=match[1];return [0,[0,tag,id]]}
    function _fM_(_qz_){return map(_fL_,_qz_)}
    var _fN_=0,_fO_=0;
    function _fP_(_qx_,_qy_){return field_pars(_fO_,_qx_,_qy_)}
    function _fQ_(_qv_,_qw_){return kleenestar(_fP_,_fN_,addel,_qv_,_qw_)}
    function fields_pars(_qt_,_qu_){return comb_parser(_fQ_,_fM_,_qt_,_qu_)}
    function expr_list_of_any_expr_list(param)
     {if(param)
       {var
         tl=param[2],
         match=param[1],
         e=match[2],
         t=match[1],
         match$0=expr_list_of_any_expr_list(tl),
         es=match$0[2],
         ts=match$0[1];
        return [0,[0,t,ts],[0,e,es]]}
      return _fR_}
    var _fS_=0,_fU_=kwd(_fT_);
    function _fV_(_qr_,_qs_){return concat$0(_fU_,expr_pars,csnd,_qr_,_qs_)}
    function _fW_(_qp_,_qq_){return kleenestar(_fV_,_fS_,addel,_qp_,_qq_)}
    function _fX_(_qn_,_qo_){return concat$0(expr_pars,_fW_,cons,_qn_,_qo_)}
    var
     _fY_=0,
     _fZ_=
      brackets_pars(function(_ql_,_qm_){return option2(_fY_,_fX_,_ql_,_qm_)});
    function parse_any_expr_list(_qj_,_qk_)
     {return comb_parser(_fZ_,expr_list_of_any_expr_list,_qj_,_qk_)}
    function ident_pars(s,t)
     {if(s)
       {var _qi_=s[1];
        if(1 === _qi_[0]){var tl=s[2],i=_qi_[1];return [0,tl,i,[0,_f1_,tl],t]}}
      throw [0,Fail,[0,_f0_,s]]}
    function dot_value_pars(s,t)
     {function _p8_(x)
       {var t=1;
        if(x)
         {var v=x[1],e=v[2],texp=v[1],match=eq_tag(texp,t);
          return match?[0,e]:0}
        return 0}
      var _p9_=brackets_pars(int_expr),_p__=kwd(_f2_),_p$_=kwd(_f3_);
      function _qa_(_qg_,_qh_){return concat$0(_p$_,_p__,csnd,_qg_,_qh_)}
      function _qb_(_qe_,_qf_){return concat$0(_qa_,_p9_,csnd,_qe_,_qf_)}
      return comb_parser
              (function(_qc_,_qd_){return option(_qb_,_qc_,_qd_)},_p8_,s,t)}
    function rhs_pars(tag)
     {var _pQ_=0;
      function _pJ_(param)
       {var
         params=param[2],
         _p7_=param[1],
         value=_p7_[2],
         match=_p7_[1],
         name=match[2],
         addr=match[1],
         addr$0=check_type(3,addr),
         exprs=params[2],
         tags=params[1],
         name$0=[0,tag,tags,name];
        return [1,addr$0,name$0,value,exprs]}
      var _pK_=kwd(_f4_);
      function _pL_(_p5_,_p6_)
       {return concat$0(contract_expr,_pK_,cfst,_p5_,_p6_)}
      function _pM_(_p3_,_p4_){return option2(_f5_,_pL_,_p3_,_p4_)}
      function _pN_(_p1_,_p2_)
       {return concat$0(_pM_,ident_pars,couple,_p1_,_p2_)}
      function _pO_(_pZ_,_p0_)
       {return concat$0(_pN_,dot_value_pars,couple,_pZ_,_p0_)}
      function _pP_(_pX_,_pY_)
       {return concat$0(_pO_,parse_any_expr_list,couple,_pX_,_pY_)}
      var
       _pR_=
        [0,function(_pV_,_pW_){return comb_parser(_pP_,_pJ_,_pV_,_pW_)},_pQ_];
      function _pS_(expr){return [0,check_type(tag,expr)]}
      return choice_list
              ([0,
                function(_pT_,_pU_)
                 {return comb_parser(expr_pars,_pS_,_pT_,_pU_)},
                _pR_])}
    function stm_pars(tag,rettag,s,t)
     {var
       _op_=0,
       _oq_=
        [0,
         function(s,t)
          {if(0 === rettag)return [0,s,0,[0,_f__,s],t];
           if(0 === tag)return [0,s,1,[0,_f$_,s],t];
           throw [0,Fail,[0,_ga_,s]]},
         _op_],
       _or_=kwd(_ge_);
      function _os_(_pH_,_pI_){return stm_pars(tag,rettag,_pH_,_pI_)}
      function _ot_(_pF_,_pG_){return concat$0(_os_,_or_,cfst,_pF_,_pG_)}
      var
       _ou_=kwd(_gf_),
       _ov_=
        [0,
         function(_pD_,_pE_){return concat$0(_ou_,_ot_,csnd,_pD_,_pE_)},
         _oq_];
      function _ow_(param)
       {var
         stm3=param[2],
         _pC_=param[1],
         stm2=_pC_[2],
         match=_pC_[1],
         stm1=match[2],
         bexpr=match[1],
         default$0=0;
        if(stm2)var v=stm2[1],stm2$0=v;else var stm2$0=default$0;
        return [2,check_type(2,bexpr),stm1,stm2$0,stm3]}
      function _ox_(_pA_,_pB_){return stm_pars(tag,rettag,_pA_,_pB_)}
      var _oy_=0;
      function _oz_(_py_,_pz_){return stm_pars(tag,_oy_,_py_,_pz_)}
      var _oA_=kwd(_gg_);
      function _oB_(_pw_,_px_){return concat$0(_oA_,_oz_,csnd,_pw_,_px_)}
      function _oC_(_pu_,_pv_){return option(_oB_,_pu_,_pv_)}
      var _oD_=0;
      function _oE_(_ps_,_pt_){return stm_pars(tag,_oD_,_ps_,_pt_)}
      var _oF_=kwd(_gh_);
      function _oG_(_pq_,_pr_){return concat$0(_oF_,bool_expr,csnd,_pq_,_pr_)}
      function _oH_(_po_,_pp_){return concat$0(_oG_,_oE_,couple,_po_,_pp_)}
      function _oI_(_pm_,_pn_){return concat$0(_oH_,_oC_,couple,_pm_,_pn_)}
      function _oJ_(_pk_,_pl_){return concat$0(_oI_,_ox_,couple,_pk_,_pl_)}
      var
       _oK_=
        [0,function(_pi_,_pj_){return comb_parser(_oJ_,_ow_,_pi_,_pj_)},_ov_],
       _oL_=
        [0,
         function(s,t)
          {var
            _o4_=kwd(_gi_),
            match=
             option
              (function(_pg_,_ph_)
                {return concat$0(varname,_o4_,cfst,_pg_,_ph_)},
               s,
               t),
            t1=match[4],
            error1=match[3],
            var$0=match[2],
            s1=match[1];
           function aux(lhstag,lhs,s1,t1)
            {function _o__(_pe_,_pf_){return stm_pars(tag,rettag,_pe_,_pf_)}
             var
              _o$_=kwd(_gj_),
              _pa_=rhs_pars(lhstag),
              _pb_=
               concat$0
                (function(_pc_,_pd_)
                  {return concat$0(_pa_,_o$_,cfst,_pc_,_pd_)},
                 _o__,
                 couple,
                 s1,
                 t1),
              t2=_pb_[4],
              error2=_pb_[3],
              match=_pb_[2],
              cont=match[2],
              rhs=match[1],
              s2=_pb_[1];
             return [0,
                     s2,
                     [1,lhs,rhs,cont],
                     best(best(error1,error2),[0,_gk_,s2]),
                     t2]}
           if(var$0)
            var v=var$0[1],match$0=[0,get_field(t1,v)];
           else
            var match$0=0;
           if(match$0)
            {var _o5_=match$0[1];
             if(_o5_)
              {var _o6_=_o5_[1],_o7_=_o6_[1][1],_o8_=_o7_[2],_o9_=_o7_[1];
               return 0 === _o6_[2]
                       ?aux(_o9_,[0,[0,_o9_,_o8_]],s1,t1)
                       :aux(_o9_,[1,[0,_o9_,_o8_]],s1,t1)}
             throw [0,Fail,best([0,_gl_,s],error1)]}
           return aux(0,0,s1,t1)},
         _oK_];
      function _oj_(rhs,param)
       {if(rhs){var rhs$0=rhs[1];return [0,rhs$0]}
        if(0 === tag)return 1;
        throw [0,Reject,symbol(_gb_,pp_tag(tag))]}
      var _ok_=kwd(_gc_),_ol_=rhs_pars(tag);
      function _om_(_o2_,_o3_){return option(_ol_,_o2_,_o3_)}
      var _on_=kwd(_gd_);
      function _oo_(_o0_,_o1_){return concat$0(_on_,_om_,csnd,_o0_,_o1_)}
      var
       _oM_=
        [0,
         function(_oY_,_oZ_){return concat$0(_oo_,_ok_,_oj_,_oY_,_oZ_)},
         _oL_];
      return caml_call2
              (choice_list
                ([0,
                  function(s,t)
                   {function _oN_(param,_oX_){return 2}
                    var
                     _oO_=kwd(_f6_),
                     _oP_=kwd(_f7_),
                     _oQ_=kwd(_f8_),
                     _oR_=kwd(_f9_);
                    function _oS_(_oV_,_oW_)
                     {return concat$0(_oR_,_oQ_,csnd,_oV_,_oW_)}
                    return concat$0
                            (function(_oT_,_oU_)
                              {return concat$0(_oS_,_oP_,csnd,_oT_,_oU_)},
                             _oO_,
                             _oN_,
                             s,
                             t)},
                  _oM_]),
               s,
               t)}
    function add_local_var(tbl,param)
     {var tbl$0=tbl,param$0=param;
      for(;;)
       {var _oi_=param$0[1];
        if(_oi_)
         {var
           tl=_oi_[2],
           h=_oi_[1],
           param$1=[0,tl],
           tbl$1=add_field_to_table(tbl$0,[0,h],1),
           tbl$0=tbl$1,
           param$0=param$1;
          continue}
        return tbl$0}}
    function get_taglist(param)
     {if(param)
       {var tl=param[2],match=param[1],t=match[1];
        return [0,t,get_taglist(tl)]}
      return 0}
    function varlist_append(l1,l2)
     {var _oh_=l1[1];
      if(_oh_)
       {var tl=_oh_[2],hd=_oh_[1],match=varlist_append([0,tl],l2),l=match[1];
        return [0,[0,hd,l]]}
      return l2}
    function tagged_var_list_of_any_var_lis(param)
     {var _og_=param[1];
      if(_og_)
       {var
         tl=_og_[2],
         v=_og_[1],
         match=tagged_var_list_of_any_var_lis([0,tl]),
         vs=match[2],
         tags=match[1];
        return [0,[0,v[1],tags],[0,v,vs]]}
      return _gm_}
    function _gn_(param,s){var t=param[1];return [0,[0,[0,t,s],0]]}
    function pars_varlist_singleton(_oe_,_of_)
     {return concat$0(type_pars,varname,_gn_,_oe_,_of_)}
    function parameter_pars(s,t)
     {var _n4_=kwd(_gp_);
      function _n5_(_oc_,_od_)
       {return concat$0(_n4_,pars_varlist_singleton,csnd,_oc_,_od_)}
      function _n6_(_oa_,_ob_)
       {return kleenestar(_n5_,_go_,varlist_append,_oa_,_ob_)}
      function _n7_(_n__,_n$_)
       {return concat$0(pars_varlist_singleton,_n6_,varlist_append,_n__,_n$_)}
      var
       match=
        caml_call2
         (brackets_pars
           (function(_n8_,_n9_){return option2(_gq_,_n7_,_n8_,_n9_)}),
          s,
          t),
       nt=match[4],
       error=match[3],
       vl=match[2],
       ns=match[1];
      try
       {var x=add_local_var(nt,vl)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,ns])]}
        throw exn}
      return [0,ns,vl,error,x]}
    function vars_pars(s,t)
     {var
       _n1_=kwd(_gs_),
       match=
        kleenestar
         (function(_n2_,_n3_)
           {return concat$0(pars_varlist_singleton,_n1_,cfst,_n2_,_n3_)},
          _gr_,
          varlist_append,
          s,
          t),
       nt=match[4],
       error=match[3],
       vl=match[2],
       ns=match[1];
      try
       {var x=add_local_var(nt,vl)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,ns])]}
        throw exn}
      return [0,ns,vl,error,x]}
    function block_pars(opt,tag,vl,s,t)
     {if(opt)var sth=opt[1],check_payable=sth;else var check_payable=0;
      var _nC_=kwd(_gt_),_nD_=1;
      function _nE_(_nZ_,_n0_){return stm_pars(tag,_nD_,_nZ_,_n0_)}
      var _nF_=kwd(_gu_);
      function _nG_(param)
       {if(param)return 1;if(check_payable)throw [0,Reject,_gv_];return 0}
      var _nH_=kwd(_gw_);
      function _nI_(_nX_,_nY_){return option(_nH_,_nX_,_nY_)}
      function _nJ_(_nV_,_nW_){return comb_parser(_nI_,_nG_,_nV_,_nW_)}
      function _nK_(_nT_,_nU_){return concat$0(_nJ_,_nF_,cfst,_nT_,_nU_)}
      function _nL_(_nR_,_nS_)
       {return concat$0(_nK_,vars_pars,couple,_nR_,_nS_)}
      var
       _nM_=
        concat$0
         (function(_nP_,_nQ_){return concat$0(_nL_,_nE_,couple,_nP_,_nQ_)},
          _nC_,
          cfst,
          s,
          t),
       nt2=_nM_[4],
       error2=_nM_[3],
       _nN_=_nM_[2],
       stm=_nN_[2],
       _nO_=_nN_[1],
       match=_nO_[2],
       lvl=match[1],
       payable=_nO_[1],
       ns2=_nM_[1];
      return [0,ns2,[0,[0,vl,lvl,stm],payable],error2,remove_local_vars(nt2)]}
    function any_meth_pars(s,t)
     {var _ni_=brackets_pars(type_pars),_nj_=kwd(_gx_);
      function _nk_(_nA_,_nB_){return concat$0(_nj_,_ni_,csnd,_nA_,_nB_)}
      function _nl_(_ny_,_nz_){return option2(_gy_,_nk_,_ny_,_nz_)}
      var _nm_=kwd(_gz_);
      function _nn_(_nw_,_nx_){return concat$0(_nm_,varname,csnd,_nw_,_nx_)}
      var
       _no_=
        concat$0
         (function(_nu_,_nv_)
           {return concat$0(_nn_,parameter_pars,couple,_nu_,_nv_)},
          _nl_,
          couple,
          s,
          t),
       nt1=_no_[4],
       error1=_no_[3],
       _np_=_no_[2],
       t1=_np_[2][1],
       _nq_=_np_[1],
       match=_nq_[2],
       vl=match[1],
       name=_nq_[1],
       ns1=_no_[1];
      try
       {var nt1$0=add_fun_to_table(nt1,[0,[0,t1,get_taglist(vl),name]])}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best([0,msg,s],error1)]}
        throw exn}
      var
       _nr_=block_pars(0,t1,vl,ns1,nt1$0),
       nt2=_nr_[4],
       error2=_nr_[3],
       match$0=_nr_[2],
       payable=match$0[2],
       block=match$0[1],
       ns2=_nr_[1],
       _ns_=remove_local_vars(nt2),
       _nt_=best(error1,error2);
      return [0,ns2,[0,[0,t1,get_taglist(vl),name],block,payable],_nt_,_ns_]}
    function methods_pars(s)
     {var _ng_=0;
      return function(_nh_)
       {return kleenestar(any_meth_pars,_ng_,addel,s,_nh_)}}
    function _gA_(param)
     {var _nf_=param[1];
      if(0 === param[2])throw [0,Assert_failure,_gB_];
      return _nf_}
    var _gC_=0,_gD_=0;
    function _gF_(_nd_,_ne_){return block_pars(_gE_,_gD_,_gC_,_nd_,_ne_)}
    var _gH_=kwd(_gG_),_gJ_=kwd(_gI_),_gL_=kwd(_gK_);
    function _gM_(_nb_,_nc_){return concat$0(_gL_,_gJ_,cfst,_nb_,_nc_)}
    function _gN_(_m$_,_na_){return concat$0(_gM_,_gH_,cfst,_m$_,_na_)}
    function _gO_(_m9_,_m__){return concat$0(_gN_,_gF_,csnd,_m9_,_m__)}
    function fallback_pars(_m7_,_m8_){return comb_parser(_gO_,_gA_,_m7_,_m8_)}
    function actor_pars(s,t)
     {function _mI_(param)
       {var
         fallback=param[2],
         _m6_=param[1],
         methods=_m6_[2],
         match=_m6_[1],
         fields=match[2],
         name=match[1];
        return [0,name,methods,fallback,fields]}
      var _mJ_=kwd(_gP_);
      function _mK_(_m4_,_m5_){return option(fallback_pars,_m4_,_m5_)}
      var _mL_=kwd(_gQ_),_mM_=kwd(_gR_);
      function _mN_(_m2_,_m3_){return concat$0(_mM_,varname,csnd,_m2_,_m3_)}
      function _mO_(_m0_,_m1_){return concat$0(_mN_,_mL_,cfst,_m0_,_m1_)}
      function _mP_(_mY_,_mZ_)
       {return concat$0(_mO_,fields_pars,couple,_mY_,_mZ_)}
      function _mQ_(_mW_,_mX_)
       {return concat$0(_mP_,methods_pars,couple,_mW_,_mX_)}
      function _mR_(_mU_,_mV_){return concat$0(_mQ_,_mK_,couple,_mU_,_mV_)}
      var
       match=
        comb_parser
         (function(_mS_,_mT_){return concat$0(_mR_,_mJ_,cfst,_mS_,_mT_)},
          _mI_,
          s,
          t),
       tbl=match[4],
       error=match[3],
       ast=match[2],
       s$0=match[1];
      return [0,
              s$0,
              ast,
              error,
              caml_call1
               (find_all(function(param){return 0 === param[0]?1:0}),tbl)]}
    var _gS_=0;
    function _gT_(_mG_,_mH_)
     {return kleenestar(actor_pars,_gS_,addel,_mG_,_mH_)}
    function configuration_pars(_mE_,_mF_)
     {return concat$0(_gT_,eof,cfst,_mE_,_mF_)}
    var lexer=make_lexer(_gU_);
    function initialize_table_with_contract(tokens)
     {function skip_to_end_of_contract(n,param)
       {var n$0=n,param$0=param;
        for(;;)
         {if(param$0)
           {var _mC_=param$0[1];
            if(0 === _mC_[0])
             {var _mD_=_mC_[1];
              if(! caml_string_notequal(_mD_,_gV_))
               {var
                 param$2=param$0[2],
                 n$2=n$0 + 1 | 0,
                 n$0=n$2,
                 param$0=param$2;
                continue}
              if(! caml_string_notequal(_mD_,_gW_))
               {var tl=param$0[2];
                if(0 === n$0)return tl;
                var n$1=n$0 - 1 | 0,n$0=n$1,param$0=tl;
                continue}}
            var param$1=param$0[2],param$0=param$1;
            continue}
          throw [0,Fail,_gX_]}}
      function aux(acc,l)
       {var acc$0=acc,l$0=l;
        for(;;)
         {if(l$0)
           {var _mw_=l$0[1];
            if(0 === _mw_[0] && ! caml_string_notequal(_mw_[1],_gY_))
             {var _mx_=l$0[2];
              if(_mx_)
               {var _my_=_mx_[1];
                if(1 === _my_[0])
                 {var _mz_=_mx_[2];
                  if(_mz_)
                   {var _mA_=_mz_[1];
                    if(0 === _mA_[0])
                     {var _mB_=_my_[1];
                      if(! caml_string_notequal(_mA_[1],_g0_))
                       {var tl=_mz_[2];
                        try
                         {var acc$1=add_contract_to_table(acc$0,_mB_)}
                        catch(exn$0)
                         {exn$0 = caml_wrap_exception(exn$0);
                          if(exn$0[1] === Reject)
                           {var msg=exn$0[2];throw [0,Fail,[0,msg,l$0]]}
                          throw exn$0;
                          var exn=exn$0}
                        var l$1=skip_to_end_of_contract(0,tl),acc$0=acc$1,l$0=l$1;
                        continue}}}}}}
            throw [0,Fail,[0,_gZ_,l$0]]}
          return acc$0}}
      return rev(aux(0,tokens))}
    function test_stream(f,stream)
     {try
       {var
         tokens=get_tokens(lexer,stream),
         tbl=initialize_table_with_contract(tokens),
         match$0=configuration_pars(tokens,tbl),
         conf=match$0[2],
         _mv_=caml_call1(f,conf);
        return _mv_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var match=exn[2],l=match[2],msg=match[1];
          return symbol
                  (_g3_,
                   symbol(_g2_,symbol(msg,symbol(_g1_,print_token_list(l)))))}
        return symbol(_g4_,to_string(exn))}}
    function test_string(f,s)
     {var
       count=[0,0],
       stream=
        from
         (function(param)
           {var c=count[1];
            return c < caml_ml_string_length(s)
                    ?(count[1]++,[0,caml_string_get(s,c)])
                    :0});
      return test_stream(f,stream)}
    function pp_expr$1(param)
     {switch(param[0])
       {case 0:var n=param[1];return caml_string_of_jsbytes("" + n);
        case 1:var v=param[1];return v;
        case 2:
         var
          e2=param[2],
          e1=param[1],
          _mr_=symbol(_g6_,symbol(pp_expr$1(e2),_g5_));
         return symbol(_g7_,symbol(pp_expr$1(e1),_mr_));
        case 3:
         var
          e2$0=param[2],
          e1$0=param[1],
          _ms_=symbol(_g9_,symbol(pp_expr$1(e2$0),_g8_));
         return symbol(_g__,symbol(pp_expr$1(e1$0),_ms_));
        case 4:
         var
          e2$1=param[2],
          e1$1=param[1],
          _mt_=symbol(_ha_,symbol(pp_expr$1(e2$1),_g$_));
         return symbol(_hb_,symbol(pp_expr$1(e1$1),_mt_));
        case 5:
         var
          e2$2=param[2],
          e1$2=param[1],
          _mu_=symbol(_hd_,symbol(pp_expr$1(e2$2),_hc_));
         return symbol(_he_,symbol(pp_expr$1(e1$2),_mu_));
        default:var e=param[1];return symbol(_hf_,pp_expr$1(e))}}
    function pp_pred$0(param)
     {switch(param[0])
       {case 0:var b=param[1];return string_of_bool(b);
        case 1:
         var
          e2=param[2],
          e1=param[1],
          _mm_=symbol(_hh_,symbol(pp_expr$1(e2),_hg_));
         return symbol(_hi_,symbol(pp_expr$1(e1),_mm_));
        case 2:
         var
          e2$0=param[2],
          e1$0=param[1],
          _mn_=symbol(_hk_,symbol(pp_expr$1(e2$0),_hj_));
         return symbol(_hl_,symbol(pp_expr$1(e1$0),_mn_));
        case 3:
         var
          e2$1=param[2],
          e1$1=param[1],
          _mo_=symbol(_hn_,symbol(pp_expr$1(e2$1),_hm_));
         return symbol(_ho_,symbol(pp_expr$1(e1$1),_mo_));
        case 4:
         var
          e2$2=param[2],
          e1$2=param[1],
          _mp_=symbol(_hq_,symbol(pp_pred$0(e2$2),_hp_));
         return symbol(_hr_,symbol(pp_pred$0(e1$2),_mp_));
        case 5:
         var
          e2$3=param[2],
          e1$3=param[1],
          _mq_=symbol(_ht_,symbol(pp_pred$0(e2$3),_hs_));
         return symbol(_hu_,symbol(pp_pred$0(e1$3),_mq_));
        default:var p=param[1];return symbol(_hv_,pp_pred$0(p))}}
    function mk_indent$0(n){return make$0(3 * n | 0,32)}
    function pp_typ(indent,s)
     {switch(s[0])
       {case 0:var l=s[1],_mg_=concat(_hw_,map(pp_expr$1,l));break;
        case 1:
         var
          l$0=s[2],
          f=s[1],
          _mg_=
           symbol(f,symbol(_hz_,symbol(concat(_hy_,map(pp_expr$1,l$0)),_hx_)));
         break;
        default:
         var _mh_=s[1];
         if(! _mh_)throw [0,Assert_failure,_hG_];
         var
          tl=_mh_[2],
          match=_mh_[1],
          s$0=match[2],
          p=match[1],
          _mi_=
           concat
            (_hD_,
             map
              (function(param)
                {var
                  s=param[2],
                  p=param[1],
                  _mk_=symbol(_hA_,pp_typ(indent + 2 | 0,s)),
                  _ml_=symbol(_hB_,symbol(pp_pred$0(p),_mk_));
                 return symbol(_hC_,symbol(mk_indent$0(indent),_ml_))},
               tl)),
          _mj_=symbol(_hE_,symbol(pp_typ(indent + 2 | 0,s$0),_mi_)),
          _mg_=symbol(_hF_,symbol(pp_pred$0(p),_mj_))}
      return symbol(mk_indent$0(indent),_mg_)}
    function pp_function(param)
     {var
       stm=param[3],
       params=param[2],
       f=param[1],
       _mf_=symbol(_hH_,pp_typ(1,stm));
      return symbol(f,symbol(_hJ_,symbol(concat(_hI_,params),_mf_)))}
    function symbol$0(s1,s2){return symbol(s1,symbol(_hL_,s2))}
    var
     stack_address=symbol$0(stack,caml_string_of_jsbytes("1")),
     bottom=[0,min_int];
    function string_of_meth(addr,m)
     {var _me_=concat(_hN_,pp_tag_list(m[2]));
      return symbol$0(addr,symbol$0(m[3],_me_))}
    function int_of_address(n){return [0,caml_hash(10,100,0,n)]}
    function int_of_meth(m){return [0,caml_hash(10,100,0,[0,m[2],m[3]])]}
    function int_of_bool(param){return 0 === param?_hO_:_hP_}
    function assign_gamma(k,v,param)
     {if(param)
       {var tl=param[2],p=param[1],k$0=p[1];
        return caml_equal(k,k$0)?[0,[0,k,v],tl]:[0,p,assign_gamma(k,v,tl)]}
      throw [0,Assert_failure,_hQ_]}
    function assign(k,v,init)
     {var
       _l$_=init[7],
       _ma_=init[6],
       _mb_=init[5],
       _mc_=init[4],
       _md_=assign_gamma(k,v,init[3]);
      return [0,init[1],init[2],_md_,_mc_,_mb_,_ma_,_l$_]}
    function lookup_gamma(k,gamma)
     {try
       {var _l9_=assoc(k,gamma);return _l9_}
      catch(_l__)
       {_l__ = caml_wrap_exception(_l__);
        if(_l__ === Not_found){error(k);throw [0,Assert_failure,_hR_]}
        throw _l__}}
    function lookup(status,k){return lookup_gamma(k,status[3])}
    function address_of(status,v)
     {var a=lookup(status,v);
      try
       {var
         _l5_=status[7],
         _l6_=
          find
            (function(param)
              {var c=param[1];return caml_equal(int_of_address(c),a)},
             _l5_)
           [1];
        return _l6_}
      catch(_l7_)
       {_l7_ = caml_wrap_exception(_l7_);
        if(_l7_ === Not_found)
         {error(symbol(_hU_,v));
          error(symbol(_hV_,pp_expr$1(a)));
          var _l4_=status[7];
          error
           (symbol(_hX_,concat(_hW_,map(function(_l8_){return _l8_[1]},_l4_))));
          throw [0,Assert_failure,_hY_]}
        throw _l7_}}
    function type_of_address(status,expr)
     {if(typeof expr === "number")
       {if(1 === expr)return address_of(status,msg_sender)}
      else
       switch(expr[0])
        {case 0:var v=expr[1];return address_of(status,v[2]);
         case 1:
          var v$0=expr[1];
          return address_of(status,symbol$0(status[6],v$0[2]));
         case 13:var a=expr[1];return a
         }
      return status[6]}
    function type_of_iexpr(status,expr)
     {if(typeof expr !== "number")
       switch(expr[0])
        {case 0:var v=expr[1];return lookup(status,v[2]);
         case 1:
          var v$0=expr[1];return lookup(status,symbol$0(status[6],v$0[2]));
         case 2:
          var e2=expr[2],e1=expr[1],_l0_=type_of_iexpr(status,e2);
          return [2,type_of_iexpr(status,e1),_l0_];
         case 3:
          var e2$0=expr[2],e1$0=expr[1],_l1_=type_of_iexpr(status,e2$0);
          return [3,type_of_iexpr(status,e1$0),_l1_];
         case 4:
          var e2$1=expr[2],e1$1=expr[1],_l2_=type_of_iexpr(status,e2$1);
          return [4,type_of_iexpr(status,e1$1),_l2_];
         case 5:
          var e2$2=expr[2],e1$2=expr[1],_l3_=type_of_iexpr(status,e2$2);
          return [5,type_of_iexpr(status,e1$2),_l3_];
         case 6:var e=expr[1];return [6,type_of_iexpr(status,e)];
         case 13:var b=expr[1];return [0,b];
         case 14:
          var a=expr[1];
          return lookup(status,symbol$0(type_of_address(status,a),balance))
         }
      return lookup(status,msg_value)}
    function type_of_pred(status,expr)
     {if(typeof expr !== "number")
       switch(expr[0])
        {case 1:
          var v$0=expr[1],_lU_=int_of_bool(1);
          return [3,lookup(status,symbol$0(status[6],v$0[2])),_lU_];
         case 7:
          var e2=expr[2],e1=expr[1],_lV_=type_of_iexpr(status,e2);
          return [1,type_of_iexpr(status,e1),_lV_];
         case 8:
          var e2$0=expr[2],e1$0=expr[1],_lW_=type_of_iexpr(status,e2$0);
          return [2,type_of_iexpr(status,e1$0),_lW_];
         case 9:
          switch(expr[1])
           {case 0:return _hZ_;
            case 1:
             var e2$1=expr[3],e1$1=expr[2],_lX_=type_of_iexpr(status,e2$1);
             return [3,type_of_iexpr(status,e1$1),_lX_];
            case 2:
             var
              e2$2=expr[3],
              e1$2=expr[2],
              e1$3=type_of_pred(status,e1$2),
              e2$3=type_of_pred(status,e2$2);
             return [5,[4,e1$3,e2$3],[4,[6,e1$3],[6,e2$3]]];
            default:
             var
              a2=expr[3],
              a1=expr[2],
              a1$0=int_of_address(type_of_address(status,a1)),
              a2$0=int_of_address(type_of_address(status,a2));
             return [3,a1$0,a2$0]}
         case 10:
          var e2$4=expr[2],e1$4=expr[1],_lY_=type_of_pred(status,e2$4);
          return [4,type_of_pred(status,e1$4),_lY_];
         case 11:
          var e2$5=expr[2],e1$5=expr[1],_lZ_=type_of_pred(status,e2$5);
          return [5,type_of_pred(status,e1$5),_lZ_];
         case 12:var p=expr[1];return [6,type_of_pred(status,p)];
         case 13:var b=expr[1];return [0,b]
         }
      var v=expr[1],_lT_=int_of_bool(1);
      return [3,lookup(status,v[2]),_lT_]}
    function type_of_expr(status,tag,expr)
     {switch(tag)
       {case 0:return [0,-306849112,int_of_unit];
        case 1:return [0,-306849112,type_of_iexpr(status,expr)];
        case 2:return [0,345791162,type_of_pred(status,expr)];
        default:
         return [0,-306849112,int_of_address(type_of_address(status,expr))]}}
    function revert(status)
     {var _lS_=op(status[1],status[1]);
      return [0,map(function(v){return [1,v]},_lS_)]}
    function commit(status)
     {var
       _lO_=status[2],
       _lP_=map(function(_lR_){return lookup(status,_lR_)},_lO_),
       _lQ_=status[1];
      return [0,op(map(function(v){return [1,v]},_lQ_),_lP_)]}
    function if_then_else(p,t1,t2)
     {return caml_equal(t1,t2)?t1:[2,[0,[0,p,t1],[0,[0,[6,p],t2],0]]]}
    function forall_boolean(status,l,f)
     {var acc$0=acc,param=l;
      for(;;)
       {if(param)
         {var _lL_=param[1];
          if(345791162 <= _lL_[1])
           {var
             tl=param[2],
             p=_lL_[2],
             acctrue=
              map
               (function(p)
                  {return function(param)
                    {var accl=param[2],accp=param[1];
                     return [0,[4,accp,p],[0,int_of_bool(1),accl]]}}
                 (p),
                acc$0),
             accfalse=
              map
               (function(p)
                  {return function(param)
                    {var accl=param[2],accp=param[1];
                     return [0,[4,accp,[6,p]],[0,int_of_bool(0),accl]]}}
                 (p),
                acc$0),
             acc$1=op(acctrue,accfalse),
             acc$0=acc$1,
             param=tl;
            continue}
          var
           tl$0=param[2],
           expr=_lL_[2],
           acc$2=
            map
             (function(expr)
                {return function(param)
                  {var accl=param[2],accp=param[1];
                   return [0,accp,[0,expr,accl]]}}
               (expr),
              acc$0),
           acc$0=acc$2,
           param=tl$0;
          continue}
        if(acc$0)
         {var _lM_=acc$0[1],_lN_=_lM_[1];
          if(0 === _lN_[0] && 0 !== _lN_[1] && ! acc$0[2])
           {var l$0=_lM_[2];return caml_call1(f,l$0)}}
        var
         aux=
          function(param)
           {if(param)
             {var
               ll=param[2],
               match=param[1],
               l=match[2],
               p=match[1],
               typ=caml_call1(f,l);
              return if_then_else(p,typ,aux(ll))}
            return revert(status)};
        return aux(acc$0)}}
    var _h1_=[0,0,0,0];
    function type_of_expr_poly(status)
     {if(! _h1_[1])
       {if(public_methods === 0)
         var _lD_=new_table([0]);
        else
         {var l=public_methods.length - 1;
          if(0 === l)
           var tags=[0];
          else
           {var
             r=caml_make_vect(l,f$0(public_methods[1])),
             _ly_=l - 1 | 0,
             _lx_=1;
            if(! (_ly_ < 1))
             {var i=_lx_;
              for(;;)
               {r[1 + i] = f$0(public_methods[1 + i]);
                var _lz_=i + 1 | 0;
                if(_ly_ !== i){var i=_lz_;continue}
                break}}
            var tags=r}
          var
           table=new_table(tags),
           _lB_=public_methods.length - 1 - 1 | 0,
           _lA_=0;
          if(! (_lB_ < 0))
           {var i$0=_lA_;
            for(;;)
             {var met=public_methods[1 + i$0],lab=(i$0 * 2 | 0) + 2 | 0;
              table[3] = caml_call3(Meths[4],met,lab,table[3]);
              table[4] = caml_call3(Labs[4],lab,1,table[4]);
              var _lC_=i$0 + 1 | 0;
              if(_lB_ !== i$0){var i$0=_lC_;continue}
              break}}
          var _lD_=table}
        var
         _lE_=new_variable(_lD_,_h2_),
         label=get_method_label(_lD_,_h3_),
         element=
          function(self_1)
           {var env=self_1[1 + _lE_],_lI_=env[1];
            return function(_lJ_,_lK_){return type_of_expr(_lI_,_lJ_,_lK_)}};
        method_count[1]++;
        if(caml_call2(Labs[27],label,_lD_[4]))
         {resize$0(_lD_,label + 1 | 0);
          caml_check_bound(_lD_[2],label)[1 + label] = element}
        else
         _lD_[6] = [0,[0,label,element],_lD_[6]];
        var
         _lF_=
          function(_lH_)
           {var obj=caml_obj_block(248,_lD_[1]);
            obj[1] = _lD_[2];
            var _lG_=caml_set_oo_id(obj);
            _lG_[1 + _lE_] = _lH_;
            return _lG_};
        inst_var_count[1] = (inst_var_count[1] + _lD_[1] | 0) - 1 | 0;
        _lD_[8] = rev(_lD_[8]);
        resize$0
         (_lD_,3 + ((caml_check_bound(_lD_[2],1)[2] * 16 | 0) / 32 | 0) | 0);
        _h1_[1] = _lF_}
      return caml_call1(_h1_[1],[0,status])}
    function type_of_call0(status,addr,meth,value,sender,params)
     {var _lq_=tag_list_length(meth[2]);
      if(length(params) === _lq_)
       {var
         name=string_of_meth(addr,meth),
         aux=
          function(i)
           {if(status[4] < i)return 0;
            var _lw_=aux(i + 1 | 0);
            return [0,
                    lookup
                     (status,symbol$0(stack,caml_string_of_jsbytes("" + i))),
                    _lw_]},
         stack$0=aux(1),
         _lr_=op([0,sender,[0,value,params]],stack$0),
         _ls_=status[2],
         _lt_=op(map(function(_lv_){return lookup(status,_lv_)},_ls_),_lr_),
         _lu_=status[1],
         args=op(map(function(v){return [1,v]},_lu_),_lt_);
        return [1,name,args]}
      throw [0,Assert_failure,_h4_]}
    function match_method(status,addr,meth,params)
     {try
       {var meths=assoc(addr,status[7])}
      catch(_lp_)
       {_lp_ = caml_wrap_exception(_lp_);
        if(_lp_ === Not_found)throw [0,Assert_failure,_h5_];
        throw _lp_}
      function aux(meth,params,meths)
       {var meths$0=meths;
        for(;;)
         {if(meths$0)
           {var
             tl=meths$0[2],
             _lo_=meths$0[1],
             payable=_lo_[2],
             match=_lo_[1],
             meth$0=match[1],
             match$0=eq_tag_list(meth[2],meth$0[2]);
            if(match$0 && caml_string_equal(meth[3],meth$0[3]))
             return [0,meth$0,payable,params];
            var meths$0=tl;
            continue}
          throw Not_found}}
      try
       {var _ll_=[0,aux(meth,params,meths)];return _ll_}
      catch(_lm_)
       {_lm_ = caml_wrap_exception(_lm_);
        if(_lm_ === Not_found)
         try
          {var _lk_=[0,aux(fallback,0,meths)];return _lk_}
         catch(_ln_)
          {_ln_ = caml_wrap_exception(_ln_);
           if(_ln_ === Not_found)return 0;
           throw _ln_}
        throw _lm_}}
    function transfer(status$1,to,amount,k)
     {var
       from=status$1[6],
       from_balance=lookup(status$1,symbol$0(from,balance)),
       _lj_=revert(status$1),
       _lh_=[3,lookup(status$1,symbol$0(from,balance)),amount],
       status=assign(symbol$0(from,balance),_lh_,status$1),
       _li_=[2,lookup(status,symbol$0(to,balance)),amount],
       status$0=assign(symbol$0(to,balance),_li_,status);
      return if_then_else
              ([4,[1,amount,_h6_],[1,from_balance,amount]],
               caml_call1(k,status$0),
               _lj_)}
    function msg_transfer(status,a1,val1,args1,k)
     {if(0 === val1)
       {var
         amount=args1[1],
         amount$0=type_of_iexpr(status,amount),
         to=type_of_address(status,a1);
        return transfer(status,to,amount$0,k)}
      return revert(status)}
    function type_of_call(status,tag,addr,meth,value,sender,params)
     {var
       addr$0=type_of_address(status,addr),
       match=match_method(status,addr$0,meth,params);
      if(match)
       {var
         match$0=match[1],
         params$0=match$0[3],
         payable=match$0[2],
         meth$0=match$0[1],
         _ld_=0 !== eq_tag(tag,0)?1:0,
         output_type_ok=_ld_ || (0 !== eq_tag(tag,meth$0[1])?1:0),
         payable_ok=payable || (0 === value?1:0);
        if(output_type_ok && payable_ok)
         {var
           amount=
            fold(_h0_,function(_lg_){return type_of_iexpr(status,_lg_)},value),
           _le_=meth$0[2],
           params$1=expr_list_map(type_of_expr_poly(status),_le_,params$0);
          return forall_boolean
                  (status,
                   params$1,
                   function(params)
                    {return 0 === value
                             ?type_of_call0(status,addr$0,meth$0,amount,sender,params)
                             :transfer
                               (status,
                                addr$0,
                                amount,
                                function(_lf_)
                                 {return type_of_call0
                                          (_lf_,addr$0,meth$0,amount,sender,params)})})}
        return revert(status)}
      return revert(status)}
    function tchoice(param,guards_and_typs)
     {function aux(guard,param)
       {if(param)
         {var
           tl=param[2],
           match=param[1],
           typ=match[2],
           g=match[1],
           _lc_=caml_equal(guard,_h7_)?g:[5,guard,g];
          return [0,[0,g,typ],aux(_lc_,tl)]}
        return 0}
      return [2,aux(_h8_,guards_and_typs)]}
    function forall_contract(status,otherwise,f)
     {var
       _lb_=status[7],
       l$1=
        map
         (function(param)
           {var ms=param[2],c=param[1];return caml_call2(f,c,ms)},
          _lb_);
      if(0 === otherwise)
       {var acc=0,l=l$1;
        for(;;)
         {if(acc)
           {var _la_=acc[1];
            if(l)
             {var tl=l[2],hd2=l[1];
              if(caml_equal(_la_[2],hd2[2]))
               {var acc$0=[0,[0,[5,_la_[1],hd2[1]],_la_[2]]],acc=acc$0,l=tl;
                continue}
              return tchoice(status,l$1)}
            return _la_[2]}
          if(l){var l$0=l[2],hd=l[1],acc$1=[0,hd],acc=acc$1,l=l$0;continue}
          return _h9_}}
      return tchoice(status,op(l$1,otherwise))}
    function type_of_cont(status,ret)
     {return type_of_call0(status,runtime,dispatch,dummy,dummy,[0,ret,0])}
    function type_of_stm(status,tag,stm)
     {var status$0=status,stm$0=stm;
      for(;;)
       {if(typeof stm$0 === "number")
         switch(stm$0)
          {case 1:return type_of_cont(status$0,int_of_unit);
           case 2:return revert(status$0)
           }
        else
         switch(stm$0[0])
          {case 0:
            var _kJ_=stm$0[1];
            if(0 === _kJ_[0])
             {var e=_kJ_[1],e$0=type_of_expr(status$0,tag,e);
              if(345791162 <= e$0[1])
               {var
                 p=e$0[2],
                 cont1=type_of_cont(status$0,int_of_bool(1)),
                 cont2=type_of_cont(status$0,int_of_bool(0));
                return if_then_else(p,cont1,cont2)}
              var e$1=e$0[2];
              return type_of_cont(status$0,e$1)}
            var _kK_=_kJ_[2],_kL_=_kJ_[1];
            if(0 === _kK_[1])
             {var _kM_=_kK_[2];
              if
               (_kM_
                &&
                1
                ===
                _kM_[1]
                &&
                !
                _kM_[2]
                &&
                !
                caml_string_notequal(_kK_[3],_h$_))
               {var args1$0=_kJ_[4],val1$0=_kJ_[3];
                return msg_transfer
                        (status$0,
                         _kL_,
                         val1$0,
                         args1$0,
                         function(_k$_){return type_of_cont(_k$_,int_of_unit)})}}
            var args1=_kJ_[4],val1=_kJ_[3],sender=int_of_address(status$0[6]);
            return type_of_call(status$0,tag,_kL_,_kK_,val1,sender,args1);
           case 1:
            var _kN_=stm$0[1],_kO_=stm$0[2];
            if(0 === _kO_[0])
             {var stm$1=stm$0[3],e$2=_kO_[1],lhs_tag=tag_of_lhs(_kN_);
              if(typeof _kN_ === "number")
               var lhs=0;
              else
               if(0 === _kN_[0])
                var f=_kN_[1],lhs=[0,symbol$0(status$0[6],f[2])];
               else
                var v=_kN_[1],lhs=[0,v[2]];
              if(lhs)
               {var lhs$0=lhs[1],match=type_of_expr(status$0,lhs_tag,e$2);
                if(345791162 <= match[1])
                 {var
                   p$0=match[2],
                   status1=assign(lhs$0,int_of_bool(1),status$0),
                   typ1=type_of_stm(status1,tag,stm$1),
                   status2=assign(lhs$0,int_of_bool(0),status$0),
                   typ2=type_of_stm(status2,tag,stm$1);
                  return if_then_else(p$0,typ1,typ2)}
                var
                 e$3=match[2],
                 status$1=assign(lhs$0,e$3,status$0),
                 status$0=status$1,
                 stm$0=stm$1;
                continue}
              var stm$0=stm$1;
              continue}
            if(typeof _kN_ === "number")
             {var _kP_=stm$0[2],_kQ_=_kP_[2];
              if(0 === _kQ_[1])
               {var _kR_=_kQ_[2];
                if(_kR_ && 1 === _kR_[1] && ! _kR_[2])
                 {var _k0_=_kP_[1];
                  if(! caml_string_notequal(_kQ_[3],_ia_))
                   {var stm$2=stm$0[3],args1$1=_kP_[4],val1$1=_kP_[3];
                    return msg_transfer
                            (status$0,
                             _k0_,
                             val1$1,
                             args1$1,
                             function(_k__){return type_of_stm(_k__,tag,stm$2)})}}}}
            var _kS_=stm$0[3],switch$0=0;
            if(typeof _kS_ === "number" || ! (0 === _kS_[0]))
             switch$0 = 1;
            else
             {var
               _kT_=_kS_[1],
               _kU_=stm$0[2],
               _kV_=_kU_[4],
               _kW_=_kU_[3],
               _kX_=_kU_[2],
               _kY_=_kU_[1];
              if(0 !== _kT_[0] && ! _kT_[3])
               {var
                 args2=_kT_[4],
                 m2=_kT_[2],
                 a2=_kT_[1],
                 _kZ_=m2[2],
                 args2$0=expr_list_map(type_of_expr_poly(status$0),_kZ_,args2),
                 addr=int_of_address(type_of_address(status$0,a2)),
                 meth=int_of_meth(m2),
                 sender$0=int_of_address(status$0[6]),
                 value=type_of_iexpr(status$0,2);
                return forall_boolean
                        (status$0,
                         args2$0,
                         function(args2)
                          {var
                            l=[0,addr,[0,meth,[0,value,[0,sender$0,args2]]]],
                            _k2_=length(l),
                            l$0=op(l,mk_list(bottom,status$0[5] - _k2_ | 0)),
                            gamma=[0,status$0[3]],
                            _k3_=status$0[4],
                            _k4_=status$0[5] + 1 | 0;
                           if(! (_k3_ < _k4_))
                            {var i=_k3_;
                             for(;;)
                              {var
                                _k6_=gamma[1],
                                _k7_=gamma[1],
                                _k8_=
                                 lookup_gamma
                                  (symbol$0
                                    (stack,caml_string_of_jsbytes("" + (i - status$0[5] | 0))),
                                   _k7_);
                               gamma[1]
                               =
                               assign_gamma
                                (symbol$0(stack,caml_string_of_jsbytes("" + i)),_k8_,_k6_);
                               var _k9_=i - 1 | 0;
                               if(_k4_ !== i){var i=_k9_;continue}
                               break}}
                           var n=1,param=l$0;
                           for(;;)
                            {if(param)
                              {var tl=param[2],hd=param[1],_k5_=gamma[1];
                               gamma[1]
                               =
                               assign_gamma
                                (symbol$0(stack,caml_string_of_jsbytes("" + n)),hd,_k5_);
                               var n$0=n + 1 | 0,n=n$0,param=tl;
                               continue}
                             var
                              status=
                               [0,
                                status$0[1],
                                status$0[2],
                                gamma[1],
                                status$0[4],
                                status$0[5],
                                status$0[6],
                                status$0[7]];
                             return type_of_call
                                     (status,tag_of_lhs(_kN_),_kY_,_kX_,_kW_,sender$0,_kV_)}})}}
            break;
           default:
            var _k1_=stm$0[4];
            if(typeof _k1_ === "number" && 2 <= _k1_)
             {var
               stm2=stm$0[3],
               stm1=stm$0[2],
               guard=stm$0[1],
               guard$0=type_of_pred(status$0,guard),
               stm1$0=type_of_stm(status$0,tag,stm1),
               stm2$0=type_of_stm(status$0,tag,stm2);
              return if_then_else(guard$0,stm1$0,stm2$0)}}
        throw [0,Assert_failure,_h__]}}
    function args_of_var_list(param)
     {if(param)
       {var tl=param[2],n=param[1],_kH_=args_of_var_list(tl),_kI_=n[2];
        return [0,[0,0 !== eq_tag(3,n[1])?1:0,_kI_],_kH_]}
      return 0}
    function type_of_a_method0
     (k$1,frame_size,fields,contracts,this$0,name,args,locals,typ_of)
     {var
       fields$0=map(function(_kG_){return _kG_[2]},fields),
       args$0=map(function(_kF_){return _kF_[2]},args),
       saved_gamma=map(function(n){return symbol(n,saved)},fields$0),
       opt=0,
       k=k$1;
      for(;;)
       {if(opt)var sth=opt[1],acc=sth;else var acc=0;
        if(0 === k)
         {var
           other_params=
            op(fields$0,op([0,msg_sender,[0,msg_value,args$0]],acc)),
           _kC_=
            map
             (function(param)
               {var v=param[2],t=param[1],_kE_=t?bottom:_hM_;
                return [0,v,_kE_]},
              locals),
           gamma=op(map(function(v){return [0,v,[1,v]]},other_params),_kC_),
           status=
            [0,saved_gamma,fields$0,gamma,k$1,frame_size,this$0,contracts],
           typ=caml_call1(typ_of,status),
           _kD_=op(saved_gamma,other_params);
          return [0,string_of_meth(this$0,name),_kD_,typ]}
        var
         k$0=k - 1 | 0,
         opt$0=[0,[0,symbol$0(stack,caml_string_of_jsbytes("" + k)),acc]],
         opt=opt$0,
         k=k$0;
        continue}}
    function type_of(max_args,max_stack,cfg)
     {var
       contracts=
        map
         (function(param)
           {var
             fb=param[3],
             methods=param[2],
             a=param[1],
             _kB_=fb?[0,[0,[0,fallback],1],0]:0;
            return [0,
                    a,
                    op
                     (map
                       (function(param)
                         {var payable=param[3],m=param[1];return [0,[0,m],payable]},
                        methods),
                      _kB_)]},
          cfg),
       frame_size=4 + max_args | 0,
       k=caml_mul(frame_size,1 + max_stack | 0);
      if(0 === max_stack)
       var frame_size$0=0,k$0=0;
      else
       var frame_size$0=frame_size,k$0=k;
      var
       _j__=0,
       fields=
        rev
         (fold_left
           (function(acc,contr)
             {var
               fields=contr[4],
               a$0=contr[1],
               accu=0,
               param=fields,
               _kz_=[0,[0,0,symbol$0(a$0,balance)],0];
              for(;;)
               {if(param)
                 {var
                   l=param[2],
                   a=param[1],
                   f=a[1],
                   _kA_=symbol$0(a$0,f[2]),
                   accu$0=[0,[0,0 !== eq_tag(f[1],3)?1:0,_kA_],accu],
                   accu=accu$0,
                   param=l;
                  continue}
                return op(op(accu,_kz_),acc)}},
            _j__,
            cfg)),
       _j$_=0,
       program_rev=
        fold_left
         (function(acc,contr)
           {var fb=contr[3],meths=contr[2],a=contr[1];
            error(symbol(a,symbol(_ib_,pp_expr$1(int_of_address(a)))));
            if(fb)
             var
              fb$0=fb[1],
              _ku_=op(meths,[0,any_method_decl_of_fallback(fb$0),0]);
            else
             var _ku_=meths;
            var _kv_=0;
            return op
                    (fold_left
                      (function(acc,meth)
                        {var
                          block=meth[2],
                          name=meth[1],
                          locals=block[2],
                          args=block[1],
                          locals$0=args_of_var_list(locals),
                          args$0=args_of_var_list(args),
                          param$0=op(fields,args$0),
                          accu=0,
                          param=param$0,
                          _kw_=[0,msg_sender,0];
                         for(;;)
                          {if(param)
                            {var
                              l=param[2],
                              x=param[1],
                              v$0=x[2],
                              b=x[1],
                              match=b?[0,v$0]:0;
                             if(match)
                              {var v=match[1],accu$0=[0,v,accu],accu=accu$0,param=l;
                               continue}
                             var param=l;
                             continue}
                           var
                            to_sum_on=op(rev(accu),_kw_),
                            aux=
                             function(status,param)
                              {if(param)
                                {var tl=param[2],v=param[1];
                                 return forall_contract
                                         (status,
                                          0,
                                          function(a,param)
                                           {var
                                             a$0=int_of_address(a),
                                             _ky_=aux(assign(v,a$0,status),tl);
                                            return [0,[3,lookup(status,v),a$0],_ky_]})}
                               var stm=block[3];
                               return type_of_stm(status,name[1],stm)};
                           return [0,
                                   type_of_a_method0
                                    (k$0,
                                     frame_size$0,
                                     fields,
                                     contracts,
                                     a,
                                     name,
                                     args$0,
                                     locals$0,
                                     function(_kx_){return aux(_kx_,to_sum_on)}),
                                   acc]}},
                       _kv_,
                       _ku_),
                     acc)},
          _j$_,
          cfg),
       balances=
        map
         (function(param){var a=param[1];return symbol$0(a,balance)},
          contracts),
       fieldsno=length(fields),
       ret$0=[1,ret],
       _ka_=0,
       _kb_=
        [0,
         type_of_a_method0
          (k$0,
           frame_size$0,
           fields,
           contracts,
           runtime,
           dispatch,
           [0,[0,1,ret],0],
           0,
           function(status$0)
            {if(0 < status$0[4])
              {var
                is_empty=[3,lookup(status$0,stack_address),bottom],
                otherwise=[0,[0,is_empty,commit(status$0)],0],
                gamma=[0,status$0[3]],
                _kh_=status$0[4] - status$0[5] | 0,
                _kg_=1;
               if(! (_kh_ < 1))
                {var i$0=_kg_;
                 for(;;)
                  {var
                    _km_=gamma[1],
                    _kn_=gamma[1],
                    _ko_=
                     lookup_gamma
                      (symbol$0
                        (stack,caml_string_of_jsbytes("" + (i$0 + status$0[5] | 0))),
                       _kn_);
                   gamma[1]
                   =
                   assign_gamma
                    (symbol$0(stack,caml_string_of_jsbytes("" + i$0)),_ko_,_km_);
                   var _kp_=i$0 + 1 | 0;
                   if(_kh_ !== i$0){var i$0=_kp_;continue}
                   break}}
               var
                _ki_=(status$0[4] - status$0[5] | 0) + 1 | 0,
                _kj_=status$0[4];
               if(! (_kj_ < _ki_))
                {var i=_ki_;
                 for(;;)
                  {var _kk_=gamma[1];
                   gamma[1]
                   =
                   assign_gamma
                    (symbol$0(stack,caml_string_of_jsbytes("" + i)),bottom,_kk_);
                   var _kl_=i + 1 | 0;
                   if(_kj_ !== i){var i=_kl_;continue}
                   break}}
               var
                read=
                 function(i)
                  {if(status$0[5] < i)return 0;
                   var _ks_=read(i + 1 | 0),_kt_=status$0[3];
                   return [0,
                           lookup_gamma
                            (symbol$0(stack,caml_string_of_jsbytes("" + i)),_kt_),
                           _ks_]},
                status=
                 [0,
                  status$0[1],
                  status$0[2],
                  gamma[1],
                  status$0[4],
                  status$0[5],
                  status$0[6],
                  status$0[7]],
                l=read(1),
                _kc_=length(l);
               if(status$0[5] === _kc_)
                {if(l)
                  {var _kd_=l[2];
                   if(_kd_)
                    {var _ke_=_kd_[2];
                     if(_ke_)
                      {var _kf_=_ke_[2];
                       if(_kf_)
                        {var
                          params=_kf_[2],
                          sender=_kf_[1],
                          value=_ke_[1],
                          meth=_kd_[1],
                          addr=l[1];
                         return forall_contract
                                 (status,
                                  otherwise,
                                  function(addr$0,meths)
                                   {function f(param)
                                     {var
                                       match=param[1],
                                       meth$0=match[1],
                                       params$0=prefix(tag_list_length(meth$0[2]),[0,ret$0,params]),
                                       _kr_=
                                        type_of_call0(status,addr$0,meth$0,value,sender,params$0);
                                      return [0,[3,meth,int_of_meth(meth$0)],_kr_]}
                                    var _kq_=tchoice(status,map(f,meths));
                                    return [0,[3,addr,int_of_address(addr$0)],_kq_]})}}}}
                 throw [0,Assert_failure,_hS_]}
               throw [0,Assert_failure,_hT_]}
             return commit(status$0)}),
         _ka_],
       types=op(rev(program_rev),_kb_);
      return [0,types,fieldsno,op(balances,[0,msg_value,0])]}
    var NotLinear=[248,_ic_,caml_fresh_oo_id(0)];
    function compute_expr(param)
     {switch(param[0])
       {case 0:var n=param[1];return [1,n];
        case 1:var v=param[1];return [0,v];
        case 2:
         var e2=param[2],e1=param[1],_j5_=compute_expr(e2);
         return [2,compute_expr(e1),_j5_];
        case 3:
         var e2$0=param[2],e1$0=param[1],_j6_=compute_expr(e2$0);
         return [3,compute_expr(e1$0),_j6_];
        case 4:
         var _j7_=param[1];
         if(0 === _j7_[0])
          {var e2$1=param[2],n$0=_j7_[1];return [4,n$0,compute_expr(e2$1)]}
         throw NotLinear;
        case 5:
         var _j8_=param[2],_j9_=param[1];
         if(0 === _j8_[0]){var n$1=_j8_[1];return [5,compute_expr(_j9_),n$1]}
         throw NotLinear;
        default:var e=param[1];return [6,compute_expr(e)]}}
    var bot=0;
    function conj(l1,l2)
     {return flatten
              (map(function(x){return map(function(y){return op(x,y)},l2)},l1))}
    function atomic_neg(param)
     {var e2=param[3],p=param[2],e1=param[1];
      switch(p)
       {case 0:var _j4_=_id_;break;
        case 1:var _j4_=_ie_;break;
        case 2:var _j4_=_if_;break;
        case 3:var _j4_=_ig_;break;
        default:var _j4_=_ih_}
      return map(function(op){return [0,e1,op,e2]},_j4_)}
    function distribute(param)
     {if(param){var tl=param[2],hd=param[1];return conj(hd,distribute(tl))}
      return top}
    function compute_pred(param)
     {switch(param[0])
       {case 0:return 0 === param[1]?bot:top;
        case 1:
         var
          e2=param[2],
          e1=param[1],
          e1$0=compute_expr(e1),
          e2$0=compute_expr(e2);
         return [0,[0,[0,e1$0,0,e2$0],0],0];
        case 2:
         var
          e2$1=param[2],
          e1$1=param[1],
          e1$2=compute_expr(e1$1),
          e2$2=compute_expr(e2$1);
         return [0,[0,[0,e1$2,4,e2$2],0],0];
        case 3:
         var
          e2$3=param[2],
          e1$3=param[1],
          e1$4=compute_expr(e1$3),
          e2$4=compute_expr(e2$3);
         return [0,[0,[0,e1$4,2,e2$4],0],0];
        case 4:
         var
          p2=param[2],
          p1=param[1],
          p1$0=compute_pred(p1),
          p2$0=compute_pred(p2);
         return conj(p1$0,p2$0);
        case 5:
         var
          p2$1=param[2],
          p1$1=param[1],
          p1$2=compute_pred(p1$1),
          p2$2=compute_pred(p2$1);
         return op(p1$2,p2$2);
        default:
         var
          p=param[1],
          disjl=compute_pred(p),
          conjl_disj_conj=
           map
            (function(conjl)
              {var
                _j3_=flatten(map(atomic_neg,conjl)),
                disj=map(function(x){return [0,x,0]},_j3_);
               return disj},
             disjl);
         return distribute(conjl_disj_conj)}}
    function compute_typ(gain,fcall,param)
     {switch(param[0])
       {case 0:
         var
          el=param[1],
          l$1=map(compute_expr,el),
          initial_balance=hd(l$1),
          n$1=length(l$1) / 2 | 0;
         if(0 <= n$1)
          {var l=l$1,n=n$1;
           for(;;)
            {if(l)
              {var l$0=l[2],a=l[1];
               if(0 !== n){var n$0=n - 1 | 0,l=l$0,n=n$0;continue}
               var final_balance=a}
             else
              var final_balance=failwith(_n_);
             break}}
         else
          var final_balance=invalid_arg(_o_);
         var
          cost=
           gain
            ?[3,final_balance,initial_balance]
            :[3,initial_balance,final_balance];
         return [0,[0,fcall,1,cost,0,0],0];
        case 1:
         var el$0=param[2],f=param[1],el$1=map(compute_expr,el$0);
         return [0,[0,fcall,0,_ii_,[0,[0,f,el$1],0],0],0];
        default:
         var l$2=param[1];
         return flatten
                 (map
                   (function(param)
                     {var
                       typ=param[2],
                       p=param[1],
                       pll=compute_pred(p),
                       l=compute_typ(gain,fcall,typ);
                      return flatten
                              (map
                                (function(param)
                                  {var
                                    pl1=param[5],
                                    calls=param[4],
                                    cost=param[3],
                                    to_nat=param[2],
                                    fcall=param[1];
                                   return map
                                           (function(pl){return [0,fcall,to_nat,cost,calls,op(pl,pl1)]},
                                            pll)},
                                 l))},
                    l$2))}}
    function split_nth(n)
     {var acc=0;
      return function(l$1)
       {var acc$0=acc,n$0=n,l=l$1;
        for(;;)
         {if(0 === n$0)return [0,rev(acc$0),l];
          if(l)
           {var
             l$0=l[2],
             hd=l[1],
             n$1=n$0 - 1 | 0,
             acc$1=[0,hd,acc$0],
             acc$0=acc$1,
             n$0=n$1,
             l=l$0;
            continue}
          throw [0,Assert_failure,_ij_]}}}
    function retype_stm(s)
     {if(typeof s === "number")
       switch(s){case 0:return s;case 1:return s;default:return s}
      else
       switch(s[0])
        {case 0:return s;
         case 1:
          var cont=s[3],rhs=s[2],lhs=s[1];return [1,lhs,rhs,retype_stm(cont)];
         default:
          var cont$0=s[4],stmb=s[3],stma=s[2],g=s[1];
          return [2,g,stma,stmb,retype_stm(cont$0)]}}
    function stm_concat(stm1,stm2)
     {if(typeof stm1 === "number")
       switch(stm1){case 0:return stm2;case 1:return stm1;default:return stm1}
      else
       switch(stm1[0])
        {case 0:return stm1;
         case 1:
          var cont=stm1[3],rhs=stm1[2],lhs=stm1[1];
          return [1,lhs,rhs,stm_concat(cont,stm2)];
         default:
          var
           cont$0=stm1[4],
           stmb=stm1[3],
           stma=stm1[2],
           g=stm1[1],
           cont$1=stm_concat(cont$0,stm2),
           _j2_=retype_stm(stm_concat(stmb,cont$1));
          return [2,g,retype_stm(stm_concat(stma,cont$1)),_j2_,2]}}
    function norm_stm(addr,params,locals,payable,stm)
     {if(typeof stm !== "number")
       switch(stm[0])
        {case 1:
          var _jR_=stm[1];
          if(typeof _jR_ === "number")
           {var _jS_=stm[2];
            if(0 !== _jS_[0])
             {var _jW_=_jS_[2];
              if(0 === _jW_[1])
               {var _jX_=_jW_[2];
                if
                 (_jX_
                  &&
                  1
                  ===
                  _jX_[1]
                  &&
                  !
                  _jX_[2]
                  &&
                  !
                  caml_string_notequal(_jW_[3],_iq_))
                 {var
                   stm$0=stm[3],
                   match$2=norm_stm(addr,params,locals,payable,stm$0),
                   stm$1=match$2[2],
                   meths$0=match$2[1];
                  return [0,meths$0,[1,0,_jS_,stm$1]]}}}}
          var
           cont=stm[3],
           rhs=stm[2],
           match=norm_stm(addr,params,locals,payable,cont),
           cont$0=match[2],
           meths=match[1],
           make_cont=
            function(param)
             {var
               match=
                tagged_var_list_of_any_var_lis
                 (varlist_append([0,params],[0,locals])),
               vars=match[2],
               varstags=match[1];
              if(typeof _jR_ === "number")
               var _j0_=_in_;
              else
               if(0 === _jR_[0])
                var v=_jR_[1],_j0_=[0,[0,_jR_],[0,v[1],[1,v]]];
               else
                var v$0=_jR_[1],_j0_=[0,[0,_jR_],[0,v$0[1],[0,v$0]]];
              var
               match$0=_j0_[2],
               ret_param=match$0[2],
               lhs_tag=match$0[1],
               klhs=_j0_[1],
               varstags$0=[0,lhs_tag,varstags],
               retparam=[0,lhs_tag,_io_],
               fparams=[0,retparam,vars],
               _j1_=
                symbol
                 (_ip_,
                  caml_string_of_jsbytes("" + caml_hash(10,100,0,cont$0))),
               sname=symbol(addr[3],_j1_),
               name=[0,addr[1],varstags$0,sname],
               aparams=[0,ret_param,expr_list_of_var_list(vars)],
               cont=
                fold
                 (cont$0,
                  function(klhs){return [1,klhs,[0,[0,retparam]],cont$0]},
                  klhs);
              return [0,
                      [0,[0,name,[0,fparams,0,cont],payable],meths],
                      [1,_jR_,rhs,[0,[1,0,name,0,aparams]]]]};
          if(typeof _jR_ === "number")
           {if(typeof cont$0 === "number" && 1 === cont$0)
             return [0,meths,[0,rhs]]}
          else
           if(1 === _jR_[0] && typeof cont$0 !== "number" && 0 === cont$0[0])
            {var _jT_=cont$0[1],_jU_=_jR_[1];
             if(0 === _jT_[0])
              {var _jV_=_jT_[1];
               if(typeof _jV_ !== "number" && 0 === _jV_[0])
                {var v=_jV_[1],match$1=eq_tag(_jU_[1],v[1]);
                 if(match$1 && caml_string_equal(_jU_[2],v[2]))
                  return [0,meths,[0,rhs]];
                 return make_cont(0)}}}
          if(0 === rhs[0])
           {var
             match$0=norm_stm(addr,params,locals,payable,cont$0),
             stm1=match$0[2],
             meths1=match$0[1];
            return [0,meths1,[1,_jR_,rhs,stm1]]}
          return make_cont(0);
         case 2:
          var
           cont$1=stm[4],
           stm2=stm[3],
           stm1$0=stm[2],
           g=stm[1],
           match$3=
            norm_stm(addr,params,locals,payable,stm_concat(stm1$0,cont$1)),
           stm1$1=match$3[2],
           meths1$0=match$3[1],
           match$4=
            norm_stm(addr,params,locals,payable,stm_concat(stm2,cont$1)),
           stm2$0=match$4[2],
           meths2=match$4[1],
           _jY_=retype_stm(stm2$0),
           _jZ_=[2,g,retype_stm(stm1$1),_jY_,2];
          return [0,op(meths1$0,meths2),_jZ_]
         }
      return [0,0,stm]}
    function norm_block(addr,payable,param)
     {var
       stm=param[3],
       locals=param[2],
       params=param[1],
       match=norm_stm(addr,params,locals,payable,stm),
       stm$0=match[2],
       meths=match[1];
      return [0,meths,[0,params,locals,stm$0]]}
    function norm_methods(param)
     {if(param)
       {var
         tl=param[2],
         match=param[1],
         payable=match[3],
         block=match[2],
         name=match[1],
         match$0=norm_block(name,payable,block),
         block$0=match$0[2],
         meths=match$0[1];
        return op(meths,op([0,[0,name,block$0,payable],0],norm_methods(tl)))}
      return 0}
    function norm_a_contract(param)
     {var
       fields=param[4],
       fallback=param[3],
       meths=param[2],
       addr=param[1],
       meths1=norm_methods(meths);
      if(fallback)
       var
        fb=fallback[1],
        match=norm_block(_ir_,1,fb),
        fb$0=match[2],
        meths2=match[1],
        meths2$0=meths2,
        fallback$0=[0,fb$0];
      else
       var meths2$0=0,fallback$0=0;
      return [0,addr,op(meths1,meths2$0),fallback$0,fields]}
    function normalize(_jQ_){return map(norm_a_contract,_jQ_)}
    var Cycle=[248,_is_,caml_fresh_oo_id(0)];
    function get_bound(f,m$0,is_tail$2,param$1)
     {var
       stack=param$1[2],
       tbl=param$1[1],
       is_tail=is_tail$2,
       acc=0,
       param$0=stack;
      for(;;)
       {if(param$0)
         {var tl=param$0[2],x=param$0[1],is_tail$0=x[2],m=x[1];
          if(! caml_equal(m$0,m))
           {var
             acc$0=[0,x,acc],
             is_tail$1=is_tail?is_tail$0:is_tail,
             is_tail=is_tail$1,
             acc=acc$0,
             param$0=tl;
            continue}
          var
           match$0=
            [0,-467719034,[0,is_tail,op([0,x,acc],[0,[0,m$0,is_tail],0])]]}
        else
         var match$0=419380353;
        if(typeof match$0 === "number")
         {var param=tbl;
          for(;;)
           {if(param)
             {var l=param[2],match=param[1],b=match[2],a=match[1];
              if(0 !== caml_compare(a,m$0)){var param=l;continue}
              var match$1=[0,b]}
            else
             var match$1=0;
            if(match$1){var b$0=match$1[1];return [0,tbl,b$0]}
            var
             match$2=caml_call2(f,m$0,[0,tbl,[0,[0,m$0,is_tail$2],stack]]),
             b$1=match$2[2],
             tbl$0=match$2[1];
            return [0,[0,[0,m$0,b$1],tbl$0],b$1]}}
        var _jP_=match$0[2];
        if(0 === _jP_[1]){var cycle=_jP_[2];throw [0,Cycle,cycle]}
        return [0,tbl,0]}}
    function get_bounds_rhs(f,cfg,is_tail,this$0,rhs,param)
     {var stack=param[2],tbl=param[1];
      if(0 === rhs[0])return [0,tbl,0];
      var
       value=rhs[3],
       meth=rhs[2],
       aexpr=rhs[1],
       payable=0 !== value?1:0,
       methods=
        flatten
         (map
           (function(param)
             {var fb=param[3],ms=param[2],a$0=param[1],switch$0=0;
              if(typeof aexpr === "number")
               if(0 === aexpr)
                var _jH_=caml_string_equal(a$0,this$0);
               else
                switch$0 = 1;
              else
               if(13 === aexpr[0])
                var a=aexpr[1],_jH_=caml_string_equal(a$0,a);
               else
                switch$0 = 1;
              if(switch$0)var _jH_=1;
              if(_jH_)
               {var
                 _jI_=
                  caml_call1
                   (find_all
                     (function(param)
                       {var
                         m=param[1],
                         _jN_=caml_string_equal(meth[3],m[3]),
                         _jO_=_jN_?0 !== eq_tag_list(meth[2],m[2])?1:0:_jN_;
                        return _jO_}),
                    ms);
                if(_jI_)
                 {if(_jI_[2])throw [0,Assert_failure,_d8_];
                  var m=_jI_[1],matched=[0,[0,a$0,m],0]}
                else
                 if(fb)
                  var
                   fb$0=fb[1],
                   matched=[0,[0,a$0,any_method_decl_of_fallback(fb$0)],0];
                 else
                  var matched=0;
                return caml_call1
                        (find_all
                          (function(param)
                            {var
                              match=param[2],
                              payable$0=match[3],
                              m=match[1],
                              _jJ_=1 - payable,
                              _jK_=_jJ_ || payable$0;
                             if(_jK_)
                              var
                               _jL_=0 !== eq_tag(meth[1],0)?1:0,
                               _jM_=_jL_ || (0 !== eq_tag(meth[1],m[1])?1:0);
                             else
                              var _jM_=_jK_;
                             return _jM_}),
                         matched)}
              return 0},
            cfg)),
       _jG_=[0,tbl,0];
      return fold_left
              (function(param,mdecl)
                {var
                  b=param[2],
                  tbl=param[1],
                  match=get_bound(f,mdecl,is_tail,[0,tbl,stack]),
                  b1=match[2],
                  tbl$0=match[1];
                 return [0,tbl$0,max(b,b1)]},
               _jG_,
               methods)}
    function get_bounds_stm(f,cfg,addr,stm,tbls)
     {var stm$0=stm;
      for(;;)
       {var stack=tbls[2],tbl=tbls[1];
        if(typeof stm$0 === "number")
         {if(0 !== stm$0)return [0,tbl,0]}
        else
         switch(stm$0[0])
          {case 0:
            var rhs=stm$0[1];return get_bounds_rhs(f,cfg,1,addr,rhs,tbls);
           case 1:
            var _jB_=stm$0[1];
            if(0 === stm$0[2][0]){var stm$1=stm$0[3],stm$0=stm$1;continue}
            if(typeof _jB_ === "number")
             {var _jC_=stm$0[2][2];
              if(0 === _jC_[1])
               {var _jD_=_jC_[2];
                if
                 (_jD_
                  &&
                  1
                  ===
                  _jD_[1]
                  &&
                  !
                  _jD_[2]
                  &&
                  !
                  caml_string_notequal(_jC_[3],_iu_))
                 {var stm$2=stm$0[3],stm$0=stm$2;continue}}}
            var _jE_=stm$0[3];
            if(typeof _jE_ !== "number" && 0 === _jE_[0])
             {var
               rhs2=_jE_[1],
               rhs1=stm$0[2],
               match=get_bounds_rhs(f,cfg,0,addr,rhs1,tbls),
               b1=match[2],
               tbl$0=match[1],
               match$0=get_bounds_rhs(f,cfg,1,addr,rhs2,[0,tbl$0,stack]),
               b2=match$0[2],
               tbl$1=match$0[1];
              return [0,tbl$1,max(1 + b1 | 0,b2)]}
            break;
           default:
            var _jF_=stm$0[4];
            if(typeof _jF_ === "number" && 2 <= _jF_)
             {var
               stm2=stm$0[3],
               stm1=stm$0[2],
               match$1=get_bounds_stm(f,cfg,addr,stm1,tbls),
               b1$0=match$1[2],
               tbl$2=match$1[1],
               match$2=get_bounds_stm(f,cfg,addr,stm2,[0,tbl$2,stack]),
               b2$0=match$2[2],
               tbl$3=match$2[1];
              return [0,tbl$3,max(b1$0,b2$0)]}}
        throw [0,Assert_failure,_it_]}}
    function get_bounds(cfg)
     {try
       {var
         _jy_=0,
         _jz_=
          [0,
           fold_left
            (function(tbl,param)
              {var fallback=param[3],methods=param[2],addr=param[1];
               if(fallback)
                var
                 fb=fallback[1],
                 _jA_=[0,any_method_decl_of_fallback(fb),methods];
               else
                var _jA_=methods;
               return fold_left
                       (function(tbl,m)
                         {function f(param,tbl)
                           {var match=param[2],b=match[2],addr=param[1],stm=b[3];
                            return get_bounds_stm(f,cfg,addr,stm,tbl)}
                          return get_bound(f,[0,addr,m],1,[0,tbl,0])[1]},
                        tbl,
                        _jA_)},
             _jy_,
             cfg)];
        return _jz_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Cycle){var l=exn[2];return [1,l]}
        throw exn}}
    function maxargs_block(param)
     {var params=param[1];return var_list_length(params)}
    var _iL_=0;
    function _iM_(m,param){var b=param[2];return max(m,maxargs_block(b))}
    var _iN_=0;
    function _iO_(m,param)
     {var
       fallback=param[3],
       methods=param[2],
       _jx_=fold(0,maxargs_block,fallback);
      return max(m,max(fold_left(_iM_,_iL_,methods),_jx_))}
    function with_maxargs_and_stack_bound(f,cfg)
     {var match$0=get_bounds(cfg);
      if(0 === match$0[0])
       {var
         l$0=match$0[1],
         _jt_=0,
         max_stack=
          fold_left
           (function(m,param){var n=param[2];return max(m,n)},_jt_,l$0);
        return caml_call3(f,l$0,fold_left(_iO_,_iN_,cfg),max_stack)}
      var l$1=match$0[1];
      if(l$1)
       {var
         l=l$1[2],
         _jq_=l$1[1][1],
         match=_jq_[2],
         m=match[1],
         a=_jq_[1],
         _jr_=symbol(_ix_,symbol(a,symbol(_iw_,symbol(pp_meth(0,m),_iv_)))),
         _js_=rev(l);
        return symbol
                (_iF_,
                 symbol
                  (fold_left
                    (function(acc,param)
                      {var
                        is_tail=param[2],
                        _ju_=param[1],
                        match=_ju_[2],
                        m=match[1],
                        a=_ju_[1],
                        _jv_=is_tail?_iA_:_iE_,
                        _jw_=symbol(_iB_,symbol(_jv_,_iz_));
                       return symbol
                               (acc,
                                symbol
                                 (_iD_,symbol(a,symbol(_iC_,symbol(pp_meth(0,m),_jw_)))))},
                     _iy_,
                     _js_),
                   _jr_))}
      throw [0,Assert_failure,_iG_]}
    var document=window$0.document;
    set_error
     (function(msg)
       {var errors=document.getElementById("errors");
        if(errors == no_handler)throw [0,Assert_failure,_iP_];
        appendChild
         (errors,document.createTextNode(caml_jsstring_of_string(msg)));
        return appendChild(errors,document.createElement("br"))});
    function transform(f,param)
     {var
       doc_in=window.doc_in,
       x=doc_in.getValue(),
       input=caml_string_of_jsstring(x),
       output=caml_call1(f,input),
       y=caml_jsstring_of_string(output),
       doc_out=window.doc_out;
      doc_out.setValue(y);
      return 0}
    function _iQ_(_jp_){return test_string(pp_configuration,_jp_)}
    function parse(_jo_){return transform(_iQ_,_jo_)}
    function _iR_(c){return pp_configuration(normalize(c))}
    function _iS_(_jn_){return test_string(_iR_,_jn_)}
    function normalize$0(_jm_){return transform(_iS_,_jm_)}
    function _iT_(c)
     {var c$0=normalize(c);
      return with_maxargs_and_stack_bound
              (function(bounds,m,n)
                {var
                  _jj_=
                   symbol
                    (_iX_,
                     symbol
                      (_iW_,
                       symbol
                        (caml_string_of_jsbytes("" + m),
                         symbol(_iV_,symbol(_iU_,caml_string_of_jsbytes("" + n))))));
                 return symbol
                         (fold_left
                           (function(acc,param)
                             {var
                               b=param[2],
                               _jk_=param[1],
                               match=_jk_[2],
                               m=match[1],
                               a=_jk_[1],
                               _jl_=symbol(_iI_,caml_string_of_jsbytes("" + b));
                              return symbol
                                      (acc,
                                       symbol
                                        (_iK_,symbol(a,symbol(_iJ_,symbol(pp_meth(0,m),_jl_)))))},
                            _iH_,
                            bounds),
                          _jj_)},
               c$0)}
    function _iY_(_ji_){return test_string(_iT_,_ji_)}
    function get_bounds$0(_jh_){return transform(_iY_,_jh_)}
    function _iZ_(c)
     {var c$0=normalize(c);
      return with_maxargs_and_stack_bound
              (function(param,max_args,max_stack)
                {return concat
                         (_hK_,map(pp_function,type_of(max_args,max_stack,c$0)[1]))},
               c$0)}
    function _i0_(_jg_){return test_string(_iZ_,_jg_)}
    function type_of$0(_jf_){return transform(_i0_,_jf_)}
    function cost(b)
     {var _i$_=0;
      function _ja_(c)
       {var c$0=normalize(c);
        return with_maxargs_and_stack_bound
                (function(param$0,max_args,max_stack)
                  {var
                    param$1=type_of(max_args,max_stack,c$0),
                    gain=b | 0,
                    non_negatives=param$1[3],
                    fieldsno=param$1[2],
                    l=param$1[1],
                    _je_=
                     flatten
                      (map
                        (function(param)
                          {var typ=param[3],vars=param[2],name=param[1];
                           return compute_typ(gain,[0,name,vars],typ)},
                         l)),
                    param=hd(l),
                    vars=param[2],
                    name=param[1],
                    match=caml_call1(split_nth(fieldsno),vars),
                    params=match[2],
                    match$0=caml_call1(split_nth(fieldsno),params),
                    gamma=match$0[1],
                    args=op(gamma,params),
                    _jc_=map(function(v){return [0,[0,v],0,_ik_]},non_negatives),
                    _jd_=0,
                    l$0=
                     [0,
                      [0,
                       [0,_im_,params],
                       0,
                       _il_,
                       [0,[0,name,map(function(x){return [0,x]},args)],_jd_],
                       _jc_],
                      _je_];
                   return concat(_cv_,map(pp_eqn,l$0))},
                 c$0)}
      return transform(function(_jb_){return test_string(_ja_,_jb_)},_i$_)}
    function copy_output_to_input(param)
     {var doc_in=window.doc_out,x=doc_in.getValue(),doc_out=window.doc_in;
      doc_out.setValue(x);
      return 0}
    export$0(_i1_,caml_js_wrap_callback(parse));
    export$0(_i2_,caml_js_wrap_callback(normalize$0));
    export$0(_i3_,caml_js_wrap_callback(get_bounds$0));
    export$0(_i4_,caml_js_wrap_callback(type_of$0));
    export$0(_i5_,caml_js_wrap_callback(cost));
    export$0(_i6_,caml_js_wrap_callback(copy_output_to_input));
    do_at_exit(0);
    return}
  (function(){return this}()));

//# sourceMappingURL=analyzer.map
