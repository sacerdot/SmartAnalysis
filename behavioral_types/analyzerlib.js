// Generated by js_of_ocaml 3.5.2
(function(joo_global_object)
   {"use strict";
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(s1,i1,s2,i2,len)
     {return caml_blit_bytes(s1,i1,s2,i2,len)}
    function caml_bytes_of_string(s){return s}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString = function(){return caml_to_js_string(this)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_new_string(s){return new MlBytes(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi){return [255,lo,mi,hi]}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 0xff,
              x[2] >> 16,
              x[2] >> 8 & 0xff,
              x[2] & 0xff,
              x[1] >> 16,
              x[1] >> 8 & 0xff,
              x[1] & 0xff]}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return [255,
              a[7] | a[6] << 8 | a[5] << 16,
              a[4] | a[3] << 8 | a[2] << 16,
              a[1] | a[0] << 8]}
    function caml_int64_float_of_bits(x)
     {var lo=x[1],mi=x[2],hi=x[3],exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return [255,
              lo & 0xffffff,
              lo >>> 24 & 0xff | (hi & 0xffff) << 8,
              hi >>> 16 & 0xffff]}
    function caml_int64_hi32(v){return v[2] >>> 8 & 0xffff | v[3] << 16}
    function caml_int64_lo32(v){return v[1] | (v[2] & 0xff) << 24}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    if(! Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 0xffff) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_hash(x)
     {var lo=x[1] | (x[2] & 0xff) << 24,hi=x[2] >>> 8 & 0xffff | x[3] << 16;
      return lo ^ hi}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(a instanceof MlBytes)
        return 252;
       else
        if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
         {var tag=a[0] | 0;return tag == 254?0:tag}
        else
         if(a instanceof String)
          return 1252;
         else
          if(typeof a == "string")
           return 1252;
          else
           if(a instanceof Number)
            return 1000;
           else
            if(a && a.caml_custom)
             return 1255;
            else
             if(a && a.compare)
              return 1256;
             else
              if(typeof a == "function")
               return 1247;
              else
               if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b)
              {var x=caml_string_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             var x=caml_int64_compare(a,b);if(x != 0)return x | 0;break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlBytes?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlBytes?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res !== 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlBytes)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hash_mix_string_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string_str(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_string_str(h,v.c);break;
        case 2:h = caml_hash_mix_string_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            case 255:h = caml_hash_mix_int64(h,v);num--;break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(v instanceof MlBytes)
           {h = caml_hash_mix_string(h,v);num--}
          else
           if(v === (v | 0))
            {h = caml_hash_mix_int(h,v + v + 1);num--}
           else
            if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           case 255:
            count--;
            hash_accu = hash_accu * 65599 + obj[1] + (obj[2] << 24) | 0;
            break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(obj instanceof MlBytes)
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(obj === (obj | 0))
           {count--;hash_accu = hash_accu * 65599 + obj | 0}
          else
           if(obj === + obj)
            {count--;
             var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
             for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
           else
            if(obj && obj.caml_custom)
             if
              (caml_custom_ops[obj.caml_custom]
               &&
               caml_custom_ops[obj.caml_custom].hash)
              {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
               hash_accu = hash_accu * 65599 + h | 0}}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 0xffffff,z2 & 0xffffff,z3 & 0xffff]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 0xffffff;
      x[1] = x[1] << 1 & 0xffffff}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 0xffffff;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 0xffffff;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=- x[1],y2=- x[2] + (y1 >> 24),y3=- x[3] + (y2 >> 24);
      return [255,y1 & 0xffffff,y2 & 0xffffff,y3 & 0xffff]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_ml_string_length(s){return s.l}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:sign = 0;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       (),
     caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_bytes_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,string,0,len)}
      var
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes(chanid,buffer,offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(x instanceof MlBytes)
        return 252;
       else
        if(x instanceof Function || typeof x == "function")
         return 247;
        else
         if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_string_of_bytes(s){return s}
    function caml_sys_const_backend_type()
     {return [0,caml_new_string("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    var
     caml_argv=
      function()
        {var g=joo_global_object,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;
           main = argv[1];
           args = raw_array_sub(argv,2,argv.length - 2)}
         var p=caml_js_to_string(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_js_to_string(args[i]));
         return args2}
       ();
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_js_to_string(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     top=[0,0,0],
     bot=[0,[0,[0,[1,0],2,[1,1]],0],0],
     fallback=[0,0,0,caml_new_string("(fallback)")],
     acc=[0,[0,[0,1],0],0],
     public_methods=[0,caml_new_string("f")],
     msg_sender=caml_new_string("_msg_sender_"),
     msg_value=caml_new_string("_msg_value_"),
     balance=caml_new_string("_balance_"),
     saved=caml_new_string("_saved"),
     stack=caml_new_string("_stack_"),
     dummy=[0,0],
     ret=caml_new_string("ret"),
     runtime=caml_new_string("runtime"),
     dispatch=[0,1,[0,1,0],caml_new_string("dispatch")],
     int_of_unit=[0,0];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _e_=caml_new_string("input"),
     _d_=caml_new_string("%.12g"),
     _c_=caml_new_string("."),
     _a_=caml_new_string("true"),
     _b_=caml_new_string("false"),
     _g_=caml_new_string("\\\\"),
     _h_=caml_new_string("\\'"),
     _i_=caml_new_string("\\b"),
     _j_=caml_new_string("\\t"),
     _k_=caml_new_string("\\n"),
     _l_=caml_new_string("\\r"),
     _f_=caml_new_string("Char.chr"),
     _m_=caml_new_string("hd"),
     _p_=caml_new_string("String.blit / Bytes.blit_string"),
     _o_=caml_new_string("Bytes.blit"),
     _n_=caml_new_string("String.sub / Bytes.sub"),
     _s_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _r_=caml_new_string(""),
     _q_=caml_new_string("String.concat"),
     _t_=caml_new_string("Array.blit"),
     _y_=caml_new_string("Map.remove_min_elt"),
     _z_=[0,0,0,0],
     _A_=[0,caml_new_string("map.ml"),398,10],
     _B_=[0,0,0],
     _u_=caml_new_string("Map.bal"),
     _v_=caml_new_string("Map.bal"),
     _w_=caml_new_string("Map.bal"),
     _x_=caml_new_string("Map.bal"),
     _D_=caml_new_string("CamlinternalLazy.Undefined"),
     _G_=[0,caml_new_string("stream.ml"),53,12],
     _H_=[0,0],
     _I_=[0,caml_new_string("stream.ml"),82,12],
     _E_=caml_new_string("Stdlib.Stream.Failure"),
     _F_=caml_new_string("Stdlib.Stream.Error"),
     _J_=caml_new_string("Buffer.add: cannot grow buffer"),
     _S_=caml_new_string("%c"),
     _T_=caml_new_string("%s"),
     _U_=caml_new_string("%i"),
     _V_=caml_new_string("%li"),
     _W_=caml_new_string("%ni"),
     _X_=caml_new_string("%Li"),
     _Y_=caml_new_string("%f"),
     _Z_=caml_new_string("%B"),
     ___=caml_new_string("%{"),
     _$_=caml_new_string("%}"),
     _aa_=caml_new_string("%("),
     _ab_=caml_new_string("%)"),
     _ac_=caml_new_string("%a"),
     _ad_=caml_new_string("%t"),
     _ae_=caml_new_string("%?"),
     _af_=caml_new_string("%r"),
     _ag_=caml_new_string("%_r"),
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _as_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),812,21],
     _at_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),816,21],
     _au_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),820,19],
     _av_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),824,22],
     _aw_=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),829,30],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),834,26],
     _ar_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),844,28],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),848,23],
     _bt_=caml_new_string("%u"),
     _br_=[0,caml_new_string("camlinternalFormat.ml"),1556,4],
     _bs_=caml_new_string("Printf: bad conversion %["),
     _bu_=[0,caml_new_string("camlinternalFormat.ml"),1624,39],
     _bv_=[0,caml_new_string("camlinternalFormat.ml"),1647,31],
     _bw_=[0,caml_new_string("camlinternalFormat.ml"),1648,31],
     _bx_=caml_new_string("Printf: bad conversion %_"),
     _by_=caml_new_string("@{"),
     _bz_=caml_new_string("@["),
     _bp_=caml_new_string("nan"),
     _bq_=caml_new_string("."),
     _bn_=caml_new_string("neg_infinity"),
     _bo_=caml_new_string("infinity"),
     _bm_=caml_new_string("%.12g"),
     _ba_=caml_new_string("%+nd"),
     _bb_=caml_new_string("% nd"),
     _bd_=caml_new_string("%+ni"),
     _be_=caml_new_string("% ni"),
     _bf_=caml_new_string("%nx"),
     _bg_=caml_new_string("%#nx"),
     _bh_=caml_new_string("%nX"),
     _bi_=caml_new_string("%#nX"),
     _bj_=caml_new_string("%no"),
     _bk_=caml_new_string("%#no"),
     _a$_=caml_new_string("%nd"),
     _bc_=caml_new_string("%ni"),
     _bl_=caml_new_string("%nu"),
     _aZ_=caml_new_string("%+ld"),
     _a0_=caml_new_string("% ld"),
     _a2_=caml_new_string("%+li"),
     _a3_=caml_new_string("% li"),
     _a4_=caml_new_string("%lx"),
     _a5_=caml_new_string("%#lx"),
     _a6_=caml_new_string("%lX"),
     _a7_=caml_new_string("%#lX"),
     _a8_=caml_new_string("%lo"),
     _a9_=caml_new_string("%#lo"),
     _aY_=caml_new_string("%ld"),
     _a1_=caml_new_string("%li"),
     _a__=caml_new_string("%lu"),
     _aM_=caml_new_string("%+Ld"),
     _aN_=caml_new_string("% Ld"),
     _aP_=caml_new_string("%+Li"),
     _aQ_=caml_new_string("% Li"),
     _aR_=caml_new_string("%Lx"),
     _aS_=caml_new_string("%#Lx"),
     _aT_=caml_new_string("%LX"),
     _aU_=caml_new_string("%#LX"),
     _aV_=caml_new_string("%Lo"),
     _aW_=caml_new_string("%#Lo"),
     _aL_=caml_new_string("%Ld"),
     _aO_=caml_new_string("%Li"),
     _aX_=caml_new_string("%Lu"),
     _az_=caml_new_string("%+d"),
     _aA_=caml_new_string("% d"),
     _aC_=caml_new_string("%+i"),
     _aD_=caml_new_string("% i"),
     _aE_=caml_new_string("%x"),
     _aF_=caml_new_string("%#x"),
     _aG_=caml_new_string("%X"),
     _aH_=caml_new_string("%#X"),
     _aI_=caml_new_string("%o"),
     _aJ_=caml_new_string("%#o"),
     _ay_=caml_new_string("%d"),
     _aB_=caml_new_string("%i"),
     _aK_=caml_new_string("%u"),
     _K_=caml_new_string("@]"),
     _L_=caml_new_string("@}"),
     _M_=caml_new_string("@?"),
     _N_=caml_new_string("@\n"),
     _O_=caml_new_string("@."),
     _P_=caml_new_string("@@"),
     _Q_=caml_new_string("@%"),
     _R_=caml_new_string("@"),
     _ax_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bD_=caml_new_string(""),
     _bE_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _bJ_=caml_new_string("Out of memory"),
     _bK_=caml_new_string("Stack overflow"),
     _bL_=caml_new_string("Pattern matching failed"),
     _bM_=caml_new_string("Assertion failed"),
     _bN_=caml_new_string("Undefined recursive module"),
     _bF_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bG_=caml_new_string(""),
     _bH_=caml_new_string(""),
     _bI_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bC_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bA_=[0,[3,0,0],caml_new_string("%S")],
     _bB_=caml_new_string("_"),
     _bO_=caml_new_string("x"),
     _iX_=caml_new_string("OCAMLRUNPARAM"),
     _iV_=caml_new_string("CAMLRUNPARAM"),
     _bP_=caml_new_string(""),
     _bR_=caml_new_string(""),
     _bT_=caml_new_string(""),
     _bU_=caml_new_string(""),
     _bV_=caml_new_string(""),
     _bW_=caml_new_string(""),
     _bY_=caml_new_string(""),
     _bX_=caml_new_string(""),
     _bS_=caml_new_string("Illegal character "),
     _bZ_=caml_new_string("Js_of_ocaml__Js.Error"),
     _b0_=caml_new_string("jsError"),
     _b$_=caml_new_string(" + "),
     _ca_=caml_new_string(" - "),
     _cb_=caml_new_string(" * "),
     _cc_=caml_new_string(" / "),
     _cd_=caml_new_string("-"),
     _ct_=caml_new_string("\n"),
     _cq_=caml_new_string("nat"),
     _cj_=caml_new_string("])."),
     _ck_=caml_new_string(","),
     _cl_=caml_new_string("["),
     _cm_=caml_new_string("],"),
     _cn_=caml_new_string(","),
     _co_=caml_new_string("["),
     _cp_=caml_new_string(","),
     _cr_=caml_new_string(","),
     _cs_=caml_new_string("eq("),
     _ch_=caml_new_string(" "),
     _ci_=caml_new_string(" "),
     _ce_=caml_new_string(")"),
     _cf_=caml_new_string(","),
     _cg_=caml_new_string("("),
     _b9_=caml_new_string(")"),
     _b__=caml_new_string("("),
     _b4_=caml_new_string(">="),
     _b5_=caml_new_string("=<"),
     _b6_=caml_new_string("="),
     _b7_=caml_new_string("<"),
     _b8_=caml_new_string(">"),
     _b1_=caml_new_string(")"),
     _b2_=caml_new_string(","),
     _b3_=caml_new_string("("),
     _cu_=caml_new_string(")"),
     _cv_=caml_new_string(" + "),
     _cw_=caml_new_string("("),
     _cx_=caml_new_string(")"),
     _cy_=caml_new_string(" - "),
     _cz_=caml_new_string("("),
     _cA_=caml_new_string(")"),
     _cB_=caml_new_string(" * "),
     _cC_=caml_new_string("("),
     _cD_=caml_new_string(")"),
     _cE_=caml_new_string(" / "),
     _cF_=caml_new_string("("),
     _cG_=caml_new_string("-"),
     _cH_=caml_new_string(")"),
     _cI_=caml_new_string(" >= "),
     _cJ_=caml_new_string("("),
     _cK_=caml_new_string(")"),
     _cL_=caml_new_string(" > "),
     _cM_=caml_new_string("("),
     _cN_=caml_new_string(")"),
     _cO_=caml_new_string(" = "),
     _cP_=caml_new_string("("),
     _cQ_=caml_new_string(")"),
     _cR_=caml_new_string(" && "),
     _cS_=caml_new_string("("),
     _cT_=caml_new_string(")"),
     _cU_=caml_new_string(" || "),
     _cV_=caml_new_string("("),
     _cW_=caml_new_string("!"),
     _c1_=caml_new_string("]\n"),
     _c2_=caml_new_string("+ ["),
     _c3_=caml_new_string("\n"),
     _cX_=caml_new_string(","),
     _cY_=caml_new_string(")"),
     _cZ_=caml_new_string(","),
     _c0_=caml_new_string("("),
     _c4_=caml_new_string(""),
     _c5_=caml_new_string("]\n"),
     _c6_=caml_new_string("  ["),
     _c7_=[0,caml_new_string("types.ml"),53,18],
     _c$_=caml_new_string("\n\n"),
     _c8_=caml_new_string(") =\n"),
     _c9_=caml_new_string(","),
     _c__=caml_new_string("("),
     _dg_=[1,0],
     _dh_=[1,0],
     _db_=[0,3,0],
     _dc_=[0,4,0],
     _dd_=[0,3,[0,4,0]],
     _de_=[0,0,0],
     _df_=[0,1,0],
     _da_=caml_new_string("CostEquationsGeneration.NotLinear"),
     _di_=[0,caml_new_string("utils.ml"),12,10],
     _dn_=[0,0],
     _do_=[0,0],
     _dx_=caml_new_string("this"),
     _dy_=caml_new_string("msg.sender"),
     _dz_=caml_new_string("msg.value"),
     _dA_=caml_new_string(")"),
     _dB_=caml_new_string(" + "),
     _dC_=caml_new_string("("),
     _dD_=caml_new_string(")"),
     _dE_=caml_new_string(" - "),
     _dF_=caml_new_string("("),
     _dG_=caml_new_string(")"),
     _dH_=caml_new_string(" * "),
     _dI_=caml_new_string("("),
     _dJ_=caml_new_string(")"),
     _dK_=caml_new_string(" / "),
     _dL_=caml_new_string("("),
     _dM_=caml_new_string("-"),
     _dN_=caml_new_string(")"),
     _dO_=caml_new_string(" >= "),
     _dP_=caml_new_string("("),
     _dQ_=caml_new_string(")"),
     _dR_=caml_new_string(" > "),
     _dS_=caml_new_string("("),
     _dT_=caml_new_string(")"),
     _dU_=caml_new_string(" == "),
     _dV_=caml_new_string("("),
     _dW_=caml_new_string(")"),
     _dX_=caml_new_string(" && "),
     _dY_=caml_new_string("("),
     _dZ_=caml_new_string(")"),
     _d0_=caml_new_string(" || "),
     _d1_=caml_new_string("("),
     _d2_=caml_new_string("!"),
     _d3_=caml_new_string(".balance"),
     _eg_=caml_new_string(""),
     _ew_=caml_new_string("\n"),
     _ex_=caml_new_string(""),
     _eh_=caml_new_string(""),
     _ej_=caml_new_string("return;"),
     _ek_=caml_new_string("revert();"),
     _el_=caml_new_string(";"),
     _em_=caml_new_string("return "),
     _en_=[0,0],
     _eo_=caml_new_string(""),
     _eq_=caml_new_string("\n"),
     _ep_=caml_new_string(";"),
     _er_=[0,0],
     _es_=caml_new_string("}\n"),
     _et_=caml_new_string("} else {\n"),
     _eu_=caml_new_string(" {\n"),
     _ev_=caml_new_string("if "),
     _ei_=caml_new_string(""),
     _eU_=[0,caml_new_string("microSolidity.ml"),307,17],
     _eT_=caml_new_string("\n"),
     _eP_=caml_new_string("}\n"),
     _eQ_=caml_new_string("\n"),
     _eR_=caml_new_string(" {\n"),
     _eS_=caml_new_string("contract "),
     _eN_=caml_new_string("fallback "),
     _eO_=caml_new_string(""),
     _eM_=caml_new_string("\n"),
     _eK_=caml_new_string(" "),
     _eL_=caml_new_string("function "),
     _ez_=caml_new_string(";\n"),
     _ey_=caml_new_string("}\n\n"),
     _eA_=caml_new_string(""),
     _eB_=caml_new_string("{\n"),
     _eC_=caml_new_string("payable "),
     _eJ_=caml_new_string(" "),
     _eH_=caml_new_string(") "),
     _eI_=caml_new_string("returns ("),
     _eD_=caml_new_string(""),
     _eE_=caml_new_string(") "),
     _eF_=caml_new_string(","),
     _eG_=caml_new_string("("),
     _d$_=caml_new_string(")"),
     _ea_=caml_new_string(","),
     _eb_=caml_new_string("("),
     _ec_=caml_new_string(")"),
     _ed_=caml_new_string(".value("),
     _ef_=caml_new_string(""),
     _ee_=caml_new_string("."),
     _d8_=caml_new_string(""),
     _d9_=caml_new_string(" = "),
     _d__=caml_new_string(" = "),
     _d4_=caml_new_string(")"),
     _d5_=caml_new_string(" -> "),
     _d6_=caml_new_string("*"),
     _d7_=caml_new_string(":("),
     _dv_=caml_new_string(";\n"),
     _dw_=caml_new_string(""),
     _du_=[0,caml_new_string("microSolidity.ml"),150,12],
     _dt_=caml_new_string(" "),
     _dp_=caml_new_string("?VOID?"),
     _dq_=caml_new_string("int"),
     _dr_=caml_new_string("bool"),
     _ds_=caml_new_string("address"),
     _dj_=[0,0],
     _dk_=[0,0],
     _dl_=[0,0],
     _dm_=[0,0],
     _e0_=[0,[0,caml_new_string("-")],0],
     _fc_=[0,caml_new_string("parserCombinators.ml"),100,10],
     _fd_=caml_new_string("kleenestar"),
     _fb_=caml_new_string("ok"),
     _e$_=caml_new_string("ok"),
     _fa_=caml_new_string(" expected"),
     _e9_=caml_new_string("eof expected"),
     _e__=caml_new_string("ok"),
     _e7_=caml_new_string("\n"),
     _e8_=caml_new_string(""),
     _e1_=caml_new_string("Kwd "),
     _e2_=caml_new_string("Ident "),
     _e3_=caml_new_string("int "),
     _e4_=caml_new_string("float "),
     _e5_=caml_new_string("string "),
     _e6_=caml_new_string("char "),
     _eX_=caml_new_string("ok"),
     _eY_=caml_new_string("ok"),
     _eZ_=caml_new_string("\n| "),
     _eV_=caml_new_string("ParserCombinators.Fail"),
     _eW_=caml_new_string("ParserCombinators.Reject"),
     _f9_=caml_new_string("-"),
     _f__=[0,caml_new_string("-")],
     _f$_=[0,caml_new_string("+")],
     _ga_=[0,caml_new_string("/")],
     _gb_=[0,caml_new_string("*")],
     _gc_=caml_new_string("!"),
     _gd_=caml_new_string(")"),
     _ge_=caml_new_string("("),
     _gf_=[0,caml_new_string("<=")],
     _gg_=[0,caml_new_string("<")],
     _gh_=[0,caml_new_string(">=")],
     _gi_=[0,caml_new_string(">")],
     _gj_=[0,caml_new_string("!=")],
     _gk_=[0,caml_new_string("==")],
     _gl_=[0,caml_new_string("&&")],
     _gm_=[0,caml_new_string("||")],
     _gn_=caml_new_string("balance"),
     _go_=caml_new_string("."),
     _gp_=caml_new_string(")"),
     _gq_=caml_new_string("("),
     _gD_=[0,0,0],
     _g2_=caml_new_string("}"),
     _g3_=caml_new_string("{"),
     _g4_=caml_new_string("else"),
     _g5_=caml_new_string("if"),
     _g7_=caml_new_string(";"),
     _g8_=caml_new_string("ok"),
     _g6_=caml_new_string("="),
     _g9_=caml_new_string("Unknown field/var"),
     _g__=[0,0,0],
     _hN_=caml_new_string(" >>\n"),
     _hO_=caml_new_string("<< "),
     _hP_=caml_new_string("######## SYNTAX ERROR #######\n"),
     _hQ_=caml_new_string("######## UNHANDLED EXCEPTION #######\n"),
     _hH_=caml_new_string("{"),
     _hI_=caml_new_string("}"),
     _hJ_=[0,caml_new_string("} expected, but eof found"),0],
     _hK_=caml_new_string("contract"),
     _hM_=caml_new_string("{"),
     _hL_=caml_new_string("contract declaration expected"),
     _hB_=caml_new_string("}"),
     _hC_=caml_new_string("{"),
     _hD_=caml_new_string("contract"),
     _hn_=[0,caml_new_string("parser.ml"),589,17],
     _hj_=caml_new_string("returns"),
     _hk_=[0,0],
     _hl_=caml_new_string("function"),
     _hh_=caml_new_string("must be payable"),
     _hf_=caml_new_string("}"),
     _hg_=caml_new_string("{"),
     _hi_=caml_new_string("payable"),
     _hd_=[0,0],
     _he_=caml_new_string(";"),
     _ha_=[0,0],
     _hb_=caml_new_string(","),
     _hc_=[0,0],
     _gZ_=caml_new_string("return without value of type "),
     _g0_=caml_new_string(";"),
     _g1_=caml_new_string("return"),
     _gY_=caml_new_string("implicit return not allowed here"),
     _gX_=caml_new_string("ok"),
     _gW_=caml_new_string("ok"),
     _gS_=caml_new_string(";"),
     _gT_=caml_new_string(")"),
     _gU_=caml_new_string("("),
     _gV_=caml_new_string("revert"),
     _gQ_=caml_new_string("."),
     _gR_=[0,3,0],
     _gO_=caml_new_string("value"),
     _gP_=caml_new_string("."),
     _gN_=caml_new_string("ok"),
     _gM_=caml_new_string("ident expected"),
     _gw_=caml_new_string(";"),
     _f0_=[0,1,2],
     _fO_=caml_new_string(")"),
     _fP_=caml_new_string("("),
     _fL_=caml_new_string("value expected, eof found"),
     _fF_=caml_new_string("false"),
     _fG_=caml_new_string("true"),
     _fH_=[13,1],
     _fI_=[13,0],
     _fJ_=caml_new_string(" expected"),
     _fK_=caml_new_string("value of type "),
     _fD_=caml_new_string(" expected"),
     _fE_=caml_new_string("value of type "),
     _fB_=caml_new_string(" vs "),
     _fC_=caml_new_string(" not previously declared"),
     _fA_=caml_new_string("ident expected"),
     _fz_=caml_new_string("var expected, eof found"),
     _fy_=caml_new_string("ok"),
     _fx_=caml_new_string("expected ident"),
     _fw_=caml_new_string("!"),
     _fv_=caml_new_string(" || "),
     _fu_=caml_new_string(" && "),
     _ft_=caml_new_string(" == "),
     _fs_=caml_new_string(" >= "),
     _fr_=caml_new_string(" > "),
     _fq_=caml_new_string(" / "),
     _fp_=caml_new_string(" * "),
     _fo_=caml_new_string(" - "),
     _fn_=caml_new_string("-"),
     _fm_=caml_new_string(" + "),
     _fl_=caml_new_string(".balance"),
     _fj_=caml_new_string(" redeclared"),
     _fk_=caml_new_string("contract "),
     _fg_=caml_new_string("transfer"),
     _fh_=caml_new_string("The transfer identifier is reseved"),
     _fi_=caml_new_string(" redeclared"),
     _ff_=caml_new_string(" declared twice"),
     _fe_=caml_new_string(" should have type "),
     _fN_=[0,caml_new_string("this")],
     _fR_=caml_new_string("sender"),
     _fT_=caml_new_string("."),
     _fV_=caml_new_string("msg"),
     _f1_=caml_new_string("value"),
     _f3_=caml_new_string("."),
     _f5_=caml_new_string("msg"),
     _gr_=caml_new_string("address"),
     _gt_=caml_new_string("bool"),
     _gv_=caml_new_string("int"),
     _gF_=caml_new_string(","),
     _hq_=[0,1],
     _hs_=caml_new_string(")"),
     _hu_=caml_new_string("("),
     _hw_=caml_new_string("fallback"),
     _hG_=
      caml_list_of_js_array
       ([caml_new_string("+"),
         caml_new_string("-"),
         caml_new_string("*"),
         caml_new_string("/"),
         caml_new_string("("),
         caml_new_string(")"),
         caml_new_string(">"),
         caml_new_string(">="),
         caml_new_string("=="),
         caml_new_string("<"),
         caml_new_string("<="),
         caml_new_string("!="),
         caml_new_string("&&"),
         caml_new_string("||"),
         caml_new_string("!"),
         caml_new_string("true"),
         caml_new_string("false"),
         caml_new_string("int"),
         caml_new_string("bool"),
         caml_new_string("address"),
         caml_new_string("="),
         caml_new_string(","),
         caml_new_string(";"),
         caml_new_string("fail"),
         caml_new_string("if"),
         caml_new_string("else"),
         caml_new_string("revert"),
         caml_new_string("{"),
         caml_new_string("function"),
         caml_new_string("fallback"),
         caml_new_string("}"),
         caml_new_string("return"),
         caml_new_string("returns"),
         caml_new_string("this"),
         caml_new_string("."),
         caml_new_string("value"),
         caml_new_string("balance"),
         caml_new_string("msg"),
         caml_new_string("sender"),
         caml_new_string("contract"),
         caml_new_string("payable")]),
     _hR_=[0,0,[0,1,[13,0]]],
     _hS_=caml_new_string("_ret_"),
     _hT_=caml_new_string("_"),
     _hW_=[0,caml_new_string("static.ml"),142,9],
     _h__=caml_new_string(": "),
     _h$_=caml_new_string("."),
     _ia_=caml_new_string("\n"),
     _h9_=caml_new_string(""),
     _h1_=caml_new_string("by"),
     _h2_=caml_new_string("in tail position "),
     _h6_=caml_new_string(""),
     _h3_=caml_new_string(" possibly called "),
     _h4_=caml_new_string("."),
     _h5_=caml_new_string("\n"),
     _hX_=caml_new_string("\n"),
     _hY_=caml_new_string("."),
     _hZ_=caml_new_string("\n"),
     _h0_=caml_new_string(""),
     _h7_=
      caml_new_string("Unbounded usage of call stack possibly detected:\n"),
     _h8_=[0,caml_new_string("static.ml"),166,10],
     _hU_=[0,0,0,caml_new_string("fallback")],
     _hV_=caml_new_string("Static.Cycle"),
     _ij_=[0,caml_new_string("typeInference.ml"),59,10],
     _is_=[0,1],
     _iA_=[0,caml_new_string("typeInference.ml"),389,9],
     _iz_=[0,0],
     _iy_=[0,caml_new_string("typeInference.ml"),247,20],
     _ix_=[0,caml_new_string("typeInference.ml"),227,1],
     _iv_=caml_new_string(""),
     _iw_=caml_new_string("f"),
     _it_=[0,0],
     _in_=caml_new_string("Variable or field "),
     _io_=caml_new_string("holds the unrecognized address: "),
     _ip_=caml_new_string(","),
     _iq_=caml_new_string("Known addresses: "),
     _ir_=[0,caml_new_string("typeInference.ml"),120,3],
     _im_=[0,caml_new_string("typeInference.ml"),79,1],
     _il_=[0,caml_new_string("typeInference.ml"),83,9],
     _ik_=[0,caml_new_string("typeInference.ml"),70,15],
     _ii_=[0,1],
     _ih_=[0,0],
     _ig_=caml_new_string("_"),
     _if_=caml_new_string("_"),
     _iG_=caml_new_string("Maximum stack length: "),
     _iH_=caml_new_string("\n"),
     _iI_=caml_new_string("Maximum number of locals: "),
     _iJ_=caml_new_string("\n\n"),
     _iB_=[0,caml_new_string("analyzer.ml"),7,85],
     _iP_=caml_new_string("ms_parse"),
     _iQ_=caml_new_string("ms_normalize"),
     _iR_=caml_new_string("ms_get_bounds"),
     _iS_=caml_new_string("ms_type_of"),
     _iT_=caml_new_string("ms_cost"),
     _iU_=caml_new_string("ms_copy_output_to_input");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    var min_int=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    function string_of_float(f)
     {var s=caml_format_float(_d_,f),l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return symbol(s,_c_);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function op(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,op(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    var oc=caml_ml_open_descriptor_out(2);
    function prerr_endline(s)
     {caml_ml_output(oc,s,0,caml_ml_string_length(s));
      caml_ml_output_char(oc,10);
      return caml_ml_flush(oc)}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_yg_)
             {_yg_ = caml_wrap_exception(_yg_);
              if(_yg_[1] !== Sys_error)throw _yg_;
              var _yf_=_yg_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function fold(none,some,param)
     {if(param){var v=param[1];return caml_call1(some,v)}return none}
    function lowercase_ascii(c)
     {if(65 <= c)if(! (90 < c))return c + 32 | 0;return c}
    function f(c){if(97 <= c)if(! (122 < c))return c - 32 | 0;return c}
    caml_sys_get_argv(0);
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons(a,l){return [0,a,l]}
    function hd(param){if(param){var a=param[1];return a}return failwith(_m_)}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    typeof match === "number";
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return op(l,flatten(r))}return 0}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if((caml_ml_bytes_length(b) - len | 0) < ofs)
         var switch$0=0;
        else
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          var _ye_=r,switch$0=1}
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var _ye_=invalid_arg(_n_);
      return caml_string_of_bytes(_ye_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_o_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_p_)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _x$_=param[2],_ya_=param[1];
            if(_x$_)
             {var
               x=(caml_ml_string_length(_ya_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(_q_),
               acc=acc$0,
               param=_x$_;
              continue}
            var _yd_=caml_ml_string_length(_ya_) + acc | 0}
          else
           var _yd_=acc;
          var dst=caml_create_bytes(_yd_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _yb_=param$0[2],_yc_=param$0[1];
              if(_yb_)
               {caml_blit_string(_yc_,0,dst,pos,caml_ml_string_length(_yc_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_yc_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_yc_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_yb_;
                continue}
              caml_blit_string(_yc_,0,dst,pos,caml_ml_string_length(_yc_))}
            return caml_string_of_bytes(dst)}}}
      return _r_}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {index_rec(s,l,i,c);var _x9_=1;return _x9_}
        catch(_x__)
         {_x__ = caml_wrap_exception(_x__);
          if(_x__ === Not_found)return 0;
          throw _x__}
      return invalid_arg(_s_)}
    function contains(s,c){return contains_from(s,0,c)}
    caml_fresh_oo_id(0);
    function _C_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_x8_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_x8_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_x3_=height(lr);
            if(_x3_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _x4_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_x4_)}
            return invalid_arg(_u_)}
          return invalid_arg(_v_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_x5_=height(rl);
            if(_x5_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _x6_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_x6_)}
            return invalid_arg(_w_)}
          return invalid_arg(_x_)}
        var _x7_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_x7_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _x2_=0 === c?1:0;
            if(_x2_)return _x2_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _x1_=param$0[1];
            if(_x1_){var param$0=_x1_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _x0_=param$0[1];
            if(_x0_){var param$0=_x0_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _xX_=param$0[4],_xY_=param$0[3],_xZ_=param$0[2];
            if(_xX_){var param$0=_xX_;continue}
            return [0,_xZ_,_xY_]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _xU_=param$0[4],_xV_=param$0[3],_xW_=param$0[2];
            if(_xU_){var param$0=_xU_;continue}
            return [0,[0,_xW_,_xV_]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _xT_=param[1];
          if(_xT_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_xT_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_y_)}
      function _xw_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _xw_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _xw_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _xQ_=caml_call2(p,v,d);
            if(_xQ_)
             {var _xR_=for_all(p,l);
              if(_xR_){var param$0=r;continue}
              var _xS_=_xR_}
            else
             var _xS_=_xQ_;
            return _xS_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _xN_=caml_call2(p,v,d);
            if(_xN_)
             var _xO_=_xN_;
            else
             {var _xP_=exists(p,l);
              if(! _xP_){var param$0=r;continue}
              var _xO_=_xP_}
            return _xO_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _z_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _xJ_=merge(f,r1,r2),
             _xK_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_xK_,_xJ_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _xL_=merge(f,r1$0,r2$0),
           _xM_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_xM_,_xL_)}
        throw [0,Assert_failure,_A_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _xH_=concat(lf,rf);return [0,join(lt,v,d,rt),_xH_]}
          var _xI_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_xI_]}
        return _B_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _xE_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_xE_)
               {var _xF_=caml_call2(cmp,d1,d2);
                if(_xF_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _xG_=_xF_}
              else
               var _xG_=_xE_;
              return _xG_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_xD_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _xD_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      function add_seq(i,m)
       {var acc=m,seq=i;
        for(;;)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             next=match[2],
             x=match[1],
             v=x[2],
             k=x[1],
             acc$0=add(k,v,acc),
             acc=acc$0,
             seq=next;
            continue}
          return acc}}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_xB_=cons_enum(t,rest);
          return [0,[0,k,v],function(_xC_){return seq_of_enum(_xB_,_xC_)}]}
        return 0}
      function to_seq(m)
       {var _xz_=cons_enum(m,0);
        return function(_xA_){return seq_of_enum(_xz_,_xA_)}}
      function to_seq_from(low,m)
       {var m$0=m,c=0;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             n=caml_call2(Ord[1],v,low);
            if(0 !== n)
             {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
              var m$0=r;
              continue}
            var _xx_=[0,v,d,r,c]}
          else
           var _xx_=c;
          return function(_xy_){return seq_of_enum(_xx_,_xy_)}}}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi,
              to_seq,
              to_seq_from,
              add_seq,
              of_seq]}
    var Undefined=[248,_D_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    var
     Failure$0=[248,_E_,caml_fresh_oo_id(0)],
     Error=[248,_F_,caml_fresh_oo_id(0)];
    function fill_buff(b)
     {var len=caml_ml_bytes_length(b[2]),_xt_=b[2],_xu_=b[1];
      if(0 <= len)
       if((caml_ml_bytes_length(_xt_) - len | 0) < 0)
        var switch$0=0;
       else
        var _xv_=caml_ml_input(_xu_,_xt_,0,len),switch$0=1;
      else
       var switch$0=0;
      if(! switch$0)var _xv_=invalid_arg(_e_);
      b[3] = _xv_;
      b[4] = 0;
      return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_G_]}
           case 2:
            var
             f=d$0[1],
             _xp_=caml_obj_tag(f),
             d$1=250 === _xp_?f[1]:246 === _xp_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _xq_=d$0[1],_xr_=_xq_[1];
            if(_xr_)
             {var _xs_=_xr_[1];
              if(_xs_){var a$0=_xs_[1];_xq_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_xq_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _xq_[1] = _H_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _xk_=s[2];
        if(typeof _xk_ === "number")
         return 0;
        else
         switch(_xk_[0])
          {case 0:var a=_xk_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_I_]}
           case 2:
            var
             f=_xk_[1],
             _xl_=caml_obj_tag(f),
             _xm_=250 === _xl_?f[1]:246 === _xl_?force_lazy_block(f):f;
            s[2] = _xm_;
            continue;
           case 3:
            var _xn_=_xk_[1],_xo_=_xn_[1];
            if(_xo_){var a$1=_xo_[1];return a$1}
            var x=caml_call1(_xn_[2],s[1]);
            _xn_[1] = [0,x];
            return x;
           default:
            var b=_xk_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk(param)
     {if(param)
       {var data=param[1];
        for(;;)
         {var _xi_=data[2];
          if(typeof _xi_ !== "number")
           switch(_xi_[0])
            {case 0:
              var d=_xi_[2];data[1] = data[1] + 1 | 0;data[2] = d;return 0;
             case 3:
              var _xj_=_xi_[1];
              if(_xj_[1]){data[1] = data[1] + 1 | 0;_xj_[1] = 0;return 0}
              break;
             case 4:
              var b=_xi_[1];
              if(b[3] <= b[4])fill_buff(b);
              return 0 === b[3]
                      ?(data[2] = 0,0)
                      :(data[1] = data[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
             }
          var match=peek_data(data);
          if(match)continue;
          return 0}}
      return 0}
    function next(s)
     {var match=peek(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_J_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _xg_=len < min_len?1:0;
      if(_xg_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _xh_=0}
      else
       var _xh_=_xg_;
      return _xh_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_W_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_X_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,___);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_$_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_ab_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_ad_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_ae_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_af_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_ag_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _wU_=function(param){return 0},
         _wV_=function(param){return 0},
         _wW_=function(param){return 0};
        return [0,function(param){return 0},_wW_,_wV_,_wU_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _wX_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_wX_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _wY_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _wY_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _wZ_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _wZ_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _w0_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _w0_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _w1_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _w1_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _w2_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _w2_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _w3_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _w3_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _w4_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _w4_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _w5_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _w5_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _w6_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _w7_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _w8_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _w8_,
                  _w7_,
                  _w6_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _w9_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _w9_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _w__=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _w__,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _w$_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _w$_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _xa_=function(param){caml_call1(de$12,0);return 0},
           _xb_=function(param){caml_call1(ed$12,0);return 0},
           _xc_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _xc_,
                  _xb_,
                  _xa_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _xd_=function(param){caml_call1(de$13,0);return 0},
           _xe_=function(param){caml_call1(ed$13,0);return 0},
           _xf_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _xf_,
                  _xe_,
                  _xd_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_ah_]}
      else
       switch(ty1[0])
        {case 0:
          var _wB_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_wB_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _wC_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_wC_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _wD_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_wD_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _wE_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_wE_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _wF_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_wF_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _wG_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_wG_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _wH_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_wH_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _wI_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_wI_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _wJ_=ty1[2],_wK_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_wL_=trans(_wJ_,rest2$7);
              return [8,trans(_wK_,ty2),_wL_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_aq_];
          break;
         case 9:
          var _wM_=ty1[3],_wN_=ty1[2],_wO_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_wN_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_wO_,ty22,trans(_wM_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_ar_];
          break;
         case 10:
          var _wP_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_wP_,rest2$9)]}
          throw [0,Assert_failure,_as_];
         case 11:
          var _wQ_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_wQ_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_at_];
          break;
         case 12:
          var _wR_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_wR_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_au_];
          break;
         case 13:
          var _wS_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_wS_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_av_];
          break;
         default:
          var _wT_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_wT_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_aw_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ak_];
        case 1:throw [0,Assert_failure,_al_];
        case 2:throw [0,Assert_failure,_am_];
        case 3:throw [0,Assert_failure,_an_];
        case 4:throw [0,Assert_failure,_ao_];
        case 5:throw [0,Assert_failure,_ai_];
        case 6:throw [0,Assert_failure,_aj_];
        default:throw [0,Assert_failure,_ap_]}}
    var Type_mismatch=[248,_ax_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _wA_=match[2];
        if(typeof _wA_ !== "number" && 2 === _wA_[0])
         {var rest$0=_wA_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _v7_=type_padding(pad,fmtty),
           _v8_=_v7_[2],
           _v9_=_v7_[1];
          if(typeof _v8_ !== "number" && 1 === _v8_[0])
           {var
             fmtty_rest$1=_v8_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_v9_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _v__=type_padding(pad$0,fmtty),
           _v$_=_v__[2],
           _wa_=_v__[1];
          if(typeof _v$_ !== "number" && 1 === _v$_[0])
           {var
             fmtty_rest$2=_v$_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_wa_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _wb_=type_padprec(pad$1,prec,fmtty),
           _wc_=_wb_[3],
           _wd_=_wb_[2],
           _we_=_wb_[1];
          if(typeof _wc_ !== "number" && 2 === _wc_[0])
           {var
             fmtty_rest$3=_wc_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_we_,_wd_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _wf_=type_padprec(pad$2,prec$0,fmtty),
           _wg_=_wf_[3],
           _wh_=_wf_[2],
           _wi_=_wf_[1];
          if(typeof _wg_ !== "number" && 3 === _wg_[0])
           {var
             fmtty_rest$4=_wg_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_wi_,_wh_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _wj_=type_padprec(pad$3,prec$1,fmtty),
           _wk_=_wj_[3],
           _wl_=_wj_[2],
           _wm_=_wj_[1];
          if(typeof _wk_ !== "number" && 4 === _wk_[0])
           {var
             fmtty_rest$5=_wk_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_wm_,_wl_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _wn_=type_padprec(pad$4,prec$2,fmtty),
           _wo_=_wn_[3],
           _wp_=_wn_[2],
           _wq_=_wn_[1];
          if(typeof _wo_ !== "number" && 5 === _wo_[0])
           {var
             fmtty_rest$6=_wo_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_wq_,_wp_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _wr_=type_padprec(pad$5,prec$3,fmtty),
           _ws_=_wr_[3],
           _wt_=_wr_[2],
           _wu_=_wr_[1];
          if(typeof _ws_ !== "number" && 6 === _ws_[0])
           {var
             fmtty_rest$7=_ws_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_wu_,_wt_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _wv_=type_padding(pad$6,fmtty),
           _ww_=_wv_[2],
           _wx_=_wv_[1];
          if(typeof _ww_ !== "number" && 7 === _ww_[0])
           {var
             fmtty_rest$8=_ww_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_wx_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _wy_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_wy_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _wz_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_wz_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_wz_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _v5_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_v5_))
             throw Type_mismatch;
            var _v6_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_v6_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _v4_=2 === padty$0?48:32,res=make(width$0,_v4_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(! switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(! switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(! switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return caml_string_of_bytes(res$1)}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return caml_string_of_bytes(res$0)}
          var switch$0=1}}
      if(! switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _v2_=match$0 - 32 | 0,
           switch$0=
            59 < _v2_ >>> 0?33 < (_v2_ - 61 | 0) >>> 0?1:0:2 === _v2_?1:0;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _vV_=caml_ml_bytes_length(s$0) - 1 | 0,
           _vU_=0;
          if(! (_vV_ < 0))
           {var i$0=_vU_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0);
              if(32 <= match)
               {var _vZ_=match - 34 | 0;
                if(58 < _vZ_ >>> 0)
                 if(93 <= _vZ_)var switch$1=0,switch$2=0;else var switch$2=1;
                else
                 if(56 < (_vZ_ - 1 | 0) >>> 0)
                  var switch$1=1,switch$2=0;
                 else
                  var switch$2=1;
                if(switch$2)var _v0_=1,switch$1=2}
              else
               var switch$1=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$1)
               {case 0:var _v0_=4;break;case 1:var _v0_=2;break}
              n[1] = n[1] + _v0_ | 0;
              var _v1_=i$0 + 1 | 0;
              if(_vV_ !== i$0){var i$0=_v1_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           var _v3_=copy(s$0);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _vX_=caml_ml_bytes_length(s$0) - 1 | 0,_vW_=0;
            if(! (_vX_ < 0))
             {var i=_vW_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i);
                if(35 <= c)
                 var switch$3=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$3=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$3=0;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      var switch$3=3;
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      var switch$3=3;
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      var switch$3=3;
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      var switch$3=3;
                      break;
                     default:var switch$3=0}
                switch(switch$3)
                 {case 0:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _vY_=i + 1 | 0;
                if(_vX_ !== i){var i=_vY_;continue}
                break}}
            var _v3_=s}
          var str$0=caml_string_of_bytes(_v3_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_vP_=caml_ml_string_length(s) - 1 | 0,_vO_=0;
        if(! (_vP_ < 0))
         {var i$0=_vO_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _vT_=i$0 + 1 | 0;
            if(_vP_ !== i$0){var i$0=_vT_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _vR_=caml_ml_string_length(s) - 1 | 0,
         _vQ_=0;
        if(! (_vR_ < 0))
         {var i=_vQ_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _vS_=i + 1 | 0;
            if(_vR_ !== i){var i=_vS_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _vN_=_az_;break;
        case 2:var _vN_=_aA_;break;
        case 4:var _vN_=_aC_;break;
        case 5:var _vN_=_aD_;break;
        case 6:var _vN_=_aE_;break;
        case 7:var _vN_=_aF_;break;
        case 8:var _vN_=_aG_;break;
        case 9:var _vN_=_aH_;break;
        case 10:var _vN_=_aI_;break;
        case 11:var _vN_=_aJ_;break;
        case 0:
        case 13:var _vN_=_ay_;break;
        case 3:
        case 14:var _vN_=_aB_;break;
        default:var _vN_=_aK_}
      return transform_int_alt(iconv,caml_format_int(_vN_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _vM_=_aZ_;break;
        case 2:var _vM_=_a0_;break;
        case 4:var _vM_=_a2_;break;
        case 5:var _vM_=_a3_;break;
        case 6:var _vM_=_a4_;break;
        case 7:var _vM_=_a5_;break;
        case 8:var _vM_=_a6_;break;
        case 9:var _vM_=_a7_;break;
        case 10:var _vM_=_a8_;break;
        case 11:var _vM_=_a9_;break;
        case 0:
        case 13:var _vM_=_aY_;break;
        case 3:
        case 14:var _vM_=_a1_;break;
        default:var _vM_=_a__}
      return transform_int_alt(iconv,caml_format_int(_vM_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _vL_=_ba_;break;
        case 2:var _vL_=_bb_;break;
        case 4:var _vL_=_bd_;break;
        case 5:var _vL_=_be_;break;
        case 6:var _vL_=_bf_;break;
        case 7:var _vL_=_bg_;break;
        case 8:var _vL_=_bh_;break;
        case 9:var _vL_=_bi_;break;
        case 10:var _vL_=_bj_;break;
        case 11:var _vL_=_bk_;break;
        case 0:
        case 13:var _vL_=_a$_;break;
        case 3:
        case 14:var _vL_=_bc_;break;
        default:var _vL_=_bl_}
      return transform_int_alt(iconv,caml_format_int(_vL_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _vK_=_aM_;break;
        case 2:var _vK_=_aN_;break;
        case 4:var _vK_=_aP_;break;
        case 5:var _vK_=_aQ_;break;
        case 6:var _vK_=_aR_;break;
        case 7:var _vK_=_aS_;break;
        case 8:var _vK_=_aT_;break;
        case 9:var _vK_=_aU_;break;
        case 10:var _vK_=_aV_;break;
        case 11:var _vK_=_aW_;break;
        case 0:
        case 13:var _vK_=_aL_;break;
        case 3:
        case 14:var _vK_=_aO_;break;
        default:var _vK_=_aX_}
      return transform_int_alt(iconv,caml_int64_format(_vK_,n))}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(! switch$0)var sign=45;
        var s$0=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
          if(0 === l)
           var _vG_=s;
          else
           {var r=caml_create_bytes(l),_vE_=l - 1 | 0,_vD_=0;
            if(! (_vE_ < 0))
             {var i=_vD_;
              for(;;)
               {caml_bytes_unsafe_set(r,i,f(caml_bytes_unsafe_get(s,i)));
                var _vF_=i + 1 | 0;
                if(_vE_ !== i){var i=_vF_;continue}
                break}}
            var _vG_=r}
          return caml_string_of_bytes(_vG_)}
        return s$0}
      if(15 === fconv)
       var _vH_=_bm_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _vH_=buffer_contents(buf)}
      var str=caml_format_float(_vH_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0.?_bn_:_bo_;
        if(4 <= match$0)return _bp_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _vJ_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _vI_=match - 46 | 0,
             switch$1=
              23 < _vI_ >>> 0?55 === _vI_?1:0:21 < (_vI_ - 1 | 0) >>> 0?1:0;
            if(! switch$1){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _vJ_=1}
          return _vJ_?str:symbol(str,_bq_)}}
      return str}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _vA_=pad[2],_vB_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_vB_,_vA_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_vB_,_vA_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_vB_,_vA_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _vC_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_vC_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_vC_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_vC_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_g_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_h_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_i_,switch$0=2;break;
                  case 9:var str=_j_,switch$0=2;break;
                  case 10:var str=_k_,switch$0=2;break;
                  case 13:var str=_l_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _vw_=pad$5[2],_vx_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_vx_,_vw_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_vx_,_vw_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_vx_,_vw_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _vy_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_vy_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_vy_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_vy_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _vz_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _vz_[2] === "number")
              {var fmt=_vz_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _vu_=fmt$0[1];
           if(0 === _vu_[0])
            {var
              rest$13=fmt$0[2],
              match=_vu_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_vu_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_br_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bs_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bt_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bu_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _vv_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_vv_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_vv_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_vt_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bv_];
         default:throw [0,Assert_failure,_bw_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _vs_=[8,acc,_bx_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_vs_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_vs_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _vr_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_vr_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_vr_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1];
           if(typeof fmting_lit === "number")
            switch(fmting_lit)
             {case 0:var s=_K_;break;
              case 1:var s=_L_;break;
              case 2:var s=_M_;break;
              case 3:var s=_N_;break;
              case 4:var s=_O_;break;
              case 5:var s=_P_;break;
              default:var s=_Q_}
           else
            switch(fmting_lit[0])
             {case 0:var str=fmting_lit[1],s=str;break;
              case 1:var str$0=fmting_lit[1],s=str$0;break;
              default:var c=fmting_lit[1],s=symbol(_R_,make$0(1,c))}
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _vp_=acc$0[2],_vq_=acc$0[1];
           if(0 === _vp_[0])
            {var acc$1=_vp_[1];
             strput_acc(b,_vq_);
             add_string(b,_by_);
             var acc$0=acc$1;
             continue}
           var acc$2=_vp_[1];
           strput_acc(b,_vq_);
           add_string(b,_bz_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c$0=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c$0);
           b[2] = pos + 1 | 0;
           return 0}}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,fmt)}
    var printers=[0,0];
    function field(x,i)
     {var a=x[1 + i];
      return 1 - (typeof a === "number"?1:0)
              ?caml_obj_tag(a) === 252
                ?caml_call1(sprintf(_bA_),a)
                :caml_obj_tag(a) === 253?string_of_float(a):_bB_
              :caml_call1(sprintf(_bC_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bD_;
      var _vn_=other_fields(x,i + 1 | 0),_vo_=field(x,i);
      return caml_call2(sprintf(_bE_),_vo_,_vn_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _vk_=other_fields(x,2),_vl_=field(x,1);
        return caml_call2(sprintf(_bF_),_vl_,_vk_)}
      switch(match)
       {case 0:return _bG_;
        case 1:return _bH_;
        default:var _vm_=field(x,1);return caml_call1(sprintf(_bI_),_vm_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _vi_=caml_call1(hd,x),_vh_=_vi_}catch(_vj_){var _vh_=0}
            if(_vh_){var s=_vh_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bJ_;
          if(x === Stack_overflow)return _bK_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bL_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bM_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bN_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return symbol(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    try
     {var _iY_=caml_sys_getenv(_iX_),params=_iY_}
    catch(_vf_)
     {_vf_ = caml_wrap_exception(_vf_);
      if(_vf_ !== Not_found)throw _vf_;
      try
       {var _iW_=caml_sys_getenv(_iV_),_bQ_=_iW_}
      catch(_vg_)
       {_vg_ = caml_wrap_exception(_vg_);
        if(_vg_ !== Not_found)throw _vg_;
        var _bQ_=_bP_}
      var params=_bQ_}
    var
     random=contains(params,82),
     prng=
      [246,
       function(_ve_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[1 + i$0] = i$0;
           var _vd_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_vd_;continue}
           var accu=[0,_bO_],_u$_=54 + max(55,l) | 0,_u__=0;
           if(! (_u$_ < 0))
            {var i=_u__;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[1 + k],
                str=symbol(accu[1],caml_new_string("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _va_=accu[1],
                _u6_=caml_string_get(_va_,3) << 24,
                _u7_=caml_string_get(_va_,2) << 16,
                _u8_=caml_string_get(_va_,1) << 8,
                _u9_=
                 ((caml_string_get(_va_,0) + _u8_ | 0) + _u7_ | 0)
                 +
                 _u6_
                 |
                 0,
                _vb_=
                 (caml_check_bound(result[1],j)[1 + j] ^ _u9_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[1 + j] = _vb_;
               var _vc_=i + 1 | 0;
               if(_u$_ !== i){var i=_vc_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function indexfun(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod(caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function find$0(h,key)
     {var _u5_=indexfun(h,key),match=caml_check_bound(h[2],_u5_)[1 + _u5_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function f$0(s)
     {var accu=[0,0],_u2_=caml_ml_string_length(s) - 1 | 0,_u1_=0;
      if(! (_u2_ < 0))
       {var i=_u1_;
        for(;;)
         {var _u3_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _u3_ | 0;
          var _u4_=i + 1 | 0;
          if(_u2_ !== i){var i=_u4_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare=caml_string_compare,
     Vars=_C_([0,compare]),
     compare$0=caml_string_compare,
     Meths=_C_([0,compare$0]),
     compare$1=caml_int_compare,
     Labs=_C_([0,compare$1]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _uV_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _uV_;
      var _uX_=len - 1 | 0,_uW_=0;
      if(! (_uX_ < 0))
       {var i=_uW_;
        for(;;)
         {var
           _uZ_=(i * 2 | 0) + 3 | 0,
           _uY_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_uZ_)[1 + _uZ_] = _uY_;
          var _u0_=i + 1 | 0;
          if(_uX_ !== i){var i=_u0_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var len=array[2].length - 1,_uS_=len < new_size?1:0;
      if(_uS_)
       {var
         a2=caml_make_vect(new_size,dummy_met),
         _uT_=array[2],
         switch$0=
          0 <= len
           ?(_uT_.length - 1 - len | 0) < 0
             ?0
             :(a2.length - 1 - len | 0) < 0
               ?0
               :(caml_array_blit(_uT_,0,a2,0,len),1)
           :0;
        if(! switch$0)invalid_arg(_t_);
        array[2] = a2;
        var _uU_=0}
      else
       var _uU_=_uS_;
      return _uU_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _uQ_=caml_call2(Meths[27],name,table[3]);return _uQ_}
      catch(_uR_)
       {_uR_ = caml_wrap_exception(_uR_);
        if(_uR_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _uR_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _uO_=caml_call2(Vars[27],name,table[7]);return _uO_}
      catch(_uP_)
       {_uP_ = caml_wrap_exception(_uP_);
        if(_uP_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_bR_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _uP_}}
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var x=16;
      for(;;)
       {if(! (17 <= x))
         if(! (max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         {var
           _ue_=caml_obj_tag(prng),
           _uf_=250 === _ue_?prng[1]:246 === _ue_?force_lazy_block(prng):prng;
          _uf_[2] = (_uf_[2] + 1 | 0) % 55 | 0;
          var
           _t$_=_uf_[2],
           curval=caml_check_bound(_uf_[1],_t$_)[1 + _t$_],
           _ua_=(_uf_[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(_uf_[1],_ua_)[1 + _ua_]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           newval30=newval & 1073741823,
           _ub_=_uf_[2];
          caml_check_bound(_uf_[1],_ub_)[1 + _ub_] = newval30;
          var seed=newval30}
        else
         var seed=0;
        var kwd_table=[0,0,caml_make_vect(x,0),seed,x],param=keywords;
        for(;;)
         {if(param)
           {var
             l=param[2],
             a=param[1],
             data$0=[0,a],
             i$1=indexfun(kwd_table,a),
             bucket=[0,a,data$0,caml_check_bound(kwd_table[2],i$1)[1 + i$1]];
            caml_check_bound(kwd_table[2],i$1)[1 + i$1] = bucket;
            kwd_table[1] = kwd_table[1] + 1 | 0;
            if(kwd_table[2].length - 1 << 1 < kwd_table[1])
             {var
               odata=kwd_table[2],
               osize=odata.length - 1,
               nsize=osize * 2 | 0;
              if(nsize < max_array_length)
               {var
                 ndata=caml_make_vect(nsize,0),
                 ndata_tail=caml_make_vect(nsize,0),
                 _uc_=kwd_table.length - 1 < 4?1:0,
                 _ud_=_uc_ || (kwd_table[4] < 0?1:0),
                 inplace=1 - _ud_;
                kwd_table[2] = ndata;
                var _uh_=osize - 1 | 0,_ug_=0;
                if(! (_uh_ < 0))
                 {var i$0=_ug_;
                  a:
                  for(;;)
                   {var
                     cell$1=caml_check_bound(odata,i$0)[1 + i$0],
                     cell=cell$1;
                    for(;;)
                     {if(cell)
                       {var
                         key=cell[1],
                         data=cell[2],
                         next=cell[3],
                         cell$0=inplace?cell:[0,key,data,0],
                         nidx=indexfun(kwd_table,key),
                         match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                        if(match)
                         match[3] = cell$0;
                        else
                         caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                        caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                        var cell=next;
                        continue}
                      var _ul_=i$0 + 1 | 0;
                      if(_uh_ !== i$0){var i$0=_ul_;continue a}
                      break}
                    break}}
                if(inplace)
                 {var _uj_=nsize - 1 | 0,_ui_=0;
                  if(! (_uj_ < 0))
                   {var i=_ui_;
                    for(;;)
                     {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
                      if(match$0)match$0[3] = 0;
                      var _uk_=i + 1 | 0;
                      if(_uj_ !== i){var i=_uk_;continue}
                      break}}}}}
            var param=l;
            continue}
          var
           ident_or_keyword=
            function(id)
             {try
               {var _uM_=find$0(kwd_table,id);return _uM_}
              catch(_uN_)
               {_uN_ = caml_wrap_exception(_uN_);
                if(_uN_ === Not_found)return [1,id];
                throw _uN_}},
           keyword_or_error=
            function(c)
             {var s=make$0(1,c);
              try
               {var _uK_=find$0(kwd_table,s);return _uK_}
              catch(_uL_)
               {_uL_ = caml_wrap_exception(_uL_);
                if(_uL_ === Not_found)throw [0,Error,symbol(_bS_,s)];
                throw _uL_}},
           end_exponent_part=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _uJ_=match[1],switcher=_uJ_ - 48 | 0;
                  if(! (9 < switcher >>> 0)){junk(strm);store(_uJ_);continue}}
                return [0,[3,caml_float_of_string(get_string(0))]]}},
           exponent_part=
            function(strm)
             {var match=peek(strm);
              if(match)
               {var _uI_=match[1],switch$0=43 === _uI_?0:45 === _uI_?0:1;
                if(! switch$0)
                 {junk(strm);store(_uI_);return end_exponent_part(strm)}}
              return end_exponent_part(strm)},
           number=
            function(s)
             {for(;;)
               {var match=peek(s);
                if(match)
                 {var _uF_=match[1];
                  if(58 <= _uF_)
                   {var switch$0=69 === _uF_?0:101 === _uF_?0:1;
                    if(! switch$0){junk(s);store(69);return exponent_part(s)}}
                  else
                   {if(46 === _uF_)
                     {junk(s);
                      store(46);
                      for(;;)
                       {var match$0=peek(s);
                        if(match$0)
                         {var _uG_=match$0[1],_uH_=_uG_ - 69 | 0;
                          if(32 < _uH_ >>> 0)
                           {var switcher=_uH_ + 21 | 0;
                            if(! (9 < switcher >>> 0)){junk(s);store(_uG_);continue}}
                          else
                           {var switcher$0=_uH_ - 1 | 0;
                            if(30 < switcher$0 >>> 0)
                             {junk(s);store(69);return exponent_part(s)}}}
                        return [0,[3,caml_float_of_string(get_string(0))]]}}
                    if(48 <= _uF_){junk(s);store(_uF_);continue}}}
                return [0,[2,caml_int_of_string(get_string(0))]]}},
           ident2=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _uD_=match[1];
                  if(94 <= _uD_)
                   var
                    _uE_=_uD_ - 95 | 0,
                    switch$0=30 < _uE_ >>> 0?32 <= _uE_?1:0:29 === _uE_?0:1;
                  else
                   if(65 <= _uD_)
                    var switch$0=92 === _uD_?0:1;
                   else
                    if(33 <= _uD_)
                     switch(_uD_ - 33 | 0)
                      {case 0:
                       case 2:
                       case 3:
                       case 4:
                       case 5:
                       case 9:
                       case 10:
                       case 12:
                       case 14:
                       case 25:
                       case 27:
                       case 28:
                       case 29:
                       case 30:
                       case 31:var switch$0=0;break;
                       default:var switch$0=1}
                    else
                     var switch$0=1;
                  if(! switch$0){junk(strm);store(_uD_);continue}}
                return [0,ident_or_keyword(get_string(0))]}},
           neg_number=
            function(s)
             {var match=peek(s);
              if(match)
               {var _uC_=match[1],switcher=_uC_ - 48 | 0;
                if(! (9 < switcher >>> 0))
                 {junk(s);
                  reset_buffer(0);
                  store(45);
                  store(_uC_);
                  return number(s)}}
              reset_buffer(0);
              store(45);
              return ident2(s)},
           ident=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _uA_=match[1];
                  if(91 <= _uA_)
                   var
                    _uB_=_uA_ - 95 | 0,
                    switch$0=27 < _uB_ >>> 0?97 <= _uB_?0:1:1 === _uB_?1:0;
                  else
                   var
                    switch$0=
                     48 <= _uA_?6 < (_uA_ - 58 | 0) >>> 0?0:1:39 === _uA_?0:1;
                  if(! switch$0){junk(strm);store(_uA_);continue}}
                return [0,ident_or_keyword(get_string(0))]}},
           next_token$0=
            function(counter,strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _uq_=match[1];
                  if(124 <= _uq_)
                   var switch$0=127 <= _uq_?192 <= _uq_?1:0:125 === _uq_?0:2;
                  else
                   {var _ur_=_uq_ - 65 | 0;
                    if(57 < _ur_ >>> 0)
                     if(58 <= _ur_)
                      var switch$0=0;
                     else
                      {var switcher=_ur_ + 65 | 0;
                       switch(switcher)
                        {case 34:
                          junk(strm);
                          reset_buffer(0);
                          for(;;)
                           {var match$1=peek(strm);
                            if(match$1)
                             {var _ut_=match$1[1];
                              if(34 === _ut_){junk(strm);return [0,[4,get_string(0)]]}
                              if(92 === _ut_)
                               {junk(strm);
                                try
                                 {var c$0=escape(strm)}
                                catch(_uz_)
                                 {_uz_ = caml_wrap_exception(_uz_);
                                  if(_uz_ === Failure$0)throw [0,Error,_bV_];
                                  throw _uz_;
                                  var _uw_=_uz_}
                                store(c$0);
                                continue}
                              junk(strm);
                              store(_ut_);
                              continue}
                            throw Failure$0}
                         case 39:
                          junk(strm);
                          try
                           {var match$2=peek(strm);
                            if(! match$2)throw Failure$0;
                            var _uu_=match$2[1];
                            if(92 === _uu_)
                             {junk(strm);
                              try
                               {var _uv_=escape(strm)}
                              catch(_uy_)
                               {_uy_ = caml_wrap_exception(_uy_);
                                if(_uy_ === Failure$0)throw [0,Error,_bW_];
                                throw _uy_}
                              var c=_uv_}
                            else
                             {junk(strm);var c=_uu_}}
                          catch(_ux_)
                           {_ux_ = caml_wrap_exception(_ux_);
                            if(_ux_ === Failure$0)throw [0,Error,_bT_];
                            throw _ux_}
                          var match$0=peek(strm);
                          if(match$0)
                           if(39 === match$0[1]){junk(strm);return [0,[5,c]]}
                          throw [0,Error,_bU_];
                         case 40:
                          junk(strm);
                          if(counter < 50)
                           {var counter$0=counter + 1 | 0;
                            return maybe_comment(counter$0,strm)}
                          return caml_trampoline_return(maybe_comment,[0,strm]);
                         case 45:junk(strm);return neg_number(strm);
                         case 9:
                         case 10:
                         case 12:
                         case 13:
                         case 26:
                         case 32:junk(strm);continue;
                         case 48:
                         case 49:
                         case 50:
                         case 51:
                         case 52:
                         case 53:
                         case 54:
                         case 55:
                         case 56:
                         case 57:
                          junk(strm);reset_buffer(0);store(_uq_);return number(strm);
                         case 33:
                         case 35:
                         case 36:
                         case 37:
                         case 38:
                         case 42:
                         case 43:
                         case 47:
                         case 58:
                         case 60:
                         case 61:
                         case 62:
                         case 63:
                         case 64:var switch$0=2;break;
                         default:var switch$0=0}}
                    else
                     {var _us_=_ur_ - 26 | 0;
                      if(5 < _us_ >>> 0)
                       var switch$0=1;
                      else
                       switch(_us_)
                        {case 4:var switch$0=1;break;
                         case 1:
                         case 3:var switch$0=2;break;
                         default:var switch$0=0}}}
                  switch(switch$0)
                   {case 0:junk(strm);return [0,keyword_or_error(_uq_)];
                    case 1:
                     junk(strm);reset_buffer(0);store(_uq_);return ident(strm);
                    default:
                     junk(strm);reset_buffer(0);store(_uq_);return ident2(strm)}}
                return 0}},
           maybe_comment=
            function(counter,strm)
             {var match=peek(strm);
              if(match)
               if(42 === match[1])
                {junk(strm);
                 comment(strm);
                 if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return next_token$0(counter$0,strm)}
                 return caml_trampoline_return(next_token$0,[0,strm])}
              return [0,keyword_or_error(40)]},
           next_token=
            function(strm){return caml_trampoline(next_token$0(0,strm))},
           escape=
            function(strm)
             {var match=peek(strm);
              if(match)
               {var _un_=match[1];
                if(58 <= _un_)
                 {var switcher=_un_ - 110 | 0;
                  if(! (6 < switcher >>> 0))
                   switch(switcher)
                    {case 0:junk(strm);return 10;
                     case 4:junk(strm);return 13;
                     case 6:junk(strm);return 9
                     }}
                else
                 if(48 <= _un_)
                  {junk(strm);
                   var match$0=peek(strm);
                   if(match$0)
                    {var _uo_=match$0[1],switcher$0=_uo_ - 48 | 0;
                     if(! (9 < switcher$0 >>> 0))
                      {junk(strm);
                       var match$1=peek(strm);
                       if(match$1)
                        {var _up_=match$1[1],switcher$1=_up_ - 48 | 0;
                         if(! (9 < switcher$1 >>> 0))
                          {junk(strm);
                           var
                            n=
                             (((_un_ - 48 | 0) * 100 | 0)
                              +
                              ((_uo_ - 48 | 0) * 10 | 0)
                              |
                              0)
                             +
                             (_up_ - 48 | 0)
                             |
                             0;
                           if(0 <= n)if(! (255 < n))return n;
                           return invalid_arg(_f_)}}
                       throw [0,Error,_bY_]}}
                   throw [0,Error,_bX_]}
                junk(strm);
                return _un_}
              throw Failure$0},
           comment=
            function(strm)
             {b:
              for(;;)
               {var match=peek(strm);
                if(match)
                 {var switcher=match[1] - 40 | 0;
                  if(! (2 < switcher >>> 0))
                   switch(switcher)
                    {case 0:
                      junk(strm);
                      var match$0=peek(strm);
                      if(match$0)
                       {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                        junk(strm);
                        continue}
                      throw Failure$0;
                     case 1:break;
                     default:
                      junk(strm);
                      for(;;)
                       {var match$1=peek(strm);
                        if(match$1)
                         {var _um_=match$1[1];
                          if(41 === _um_){junk(strm);return 0}
                          if(42 === _um_){junk(strm);continue}
                          junk(strm);
                          continue b}
                        throw Failure$0}}
                  junk(strm);
                  continue}
                throw Failure$0}};
          return function(input)
           {return from(function(count){return next_token(input)})}}}}
    var
     window$0=joo_global_object,
     no_handler=null,
     undefined$0=undefined,
     array_length=window$0.Array,
     Error$0=[248,_bZ_,caml_fresh_oo_id(0)];
    register_exception(_b0_,[0,Error$0,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length?0:[0,caml_js_to_string(e.toString())]});
    function export$0(field,x)
     {var field$0=field.toString();return caml_js_export_var(0)[field$0] = x}
    function appendChild(p,n){p.appendChild(n);return 0}
    caml_fresh_oo_id(0);
    var html_element=window$0.HTMLElement;
    html_element === undefined$0;
    function pp_var(v)
     {var s=caml_bytes_of_string(v);return caml_string_of_bytes(apply1(f,s))}
    function pp_func(f)
     {var s=caml_bytes_of_string(f);
      return caml_string_of_bytes(apply1(lowercase_ascii,s))}
    function parens(s){return symbol(_b__,symbol(s,_b9_))}
    function pp_expr(param)
     {switch(param[0])
       {case 0:var v=param[1];return pp_var(v);
        case 1:var r=param[1];return caml_new_string("" + r);
        case 2:
         var e2=param[2],e1=param[1],_t8_=symbol(_b$_,pp_expr(e2));
         return parens(symbol(pp_expr(e1),_t8_));
        case 3:
         var e2$0=param[2],e1$0=param[1],_t9_=symbol(_ca_,pp_expr(e2$0));
         return parens(symbol(pp_expr(e1$0),_t9_));
        case 4:
         var e2$1=param[2],e1$1=param[1];
         return parens
                 (symbol
                   (caml_new_string("" + e1$1),symbol(_cb_,pp_expr(e2$1))));
        case 5:
         var
          e2$2=param[2],
          e1$2=param[1],
          _t__=symbol(_cc_,caml_new_string("" + e2$2));
         return parens(symbol(pp_expr(e1$2),_t__));
        default:var e=param[1];return symbol(_cd_,pp_expr(e))}}
    function pp_acall(param)
     {var el=param[2],f=param[1];
      if(0 === el)return pp_func(f);
      var _t7_=symbol(_cg_,symbol(concat(_cf_,map(pp_expr,el)),_ce_));
      return symbol(pp_func(f),_t7_)}
    function pp_pred(param)
     {var e2=param[3],o=param[2],e1=param[1],_t4_=symbol(_ch_,pp_expr(e2));
      switch(o)
       {case 0:var _t5_=_b4_;break;
        case 1:var _t5_=_b5_;break;
        case 2:var _t5_=_b6_;break;
        case 3:var _t5_=_b7_;break;
        default:var _t5_=_b8_}
      var _t6_=symbol(_ci_,symbol(_t5_,_t4_));
      return symbol(pp_expr(e1),_t6_)}
    function pp_eqn(param)
     {var
       pl=param[5],
       cl=param[4],
       e=param[3],
       to_nat=param[2],
       call=param[1],
       _tY_=
        symbol(_cm_,symbol(_cl_,symbol(concat(_ck_,map(pp_pred,pl)),_cj_))),
       _tZ_=
        symbol(_cp_,symbol(_co_,symbol(concat(_cn_,map(pp_acall,cl)),_tY_))),
       _t0_=pp_expr(e),
       _t1_=
        to_nat
         ?function(x){return symbol(_cq_,parens(x))}
         :function(x){return x},
       _t2_=symbol(_cr_,symbol(_t1_(_t0_),_tZ_)),
       vl=call[2],
       f=call[1];
      if(0 === vl)
       var _t3_=pp_func(f);
      else
       var
        _tX_=symbol(_b3_,symbol(concat(_b2_,map(pp_var,vl)),_b1_)),
        _t3_=symbol(pp_func(f),_tX_);
      return symbol(_cs_,symbol(_t3_,_t2_))}
    function pp_expr$0(param)
     {switch(param[0])
       {case 0:var n=param[1];return caml_new_string("" + n);
        case 1:var v=param[1];return v;
        case 2:
         var
          e2=param[2],
          e1=param[1],
          _tT_=symbol(_cv_,symbol(pp_expr$0(e2),_cu_));
         return symbol(_cw_,symbol(pp_expr$0(e1),_tT_));
        case 3:
         var
          e2$0=param[2],
          e1$0=param[1],
          _tU_=symbol(_cy_,symbol(pp_expr$0(e2$0),_cx_));
         return symbol(_cz_,symbol(pp_expr$0(e1$0),_tU_));
        case 4:
         var
          e2$1=param[2],
          e1$1=param[1],
          _tV_=symbol(_cB_,symbol(pp_expr$0(e2$1),_cA_));
         return symbol(_cC_,symbol(pp_expr$0(e1$1),_tV_));
        case 5:
         var
          e2$2=param[2],
          e1$2=param[1],
          _tW_=symbol(_cE_,symbol(pp_expr$0(e2$2),_cD_));
         return symbol(_cF_,symbol(pp_expr$0(e1$2),_tW_));
        default:var e=param[1];return symbol(_cG_,pp_expr$0(e))}}
    function pp_pred$0(param)
     {switch(param[0])
       {case 0:var b=param[1];return string_of_bool(b);
        case 1:
         var
          e2=param[2],
          e1=param[1],
          _tO_=symbol(_cI_,symbol(pp_expr$0(e2),_cH_));
         return symbol(_cJ_,symbol(pp_expr$0(e1),_tO_));
        case 2:
         var
          e2$0=param[2],
          e1$0=param[1],
          _tP_=symbol(_cL_,symbol(pp_expr$0(e2$0),_cK_));
         return symbol(_cM_,symbol(pp_expr$0(e1$0),_tP_));
        case 3:
         var
          e2$1=param[2],
          e1$1=param[1],
          _tQ_=symbol(_cO_,symbol(pp_expr$0(e2$1),_cN_));
         return symbol(_cP_,symbol(pp_expr$0(e1$1),_tQ_));
        case 4:
         var
          e2$2=param[2],
          e1$2=param[1],
          _tR_=symbol(_cR_,symbol(pp_pred$0(e2$2),_cQ_));
         return symbol(_cS_,symbol(pp_pred$0(e1$2),_tR_));
        case 5:
         var
          e2$3=param[2],
          e1$3=param[1],
          _tS_=symbol(_cU_,symbol(pp_pred$0(e2$3),_cT_));
         return symbol(_cV_,symbol(pp_pred$0(e1$3),_tS_));
        default:var p=param[1];return symbol(_cW_,pp_pred$0(p))}}
    function mk_indent(n){return make$0(3 * n | 0,32)}
    function pp_stm(indent,s)
     {switch(s[0])
       {case 0:var l=s[1],_tI_=concat(_cX_,map(pp_expr$0,l));break;
        case 1:
         var
          l$0=s[2],
          f=s[1],
          _tI_=
           symbol(f,symbol(_c0_,symbol(concat(_cZ_,map(pp_expr$0,l$0)),_cY_)));
         break;
        default:
         var _tJ_=s[1];
         if(! _tJ_)throw [0,Assert_failure,_c7_];
         var
          tl=_tJ_[2],
          match=_tJ_[1],
          s$0=match[2],
          p=match[1],
          _tK_=
           concat
            (_c4_,
             map
              (function(param)
                {var
                  s=param[2],
                  p=param[1],
                  _tM_=symbol(_c1_,pp_stm(indent + 2 | 0,s)),
                  _tN_=symbol(_c2_,symbol(pp_pred$0(p),_tM_));
                 return symbol(_c3_,symbol(mk_indent(indent),_tN_))},
               tl)),
          _tL_=symbol(_c5_,symbol(pp_stm(indent + 2 | 0,s$0),_tK_)),
          _tI_=symbol(_c6_,symbol(pp_pred$0(p),_tL_))}
      return symbol(mk_indent(indent),_tI_)}
    function pp_function(param)
     {var
       stm=param[3],
       params=param[2],
       f=param[1],
       _tH_=symbol(_c8_,pp_stm(1,stm));
      return symbol(f,symbol(_c__,symbol(concat(_c9_,params),_tH_)))}
    var NotLinear=[248,_da_,caml_fresh_oo_id(0)];
    function compute_expr(param)
     {switch(param[0])
       {case 0:var n=param[1];return [1,n];
        case 1:var v=param[1];return [0,v];
        case 2:
         var e2=param[2],e1=param[1],_tC_=compute_expr(e2);
         return [2,compute_expr(e1),_tC_];
        case 3:
         var e2$0=param[2],e1$0=param[1],_tD_=compute_expr(e2$0);
         return [3,compute_expr(e1$0),_tD_];
        case 4:
         var _tE_=param[1];
         if(0 === _tE_[0])
          {var e2$1=param[2],n$0=_tE_[1];return [4,n$0,compute_expr(e2$1)]}
         throw NotLinear;
        case 5:
         var _tF_=param[2],_tG_=param[1];
         if(0 === _tF_[0]){var n$1=_tF_[1];return [5,compute_expr(_tG_),n$1]}
         throw NotLinear;
        default:var e=param[1];return [6,compute_expr(e)]}}
    function conj(l1,l2)
     {return flatten
              (map(function(x){return map(function(y){return op(x,y)},l2)},l1))}
    function atomic_neg(param)
     {var e2=param[3],p=param[2],e1=param[1];
      switch(p)
       {case 0:var _tB_=_db_;break;
        case 1:var _tB_=_dc_;break;
        case 2:var _tB_=_dd_;break;
        case 3:var _tB_=_de_;break;
        default:var _tB_=_df_}
      return map(function(op){return [0,e1,op,e2]},_tB_)}
    function distribute(param)
     {if(param){var tl=param[2],hd=param[1];return conj(hd,distribute(tl))}
      return top}
    function compute_pred(param)
     {switch(param[0])
       {case 0:return 0 === param[1]?bot:top;
        case 1:
         var
          e2=param[2],
          e1=param[1],
          e1$0=compute_expr(e1),
          e2$0=compute_expr(e2);
         return [0,[0,[0,e1$0,0,e2$0],0],0];
        case 2:
         var
          e2$1=param[2],
          e1$1=param[1],
          e1$2=compute_expr(e1$1),
          e2$2=compute_expr(e2$1);
         return [0,[0,[0,e1$2,4,e2$2],0],0];
        case 3:
         var
          e2$3=param[2],
          e1$3=param[1],
          e1$4=compute_expr(e1$3),
          e2$4=compute_expr(e2$3);
         return [0,[0,[0,e1$4,2,e2$4],0],0];
        case 4:
         var
          p2=param[2],
          p1=param[1],
          p1$0=compute_pred(p1),
          p2$0=compute_pred(p2);
         return conj(p1$0,p2$0);
        case 5:
         var
          p2$1=param[2],
          p1$1=param[1],
          p1$2=compute_pred(p1$1),
          p2$2=compute_pred(p2$1);
         return op(p1$2,p2$2);
        default:
         var
          p=param[1],
          disjl=compute_pred(p),
          conjl_disj_conj=
           map
            (function(conjl)
              {var disj_conj=map(atomic_neg,conjl);return disj_conj},
             disjl);
         return distribute(conjl_disj_conj)}}
    function compute_typ(fcall,param)
     {switch(param[0])
       {case 0:
         var
          el=param[1],
          el$0=map(compute_expr,el),
          cost=fold_left(function(acc,x){return [2,acc,x]},_dg_,el$0);
         return [0,[0,fcall,0,cost,0,0],0];
        case 1:
         var el$1=param[2],f=param[1],el$2=map(compute_expr,el$1);
         return [0,[0,fcall,0,_dh_,[0,[0,f,el$2],0],0],0];
        default:
         var l=param[1];
         return flatten
                 (map
                   (function(param)
                     {var
                       typ=param[2],
                       p=param[1],
                       pll=compute_pred(p),
                       l=compute_typ(fcall,typ);
                      return flatten
                              (map
                                (function(param)
                                  {var
                                    pl1=param[5],
                                    calls=param[4],
                                    cost=param[3],
                                    to_nat=param[2],
                                    fcall=param[1];
                                   return map
                                           (function(pl){return [0,fcall,to_nat,cost,calls,op(pl1,pl)]},
                                            pll)},
                                 l))},
                    l))}}
    var f$1=[0,prerr_endline];
    function error(s){return caml_call1(f$1[1],s)}
    function set_error(g){f$1[1] = g;return 0}
    function prefix(n,param)
     {if(0 === n)return 0;
      if(param)
       {var tl=param[2],hd=param[1];return [0,hd,prefix(n - 1 | 0,tl)]}
      throw [0,Assert_failure,_di_]}
    function mk_list(c,n){return 0 === n?0:[0,c,mk_list(c,n - 1 | 0)]}
    function eq_tag(t1,t2)
     {switch(t1)
       {case 0:if(0 === t2)return _dj_;break;
        case 1:if(1 === t2)return _dk_;break;
        case 2:if(2 === t2)return _dl_;break;
        default:if(3 <= t2)return _dm_}
      return 0}
    function eq_tag_list(tl1,tl2)
     {if(tl1)
       {if(tl2)
         {var
           tl2$0=tl2[2],
           t2=tl2[1],
           tl1$0=tl1[2],
           t1=tl1[1],
           match=eq_tag(t1,t2);
          if(match)
           {var match$0=eq_tag_list(tl1$0,tl2$0);return match$0?_dn_:0}
          return 0}}
      else
       if(! tl2)return _do_;
      return 0}
    function tag_of_lhs(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0]){var f=param[1];return f[1]}
        var v=param[1];
        return v[1]}}
    function tag_list_length(param)
     {if(param){var tl=param[2];return 1 + tag_list_length(tl) | 0}return 0}
    function var_list_length(param)
     {if(param){var tl=param[2];return 1 + var_list_length(tl) | 0}return 0}
    function expr_list_map(o,tl,match)
     {if(tl)
       {var
         el=match[2],
         e=match[1],
         tl$0=tl[2],
         t=tl[1],
         _tA_=expr_list_map(o,tl$0,el);
        return [0,caml_call3(caml_get_public_method(o,102,160),o,t,e),_tA_]}
      return 0}
    function mk_indent$0(indent){return make$0(3 * indent | 0,32)}
    function pp_tag(param)
     {switch(param)
       {case 0:return _dp_;
        case 1:return _dq_;
        case 2:return _dr_;
        default:return _ds_}}
    function pp_tag_list(param)
     {if(param)
       {var tl=param[2],x=param[1],_tz_=pp_tag_list(tl);
        return [0,pp_tag(x),_tz_]}
      return 0}
    function pp_decl(param)
     {var s=param[2],t=param[1],_ty_=symbol(_dt_,s);
      return symbol(pp_tag(t),_ty_)}
    function pp_var_list(param)
     {if(param)
       {var tl=param[2],v=param[1],_tx_=pp_var_list(tl);
        return [0,pp_decl(v),_tx_]}
      return 0}
    function pp_expr$1(tag,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:return _dx_;case 1:return _dy_;default:return _dz_}
      else
       switch(param[0])
        {case 0:var v=param[1];return v[2];
         case 1:var f=param[1];return f[2];
         case 2:
          var
           e2=param[2],
           e1=param[1],
           _to_=symbol(_dB_,symbol(pp_expr$1(tag,e2),_dA_));
          return symbol(_dC_,symbol(pp_expr$1(tag,e1),_to_));
         case 3:
          var
           e2$0=param[2],
           e1$0=param[1],
           _tp_=symbol(_dE_,symbol(pp_expr$1(tag,e2$0),_dD_));
          return symbol(_dF_,symbol(pp_expr$1(tag,e1$0),_tp_));
         case 4:
          var
           e=param[2],
           c=param[1],
           _tq_=symbol(_dH_,symbol(pp_expr$1(tag,e),_dG_));
          return symbol(_dI_,symbol(pp_expr$1(tag,c),_tq_));
         case 5:
          var
           e$0=param[2],
           c$0=param[1],
           _tr_=symbol(_dK_,symbol(pp_expr$1(tag,e$0),_dJ_));
          return symbol(_dL_,symbol(pp_expr$1(tag,c$0),_tr_));
         case 6:var e$1=param[1];return symbol(_dM_,pp_expr$1(tag,e$1));
         case 7:
          var
           e2$1=param[2],
           e1$1=param[1],
           _ts_=symbol(_dO_,symbol(pp_expr$1(1,e2$1),_dN_));
          return symbol(_dP_,symbol(pp_expr$1(1,e1$1),_ts_));
         case 8:
          var
           e2$2=param[2],
           e1$2=param[1],
           _tt_=symbol(_dR_,symbol(pp_expr$1(1,e2$2),_dQ_));
          return symbol(_dS_,symbol(pp_expr$1(1,e1$2),_tt_));
         case 9:
          var
           e2$3=param[3],
           e1$3=param[2],
           tag$0=param[1],
           _tu_=symbol(_dU_,symbol(pp_expr$1(tag$0,e2$3),_dT_));
          return symbol(_dV_,symbol(pp_expr$1(tag$0,e1$3),_tu_));
         case 10:
          var
           g2=param[2],
           g1=param[1],
           _tv_=symbol(_dX_,symbol(pp_expr$1(tag,g2),_dW_));
          return symbol(_dY_,symbol(pp_expr$1(tag,g1),_tv_));
         case 11:
          var
           g2$0=param[2],
           g1$0=param[1],
           _tw_=symbol(_d0_,symbol(pp_expr$1(tag,g2$0),_dZ_));
          return symbol(_d1_,symbol(pp_expr$1(tag,g1$0),_tw_));
         case 12:var g=param[1];return symbol(_d2_,pp_expr$1(tag,g));
         case 13:
          var v$0=param[1];
          switch(tag)
           {case 0:throw [0,Assert_failure,_du_];
            case 1:return caml_new_string("" + v$0);
            case 2:return string_of_bool(v$0);
            default:return v$0}
         default:var e$2=param[1];return symbol(pp_expr$1(3,e$2),_d3_)}}
    function pp_expr_list(tg,match)
     {if(tg)
       {var
         tl=match[2],
         v=match[1],
         tagl=tg[2],
         tag=tg[1],
         _tn_=pp_expr_list(tagl,tl);
        return [0,pp_expr$1(tag,v),_tn_]}
      return 0}
    function pp_meth(opt,param)
     {var id=param[3],tags=param[2],rtag=param[1];
      if(opt)var sth=opt[1],verbose=sth;else var verbose=0;
      if(verbose)
       {var _tm_=symbol(_d5_,symbol(pp_tag(rtag),_d4_));
        return symbol
                (id,symbol(_d7_,symbol(concat(_d6_,pp_tag_list(tags)),_tm_)))}
      return id}
    function pp_rhs(tag,param)
     {if(0 === param[0]){var e=param[1];return pp_expr$1(tag,e)}
      var
       exprl=param[4],
       value=param[3],
       meth=param[2],
       addr=param[1],
       _ti_=symbol(_eb_,symbol(concat(_ea_,pp_expr_list(meth[2],exprl)),_d$_));
      if(value)
       var v=value[1],_tj_=symbol(_ed_,symbol(pp_expr$1(1,v),_ec_));
      else
       var _tj_=_ef_;
      var
       _tk_=symbol(_tj_,_ti_),
       _tl_=symbol(_ee_,symbol(pp_meth(0,meth),_tk_));
      return symbol(pp_expr$1(3,addr),_tl_)}
    function pp_stm$0(indent,opt,tag,stm)
     {if(opt)var sth=opt[1],breakline=sth;else var breakline=1;
      if(typeof stm === "number")
       if(0 === stm)var _s6_=_eg_,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var _s6_=breakline?_ew_:_ex_;
      if(typeof stm === "number")
       switch(stm)
        {case 0:var _s7_=_eh_;break;
         case 1:var _s7_=_ej_;break;
         default:var _s7_=_ek_}
      else
       switch(stm[0])
        {case 0:
          var e=stm[1],_s7_=symbol(_em_,symbol(pp_rhs(tag,e),_el_));break;
         case 1:
          var
           stm$0=stm[3],
           rhs=stm[2],
           lhs=stm[1],
           _s__=pp_stm$0(indent,_en_,tag,stm$0);
          if(typeof stm$0 === "number")
           if(0 === stm$0)var _s$_=_eo_,switch$1=1;else var switch$1=0;
          else
           var switch$1=0;
          if(! switch$1)var _s$_=_eq_;
          var
           _ta_=symbol(_ep_,symbol(_s$_,_s__)),
           _tb_=symbol(pp_rhs(tag_of_lhs(lhs),rhs),_ta_);
          if(typeof lhs === "number")
           var _tc_=_d8_;
          else
           if(0 === lhs[0])
            var f=lhs[1],_tc_=symbol(f[2],_d9_);
           else
            var v=lhs[1],_tc_=symbol(v[2],_d__);
          var _s7_=symbol(_tc_,_tb_);
          break;
         default:
          var
           stm3=stm[4],
           stm2=stm[3],
           stm1=stm[2],
           c=stm[1],
           _td_=symbol(_es_,pp_stm$0(indent,_er_,tag,stm3)),
           _te_=symbol(mk_indent$0(indent),_td_),
           _tf_=symbol(_et_,symbol(pp_stm$0(indent + 1 | 0,0,tag,stm2),_te_)),
           _tg_=symbol(mk_indent$0(indent),_tf_),
           _th_=symbol(_eu_,symbol(pp_stm$0(indent + 1 | 0,0,tag,stm1),_tg_)),
           _s7_=symbol(_ev_,symbol(pp_expr$1(2,c),_th_))}
      var _s8_=symbol(_s7_,_s6_);
      if(typeof stm === "number")
       if(0 === stm)var _s9_=_ei_,switch$2=1;else var switch$2=0;
      else
       var switch$2=0;
      if(! switch$2)var _s9_=mk_indent$0(indent);
      return symbol(_s9_,_s8_)}
    function pp_block(indent,payable,tag,param)
     {var
       stm=param[3],
       lvl=param[2],
       vl=param[1],
       _sX_=symbol(mk_indent$0(indent),_ey_),
       _sY_=symbol(pp_stm$0(indent + 1 | 0,0,tag,stm),_sX_),
       _sZ_=pp_var_list(lvl),
       _s0_=
        symbol
         (_eB_,
          symbol
           (concat
             (_eA_,
              map
               (function(s)
                 {var _s5_=symbol(s,_ez_);
                  return symbol(mk_indent$0(indent + 1 | 0),_s5_)},
                _sZ_)),
            _sY_)),
       _s1_=payable?_eC_:_eJ_,
       _s2_=symbol(_s1_,_s0_),
       _s3_=0 === tag?_eD_:symbol(_eI_,symbol(pp_tag(tag),_eH_)),
       _s4_=symbol(_eE_,symbol(_s3_,_s2_));
      return symbol(_eG_,symbol(concat(_eF_,pp_var_list(vl)),_s4_))}
    function pp_a_contract(param)
     {var
       fields=param[4],
       fallback=param[3],
       methods=param[2],
       addr=param[1],
       indent=1;
      if(fallback)
       var
        b=fallback[1],
        _sQ_=symbol(_eN_,pp_block(indent,1,0,b)),
        _sR_=symbol(mk_indent$0(indent),_sQ_);
      else
       var _sR_=_eO_;
      var
       _sS_=symbol(_sR_,_eP_),
       indent$0=1,
       _sT_=
        symbol
         (_eQ_,
          symbol
           (concat
             (_eM_,
              map
               (function(param)
                 {var
                   payable=param[3],
                   b=param[2],
                   m=param[1],
                   _sV_=symbol(_eK_,pp_block(indent$0,payable,m[1],b)),
                   _sW_=symbol(_eL_,symbol(pp_meth(0,m),_sV_));
                  return symbol(mk_indent$0(indent$0),_sW_)},
                methods)),
            _sS_)),
       indent$1=1;
      return symbol
              (_eS_,
               symbol
                (addr,
                 symbol
                  (_eR_,
                   symbol
                    (concat
                      (_dw_,
                       map
                        (function(f$0)
                          {var f=f$0[1],_sU_=symbol(pp_decl(f),_dv_);
                           return symbol(mk_indent$0(indent$1),_sU_)},
                         fields)),
                     _sT_))))}
    function pp_configuration(l){return concat(_eT_,map(pp_a_contract,l))}
    function expr_list_of_var_list(param)
     {if(param)
       {var tl=param[2],hd=param[1];
        return [0,[0,hd],expr_list_of_var_list(tl)]}
      return 0}
    function any_method_decl_of_fallback(fb){return [0,fallback,fb,1]}
    var
     Fail=[248,_eV_,caml_fresh_oo_id(0)],
     Reject=[248,_eW_,caml_fresh_oo_id(0)];
    function best(err1,err2)
     {if(caml_string_equal(err1[1],_eX_))return err2;
      if(caml_string_equal(err2[1],_eY_))return err1;
      var _sM_=length(err2[2]);
      if(length(err1[2]) < _sM_)return err1;
      var _sN_=length(err2[2]);
      if(length(err1[2]) === _sN_)
       {var _sO_=err1[2],_sP_=symbol(_eZ_,err2[1]);
        return [0,symbol(err1[1],_sP_),_sO_]}
      return err2}
    function cfst(x,param){return x}
    function csnd(param,x){return x}
    function addel(l,el){return op(l,[0,el,0])}
    function remove_minspace(param)
     {if(param)
       {var _sL_=param[1];
        if(2 === _sL_[0])
         {var tl$0=param[2],x=_sL_[1];
          if(! (0 <= x))
           return op(_e0_,op([0,[2,- x | 0],0],remove_minspace(tl$0)))}
        var tl=param[2];
        return op([0,_sL_,0],remove_minspace(tl))}
      return 0}
    function get_tokens(lexer,file)
     {var streamt=caml_call1(lexer,file);
      function aux(acc,s)
       {try
         {var _sJ_=aux([0,next(s),acc],s);return _sJ_}
        catch(_sK_)
         {_sK_ = caml_wrap_exception(_sK_);
          if(_sK_ === Failure$0)return acc;
          throw _sK_}}
      return remove_minspace(rev(aux(0,streamt)))}
    function string_of_token(param)
     {switch(param[0])
       {case 0:var x=param[1];return symbol(_e1_,x);
        case 1:var x$0=param[1];return symbol(_e2_,x$0);
        case 2:var n=param[1];return symbol(_e3_,caml_new_string("" + n));
        case 3:var f=param[1];return symbol(_e4_,string_of_float(f));
        case 4:var s=param[1];return symbol(_e5_,s);
        default:var c=param[1];return symbol(_e6_,make$0(1,c))}}
    function print_token_list(l)
     {return concat
              (_e8_,
               map(function(t){return symbol(string_of_token(t),_e7_)},l))}
    function comb_parser(pars,f,s,tbl)
     {var
       match=caml_call2(pars,s,tbl),
       nt=match[4],
       error=match[3],
       nast=match[2],
       ns=match[1];
      try
       {var x=caml_call1(f,nast)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,s])]}
        throw exn}
      return [0,ns,x,error,nt]}
    function eof(s,t)
     {if(s)throw [0,Fail,[0,_e9_,s]];return [0,s,0,[0,_e__,s],t]}
    function const$0(kwd,f,s,tbl)
     {if(s)
       {var tl=s[2],t=s[1];
        if(caml_equal(kwd,t))
         {try
           {var x=caml_call1(f,t)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Reject){var msg=exn[2];throw [0,Fail,[0,msg,s]]}
            throw exn}
          return [0,tl,x,[0,_e$_,tl],tbl]}}
      throw [0,Fail,[0,symbol(string_of_token(kwd),_fa_),s]]}
    function kwd(str)
     {function _sE_(_sI_){return 0}
      var _sF_=[0,str];
      return function(_sG_,_sH_){return const$0(_sF_,_sE_,_sG_,_sH_)}}
    function option(p,s,tbl)
     {try
       {var
         match=caml_call2(p,s,tbl),
         ntbl=match[4],
         error$0=match[3],
         res=match[2],
         next=match[1],
         _sD_=[0,next,[0,res],error$0,ntbl];
        return _sD_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail){var error=exn[2];return [0,s,0,error,tbl]}
        throw exn}}
    function option2(d,p,s,tbl)
     {try
       {var
         match=caml_call2(p,s,tbl),
         ntbl=match[4],
         error$0=match[3],
         res=match[2],
         next=match[1],
         _sC_=[0,next,res,error$0,ntbl];
        return _sC_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var error=exn[2];return [0,s,d,best(error,[0,_fb_,s]),tbl]}
        throw exn}}
    function choice(p1,p2,s,tbl)
     {try
       {var _sB_=caml_call2(p1,s,tbl);return _sB_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var error1=exn[2];
          try
           {var _sA_=caml_call2(p2,s,tbl);return _sA_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Fail)
             {var error2=exn[2];throw [0,Fail,best(error1,error2)]}
            throw exn}}
        throw exn}}
    function choice_list(param)
     {if(param)
       {var _sv_=param[2],_sw_=param[1];
        if(_sv_)
         {var _sx_=choice_list(_sv_);
          return function(_sy_,_sz_){return choice(_sw_,_sx_,_sy_,_sz_)}}
        return _sw_}
      throw [0,Assert_failure,_fc_]}
    function concat$0(p1,p2,f,s,tbl)
     {var
       match=caml_call2(p1,s,tbl),
       tbl1=match[4],
       error1=match[3],
       ast1=match[2],
       rest1=match[1];
      try
       {var
         match$0=caml_call2(p2,rest1,tbl1),
         tbl2=match$0[4],
         error2$0=match$0[3],
         ast2=match$0[2],
         rest2=match$0[1];
        try
         {var x=caml_call2(f,ast1,ast2)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Reject)
           {var msg=exn[2];
            throw [0,Fail,best(best(error1,error2$0),[0,msg,s])]}
          throw exn}
        var _su_=[0,rest2,x,best(error1,error2$0),tbl2];
        return _su_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var error2=exn[2];throw [0,Fail,best(error1,error2)]}
        throw exn}}
    function kleenestar(p,empty_ast,f,s,t)
     {function aux(s1,acc,error,tbl)
       {try
         {var
           match=caml_call2(p,s1,tbl),
           ntbl=match[4],
           error1$0=match[3],
           ast1=match[2],
           rest1=match[1];
          try
           {var x=caml_call2(f,acc,ast1)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Reject)
             {var msg=exn[2];throw [0,Fail,best(error1$0,[0,msg,s1])]}
            throw exn}
          var _st_=aux(rest1,x,best(error1$0,error),ntbl);
          return _st_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Fail)
           {var error1=exn[2];return [0,s1,acc,best(error1,error),tbl]}
          throw exn}}
      return aux(s,empty_ast,[0,_fd_,s],t)}
    function x_cont(x_expr,x_binop,s)
     {function _sh_(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))}
      function _si_(_ss_){return x_cont(x_expr,x_binop,_ss_)}
      function _sj_(f,x,y){return caml_call2(f,y,x)}
      function _sk_(_sq_,_sr_){return concat$0(x_binop,x_expr,_sj_,_sq_,_sr_)}
      function _sl_(_so_,_sp_){return concat$0(_sk_,_si_,_sh_,_so_,_sp_)}
      function _sm_(x){return x}
      return function(_sn_){return option2(_sm_,_sl_,s,_sn_)}}
    function nelist(x_expr,x_binop)
     {function _sc_(x,f){return caml_call1(f,x)}
      function _sd_(_sg_){return x_cont(x_expr,x_binop,_sg_)}
      return function(_se_,_sf_){return concat$0(x_expr,_sd_,_sc_,_se_,_sf_)}}
    function pp_any_expr(param)
     {var e=param[2],t=param[1];return pp_expr$1(t,e)}
    function check_type(tag,param)
     {var e=param[2],t=param[1],match=eq_tag(tag,t);
      if(match)return e;
      var _sb_=symbol(_fe_,pp_tag(tag));
      throw [0,Reject,symbol(pp_expr$1(t,e),_sb_)]}
    function get_field(tbl,varname)
     {var tbl$0=tbl;
      for(;;)
       {if(tbl$0)
         {var _sa_=tbl$0[1];
          if(1 === _sa_[0])
           {var islocal=_sa_[2],match=_sa_[1],name=match[2],tag=match[1];
            if(caml_string_equal(varname,name))
             return [0,[0,[0,[0,tag,name]],islocal]]}
          var tbl$1=tbl$0[2],tbl$0=tbl$1;
          continue}
        return 0}}
    function add_field_to_table(tbl,param,is_local)
     {var
       match=param[1],
       fieldname=match[2],
       t=match[1],
       match$0=get_field(tbl,fieldname);
      if(match$0)
       {var match$1=match$0[1],is_local2=match$1[2];
        if(! is_local2)
         if(is_local)return [0,[1,[0,t,fieldname],is_local],tbl];
        throw [0,Reject,symbol(fieldname,_ff_)]}
      return [0,[1,[0,t,fieldname],is_local],tbl]}
    function add_fun_to_table(tbl$1,param)
     {var match$0=param[1],funname=match$0[3],l=match$0[2],t=match$0[1];
      if(caml_string_equal(funname,_fg_))throw [0,Reject,_fh_];
      var tbl=tbl$1;
      for(;;)
       {if(tbl)
         {var _r$_=tbl[1];
          if(2 === _r$_[0])
           {var match=_r$_[1],name=match[3],tagl=match[2],rettag=match[1];
            if(caml_string_equal(funname,name))
             var match$1=[0,[0,[0,rettag,tagl,name]]],switch$0=1;
            else
             var switch$0=0}
          else
           var switch$0=0;
          if(! switch$0){var tbl$0=tbl[2],tbl=tbl$0;continue}}
        else
         var match$1=0;
        if(match$1)
         {var match$2=match$1[1][1],l$0=match$2[2],match$3=eq_tag_list(l,l$0);
          if(match$3)throw [0,Reject,symbol(funname,_fi_)];
          return [0,[2,[0,t,l,funname]],tbl$1]}
        return [0,[2,[0,t,l,funname]],tbl$1]}}
    function get_contract(tbl,name)
     {var tbl$0=tbl;
      for(;;)
       {if(tbl$0)
         {var _r__=tbl$0[1];
          if(0 === _r__[0])
           {var name$0=_r__[1];
            if(caml_string_equal(name,name$0))return [0,name]}
          var tbl$1=tbl$0[2],tbl$0=tbl$1;
          continue}
        return 0}}
    function add_contract_to_table(tbl,name)
     {var match=get_contract(tbl,name);
      if(match)throw [0,Reject,symbol(_fk_,symbol(name,_fj_))];
      return [0,[0,name],tbl]}
    function remove_local_vars(tbl)
     {return caml_call1
              (find_all
                (function(param)
                  {if(1 === param[0])if(0 !== param[2])return 0;return 1}),
               tbl)}
    function plus(e1,e2)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[2,v1,v2]]}
      var _r9_=symbol(_fm_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r9_)]}
    function uminus(e)
     {if(1 === e[1]){var e$0=e[2];return [0,1,[6,e$0]]}
      throw [0,Reject,symbol(_fn_,pp_any_expr(e))]}
    function minus(e1,e2)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[3,v1,v2]]}
      var _r8_=symbol(_fo_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r8_)]}
    function mult(e1,e2)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[4,v1,v2]]}
      var _r7_=symbol(_fp_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r7_)]}
    function div(e1,e2)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[5,v1,v2]]}
      var _r6_=symbol(_fq_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r6_)]}
    function gt(e1,e2)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,2,[8,v1,v2]]}
      var _r5_=symbol(_fr_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r5_)]}
    function ge(e1,e2)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,2,[7,v1,v2]]}
      var _r4_=symbol(_fs_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r4_)]}
    function eq(e1,e2)
     {var v2=e2[2],t2=e2[1],v1=e1[2],t1=e1[1],match=eq_tag(t1,t2);
      if(match)return [0,2,[9,t1,v1,v2]];
      var _r3_=symbol(_ft_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r3_)]}
    function lt(e1,e2){return gt(e2,e1)}
    function le(e1,e2){return ge(e2,e1)}
    function andb(e1,e2)
     {if(2 === e1[1])
       if(2 === e2[1]){var v2=e2[2],v1=e1[2];return [0,2,[10,v1,v2]]}
      var _r2_=symbol(_fu_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r2_)]}
    function orb(e1,e2)
     {if(2 === e1[1])
       if(2 === e2[1]){var v2=e2[2],v1=e1[2];return [0,2,[11,v1,v2]]}
      var _r1_=symbol(_fv_,pp_any_expr(e2));
      throw [0,Reject,symbol(pp_any_expr(e1),_r1_)]}
    function notb(e)
     {if(2 === e[1]){var v=e[2];return [0,2,[12,v]]}
      throw [0,Reject,symbol(_fw_,pp_any_expr(e))]}
    function neq(e1,e2){return notb(eq(e1,e2))}
    function varname(s,t)
     {if(s)
       {var _r0_=s[1];
        if(1 === _r0_[0]){var tl=s[2],x=_r0_[1];return [0,tl,x,[0,_fy_,tl],t]}}
      throw [0,Fail,[0,_fx_,s]]}
    function couple(el1,el2){return [0,el1,el2]}
    function var_pars(tag,s,tbl)
     {try
       {var x=hd(s)}
      catch(_rZ_)
       {_rZ_ = caml_wrap_exception(_rZ_);
        if(_rZ_[1] === Failure)throw [0,Fail,[0,_fz_,s]];
        throw _rZ_}
      return const$0
              (x,
               function(param)
                {if(s)
                  {var _rV_=s[1];
                   if(1 === _rV_[0])
                    {var var$0=_rV_[1],match=get_field(tbl,var$0);
                     if(match)
                      {var
                        _rW_=match[1],
                        islocal=_rW_[2],
                        match$0=_rW_[1][1],
                        name=match$0[2],
                        tagfield=match$0[1];
                       if(eq_tag(tagfield,tag))
                        {var
                          _rX_=
                           0 === islocal?[1,[0,tagfield,name]]:[0,[0,tagfield,name]];
                         return _rX_}
                       var _rY_=symbol(_fB_,pp_tag(tag));
                       throw [0,Reject,symbol(pp_tag(tagfield),_rY_)]}
                     throw [0,Reject,symbol(var$0,_fC_)]}}
                 throw [0,Reject,_fA_]},
               s,
               tbl)}
    function value_pars(tag,s,tbl)
     {try
       {var t=hd(s)}
      catch(_rU_)
       {_rU_ = caml_wrap_exception(_rU_);
        if(_rU_[1] === Failure)throw [0,Fail,[0,_fL_,s]];
        throw _rU_}
      return const$0
              (t,
               function(match$0)
                {switch(tag)
                  {case 1:
                    if(2 === match$0[0]){var x=match$0[1];return [13,x]}break;
                   case 2:
                    if(0 === match$0[0])
                     {var _rT_=match$0[1];
                      if(! caml_string_notequal(_rT_,_fF_))return _fI_;
                      if(! caml_string_notequal(_rT_,_fG_))return _fH_}
                    break;
                   case 3:
                    if(1 === match$0[0])
                     {var x$0=match$0[1],match=get_contract(tbl,x$0);
                      if(match){var a=match[1];return [13,a]}
                      throw [0,Reject,symbol(_fK_,symbol(pp_tag(tag),_fJ_))]}
                    break
                   }
                 throw [0,Reject,symbol(_fE_,symbol(pp_tag(tag),_fD_))]},
               s,
               tbl)}
    function _fM_(param){return 0}
    function this_pars(_rR_,_rS_){return const$0(_fN_,_fM_,_rR_,_rS_)}
    function brackets_pars(pars)
     {var _rK_=kwd(_fO_),_rL_=kwd(_fP_);
      function _rM_(_rP_,_rQ_){return concat$0(_rL_,pars,csnd,_rP_,_rQ_)}
      return function(_rN_,_rO_){return concat$0(_rM_,_rK_,cfst,_rN_,_rO_)}}
    function _fQ_(param){return 1}
    var _fS_=kwd(_fR_),_fU_=kwd(_fT_),_fW_=kwd(_fV_);
    function _fX_(_rI_,_rJ_){return concat$0(_fW_,_fU_,csnd,_rI_,_rJ_)}
    function _fY_(_rG_,_rH_){return concat$0(_fX_,_fS_,csnd,_rG_,_rH_)}
    function msg_sender_pars(_rE_,_rF_)
     {return comb_parser(_fY_,_fQ_,_rE_,_rF_)}
    function _fZ_(param){return _f0_}
    var _f2_=kwd(_f1_),_f4_=kwd(_f3_),_f6_=kwd(_f5_);
    function _f7_(_rC_,_rD_){return concat$0(_f6_,_f4_,csnd,_rC_,_rD_)}
    function _f8_(_rA_,_rB_){return concat$0(_f7_,_f2_,csnd,_rA_,_rB_)}
    function msg_value_pars(_ry_,_rz_)
     {return comb_parser(_f8_,_fZ_,_ry_,_rz_)}
    function base(tag,s,tbl)
     {var
       _rs_=0,
       _rt_=[0,function(_rw_,_rx_){return value_pars(tag,_rw_,_rx_)},_rs_];
      return caml_call2
              (choice_list
                ([0,function(_ru_,_rv_){return var_pars(tag,_ru_,_rv_)},_rt_]),
               s,
               tbl)}
    function atomic_int_expr(s)
     {var _rf_=[0,brackets_pars(int_expr),0];
      function _rg_(param){return uminus}
      var
       _rh_=kwd(_f9_),
       _ri_=
        [0,
         function(_rq_,_rr_)
          {return concat$0(_rh_,atomic_int_expr,_rg_,_rq_,_rr_)},
         _rf_];
      function _rj_(expr){return [0,1,expr]}
      var _rk_=1;
      function _rl_(_ro_,_rp_){return base(_rk_,_ro_,_rp_)}
      return caml_call1
              (choice_list
                ([0,
                  msg_value_pars,
                  [0,
                   balance_pars,
                   [0,
                    function(_rm_,_rn_){return comb_parser(_rl_,_rj_,_rm_,_rn_)},
                    _ri_]]]),
               s)}
    function mul_int_expr(s)
     {return caml_call1(nelist(atomic_int_expr,mul_binop),s)}
    function int_expr(s){return caml_call1(nelist(mul_int_expr,add_binop),s)}
    function add_binop(s)
     {var _q9_=0;
      function _q__(param){return minus}
      var
       _q$_=
        [0,function(_rd_,_re_){return const$0(_f__,_q__,_rd_,_re_)},_q9_];
      function _ra_(param){return plus}
      return caml_call1
              (choice_list
                ([0,
                  function(_rb_,_rc_){return const$0(_f$_,_ra_,_rb_,_rc_)},
                  _q$_]),
               s)}
    function mul_binop(s)
     {var _q1_=0;
      function _q2_(param){return div}
      var
       _q3_=
        [0,function(_q7_,_q8_){return const$0(_ga_,_q2_,_q7_,_q8_)},_q1_];
      function _q4_(param){return mult}
      return caml_call1
              (choice_list
                ([0,
                  function(_q5_,_q6_){return const$0(_gb_,_q4_,_q5_,_q6_)},
                  _q3_]),
               s)}
    function atomic_bool_expr(s)
     {var _qy_=0;
      function _qz_(x,f){return caml_call1(f,x)}
      function _qA_(f,y,x){return caml_call2(f,x,y)}
      function _qB_(_qZ_,_q0_){return concat$0(cmpop,int_expr,_qA_,_qZ_,_q0_)}
      var
       _qC_=
        [0,
         function(_qX_,_qY_){return concat$0(int_expr,_qB_,_qz_,_qX_,_qY_)},
         _qy_];
      function _qD_(param){return notb}
      var
       _qE_=kwd(_gc_),
       _qF_=
        [0,
         function(_qV_,_qW_)
          {return concat$0(_qE_,atomic_bool_expr,_qD_,_qV_,_qW_)},
         _qC_],
       _qG_=kwd(_gd_),
       _qH_=kwd(_ge_);
      function _qI_(_qT_,_qU_){return concat$0(_qH_,bool_expr,csnd,_qT_,_qU_)}
      var
       _qJ_=
        [0,
         function(_qR_,_qS_){return concat$0(_qI_,_qG_,cfst,_qR_,_qS_)},
         _qF_];
      function _qK_(expr){return [0,2,expr]}
      var _qL_=2;
      function _qM_(_qP_,_qQ_){return base(_qL_,_qP_,_qQ_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_qN_,_qO_){return comb_parser(_qM_,_qK_,_qN_,_qO_)},
                  _qJ_]),
               s)}
    function cmpop(s)
     {var _qi_=0;
      function _qj_(param){return le}
      var
       _qk_=
        [0,function(_qw_,_qx_){return const$0(_gf_,_qj_,_qw_,_qx_)},_qi_];
      function _ql_(param){return lt}
      var
       _qm_=
        [0,function(_qu_,_qv_){return const$0(_gg_,_ql_,_qu_,_qv_)},_qk_];
      function _qn_(param){return ge}
      var
       _qo_=
        [0,function(_qs_,_qt_){return const$0(_gh_,_qn_,_qs_,_qt_)},_qm_];
      function _qp_(param){return gt}
      return caml_call1
              (choice_list
                ([0,
                  function(_qq_,_qr_){return const$0(_gi_,_qp_,_qq_,_qr_)},
                  _qo_]),
               s)}
    function eqop(s)
     {var _qa_=0;
      function _qb_(param){return neq}
      var
       _qc_=
        [0,function(_qg_,_qh_){return const$0(_gj_,_qb_,_qg_,_qh_)},_qa_];
      function _qd_(param){return eq}
      return caml_call1
              (choice_list
                ([0,
                  function(_qe_,_qf_){return const$0(_gk_,_qd_,_qe_,_qf_)},
                  _qc_]),
               s)}
    function eq_bool_expr(s)
     {return caml_call1
              (nelist
                (choice_list
                  ([0,atomic_bool_expr,[0,int_expr,[0,contract_expr,0]]]),
                 eqop),
               s)}
    function and_bool_expr(s)
     {return caml_call1(nelist(eq_bool_expr,and_binop),s)}
    function bool_expr(s){return caml_call1(nelist(and_bool_expr,or_binop),s)}
    function and_binop(s)
     {var _p8_=0;
      function _p9_(param){return andb}
      return caml_call1
              (choice_list
                ([0,
                  function(_p__,_p$_){return const$0(_gl_,_p9_,_p__,_p$_)},
                  _p8_]),
               s)}
    function or_binop(s)
     {var _p4_=0;
      function _p5_(param){return orb}
      return caml_call1
              (choice_list
                ([0,
                  function(_p6_,_p7_){return const$0(_gm_,_p5_,_p6_,_p7_)},
                  _p4_]),
               s)}
    function balance_pars(s)
     {function _pX_(a$0,param)
       {if(3 <= a$0[1]){var a=a$0[2];return [0,1,[14,a]]}
        throw [0,Reject,symbol(pp_any_expr(a$0),_fl_)]}
      var _pY_=kwd(_gn_),_pZ_=kwd(_go_);
      function _p0_(_p2_,_p3_)
       {return concat$0(contract_expr,_pZ_,cfst,_p2_,_p3_)}
      return function(_p1_){return concat$0(_p0_,_pY_,_pX_,s,_p1_)}}
    function contract_expr(s)
     {function aux(s)
       {var _pT_=[0,this_pars,[0,brackets_pars(aux),0]],_pU_=3;
        return caml_call1
                (choice_list
                  ([0,
                    msg_sender_pars,
                    [0,function(_pV_,_pW_){return base(_pU_,_pV_,_pW_)},_pT_]]),
                 s)}
      function _pR_(expr){return [0,3,expr]}
      return function(_pS_){return comb_parser(aux,_pR_,s,_pS_)}}
    function expr_pars(s)
     {var
       _pK_=kwd(_gp_),
       _pJ_=[0,int_expr,[0,bool_expr,[0,contract_expr,0]]],
       _pL_=kwd(_gq_);
      function _pM_(_pP_,_pQ_){return concat$0(_pL_,expr_pars,csnd,_pP_,_pQ_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_pN_,_pO_)
                   {return concat$0(_pM_,_pK_,cfst,_pN_,_pO_)},
                  _pJ_]),
               s)}
    function tag_pars(str,tag)
     {function _pF_(param){return [0,tag]}
      var _pG_=[0,str];
      return function(_pH_,_pI_){return const$0(_pG_,_pF_,_pH_,_pI_)}}
    var
     _gs_=[0,tag_pars(_gr_,3),0],
     _gu_=[0,tag_pars(_gt_,2),_gs_],
     type_pars=choice_list([0,tag_pars(_gv_,1),_gu_]);
    function field_pars(islocal,s,t)
     {var _pB_=kwd(_gw_);
      function _pC_(param,v){var t=param[1];return [0,[0,t,v]]}
      var
       match=
        concat$0
         (function(_pD_,_pE_)
           {return concat$0(type_pars,varname,_pC_,_pD_,_pE_)},
          _pB_,
          cfst,
          s,
          t),
       tbl=match[4],
       error=match[3],
       field=match[2],
       ns=match[1];
      try
       {var x=add_field_to_table(tbl,field,islocal)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,s])]}
        throw exn}
      return [0,ns,field,error,x]}
    function _gx_(param)
     {var match=param[1],id=match[2],tag=match[1];return [0,[0,tag,id]]}
    function _gy_(_pA_){return map(_gx_,_pA_)}
    var _gz_=0,_gA_=0;
    function _gB_(_py_,_pz_){return field_pars(_gA_,_py_,_pz_)}
    function _gC_(_pw_,_px_){return kleenestar(_gB_,_gz_,addel,_pw_,_px_)}
    function fields_pars(_pu_,_pv_){return comb_parser(_gC_,_gy_,_pu_,_pv_)}
    function expr_list_of_any_expr_list(param)
     {if(param)
       {var
         tl=param[2],
         match=param[1],
         e=match[2],
         t=match[1],
         match$0=expr_list_of_any_expr_list(tl),
         es=match$0[2],
         ts=match$0[1];
        return [0,[0,t,ts],[0,e,es]]}
      return _gD_}
    var _gE_=0,_gG_=kwd(_gF_);
    function _gH_(_ps_,_pt_){return concat$0(_gG_,expr_pars,csnd,_ps_,_pt_)}
    function _gI_(_pq_,_pr_){return kleenestar(_gH_,_gE_,addel,_pq_,_pr_)}
    function _gJ_(_po_,_pp_){return concat$0(expr_pars,_gI_,cons,_po_,_pp_)}
    var
     _gK_=0,
     _gL_=
      brackets_pars(function(_pm_,_pn_){return option2(_gK_,_gJ_,_pm_,_pn_)});
    function parse_any_expr_list(_pk_,_pl_)
     {return comb_parser(_gL_,expr_list_of_any_expr_list,_pk_,_pl_)}
    function ident_pars(s,t)
     {if(s)
       {var _pj_=s[1];
        if(1 === _pj_[0]){var tl=s[2],i=_pj_[1];return [0,tl,i,[0,_gN_,tl],t]}}
      throw [0,Fail,[0,_gM_,s]]}
    function dot_value_pars(s,t)
     {function _o9_(x)
       {var t=1;
        if(x)
         {var v=x[1],e=v[2],texp=v[1],match=eq_tag(texp,t);
          return match?[0,e]:0}
        return 0}
      var _o__=brackets_pars(int_expr),_o$_=kwd(_gO_),_pa_=kwd(_gP_);
      function _pb_(_ph_,_pi_){return concat$0(_pa_,_o$_,csnd,_ph_,_pi_)}
      function _pc_(_pf_,_pg_){return concat$0(_pb_,_o__,csnd,_pf_,_pg_)}
      return comb_parser
              (function(_pd_,_pe_){return option(_pc_,_pd_,_pe_)},_o9_,s,t)}
    function rhs_pars(tag)
     {var _oR_=0;
      function _oK_(param)
       {var
         params=param[2],
         _o8_=param[1],
         value=_o8_[2],
         match=_o8_[1],
         name=match[2],
         addr=match[1],
         addr$0=check_type(3,addr),
         exprs=params[2],
         tags=params[1],
         name$0=[0,tag,tags,name];
        return [1,addr$0,name$0,value,exprs]}
      var _oL_=kwd(_gQ_);
      function _oM_(_o6_,_o7_)
       {return concat$0(contract_expr,_oL_,cfst,_o6_,_o7_)}
      function _oN_(_o4_,_o5_){return option2(_gR_,_oM_,_o4_,_o5_)}
      function _oO_(_o2_,_o3_)
       {return concat$0(_oN_,ident_pars,couple,_o2_,_o3_)}
      function _oP_(_o0_,_o1_)
       {return concat$0(_oO_,dot_value_pars,couple,_o0_,_o1_)}
      function _oQ_(_oY_,_oZ_)
       {return concat$0(_oP_,parse_any_expr_list,couple,_oY_,_oZ_)}
      var
       _oS_=
        [0,function(_oW_,_oX_){return comb_parser(_oQ_,_oK_,_oW_,_oX_)},_oR_];
      function _oT_(expr){return [0,check_type(tag,expr)]}
      return choice_list
              ([0,
                function(_oU_,_oV_)
                 {return comb_parser(expr_pars,_oT_,_oU_,_oV_)},
                _oS_])}
    function stm_pars(tag,rettag,s,t)
     {var
       _nq_=0,
       _nr_=
        [0,
         function(s,t)
          {if(0 === rettag)return [0,s,0,[0,_gW_,s],t];
           if(0 === tag)return [0,s,1,[0,_gX_,s],t];
           throw [0,Fail,[0,_gY_,s]]},
         _nq_],
       _ns_=kwd(_g2_);
      function _nt_(_oI_,_oJ_){return stm_pars(tag,rettag,_oI_,_oJ_)}
      function _nu_(_oG_,_oH_){return concat$0(_nt_,_ns_,cfst,_oG_,_oH_)}
      var
       _nv_=kwd(_g3_),
       _nw_=
        [0,
         function(_oE_,_oF_){return concat$0(_nv_,_nu_,csnd,_oE_,_oF_)},
         _nr_];
      function _nx_(param)
       {var
         stm3=param[2],
         _oD_=param[1],
         stm2=_oD_[2],
         match=_oD_[1],
         stm1=match[2],
         bexpr=match[1],
         default$0=0;
        if(stm2)var v=stm2[1],stm2$0=v;else var stm2$0=default$0;
        return [2,check_type(2,bexpr),stm1,stm2$0,stm3]}
      function _ny_(_oB_,_oC_){return stm_pars(tag,rettag,_oB_,_oC_)}
      var _nz_=0;
      function _nA_(_oz_,_oA_){return stm_pars(tag,_nz_,_oz_,_oA_)}
      var _nB_=kwd(_g4_);
      function _nC_(_ox_,_oy_){return concat$0(_nB_,_nA_,csnd,_ox_,_oy_)}
      function _nD_(_ov_,_ow_){return option(_nC_,_ov_,_ow_)}
      var _nE_=0;
      function _nF_(_ot_,_ou_){return stm_pars(tag,_nE_,_ot_,_ou_)}
      var _nG_=kwd(_g5_);
      function _nH_(_or_,_os_){return concat$0(_nG_,bool_expr,csnd,_or_,_os_)}
      function _nI_(_op_,_oq_){return concat$0(_nH_,_nF_,couple,_op_,_oq_)}
      function _nJ_(_on_,_oo_){return concat$0(_nI_,_nD_,couple,_on_,_oo_)}
      function _nK_(_ol_,_om_){return concat$0(_nJ_,_ny_,couple,_ol_,_om_)}
      var
       _nL_=
        [0,function(_oj_,_ok_){return comb_parser(_nK_,_nx_,_oj_,_ok_)},_nw_],
       _nM_=
        [0,
         function(s,t)
          {var
            _n5_=kwd(_g6_),
            match=
             option
              (function(_oh_,_oi_)
                {return concat$0(varname,_n5_,cfst,_oh_,_oi_)},
               s,
               t),
            t1=match[4],
            error1=match[3],
            var$0=match[2],
            s1=match[1];
           function aux(lhstag,lhs,s1,t1)
            {function _n$_(_of_,_og_){return stm_pars(tag,rettag,_of_,_og_)}
             var
              _oa_=kwd(_g7_),
              _ob_=rhs_pars(lhstag),
              _oc_=
               concat$0
                (function(_od_,_oe_)
                  {return concat$0(_ob_,_oa_,cfst,_od_,_oe_)},
                 _n$_,
                 couple,
                 s1,
                 t1),
              t2=_oc_[4],
              error2=_oc_[3],
              match=_oc_[2],
              cont=match[2],
              rhs=match[1],
              s2=_oc_[1];
             return [0,
                     s2,
                     [1,lhs,rhs,cont],
                     best(best(error1,error2),[0,_g8_,s2]),
                     t2]}
           if(var$0)
            var v=var$0[1],match$0=[0,get_field(t1,v)];
           else
            var match$0=0;
           if(match$0)
            {var _n6_=match$0[1];
             if(_n6_)
              {var _n7_=_n6_[1],_n8_=_n7_[1][1],_n9_=_n8_[2],_n__=_n8_[1];
               return 0 === _n7_[2]
                       ?aux(_n__,[0,[0,_n__,_n9_]],s1,t1)
                       :aux(_n__,[1,[0,_n__,_n9_]],s1,t1)}
             throw [0,Fail,best([0,_g9_,s],error1)]}
           return aux(0,0,s1,t1)},
         _nL_];
      function _nk_(rhs,param)
       {if(rhs){var rhs$0=rhs[1];return [0,rhs$0]}
        if(0 === tag)return 1;
        throw [0,Reject,symbol(_gZ_,pp_tag(tag))]}
      var _nl_=kwd(_g0_),_nm_=rhs_pars(tag);
      function _nn_(_n3_,_n4_){return option(_nm_,_n3_,_n4_)}
      var _no_=kwd(_g1_);
      function _np_(_n1_,_n2_){return concat$0(_no_,_nn_,csnd,_n1_,_n2_)}
      var
       _nN_=
        [0,
         function(_nZ_,_n0_){return concat$0(_np_,_nl_,_nk_,_nZ_,_n0_)},
         _nM_];
      return caml_call2
              (choice_list
                ([0,
                  function(s,t)
                   {function _nO_(param,_nY_){return 2}
                    var
                     _nP_=kwd(_gS_),
                     _nQ_=kwd(_gT_),
                     _nR_=kwd(_gU_),
                     _nS_=kwd(_gV_);
                    function _nT_(_nW_,_nX_)
                     {return concat$0(_nS_,_nR_,csnd,_nW_,_nX_)}
                    return concat$0
                            (function(_nU_,_nV_)
                              {return concat$0(_nT_,_nQ_,csnd,_nU_,_nV_)},
                             _nP_,
                             _nO_,
                             s,
                             t)},
                  _nN_]),
               s,
               t)}
    function add_local_var(tbl,param)
     {var tbl$0=tbl,param$0=param;
      for(;;)
       {var _nj_=param$0[1];
        if(_nj_)
         {var
           tl=_nj_[2],
           h=_nj_[1],
           param$1=[0,tl],
           tbl$1=add_field_to_table(tbl$0,[0,h],1),
           tbl$0=tbl$1,
           param$0=param$1;
          continue}
        return tbl$0}}
    function get_taglist(param)
     {if(param)
       {var tl=param[2],match=param[1],t=match[1];
        return [0,t,get_taglist(tl)]}
      return 0}
    function varlist_append(l1,l2)
     {var _ni_=l1[1];
      if(_ni_)
       {var tl=_ni_[2],hd=_ni_[1],match=varlist_append([0,tl],l2),l=match[1];
        return [0,[0,hd,l]]}
      return l2}
    function tagged_var_list_of_any_var_list(param)
     {var _nh_=param[1];
      if(_nh_)
       {var
         tl=_nh_[2],
         v=_nh_[1],
         match=tagged_var_list_of_any_var_list([0,tl]),
         vs=match[2],
         tags=match[1];
        return [0,[0,v[1],tags],[0,v,vs]]}
      return _g__}
    function _g$_(param,s){var t=param[1];return [0,[0,[0,t,s],0]]}
    function pars_varlist_singleton(_nf_,_ng_)
     {return concat$0(type_pars,varname,_g$_,_nf_,_ng_)}
    function parameter_pars(s,t)
     {var _m5_=kwd(_hb_);
      function _m6_(_nd_,_ne_)
       {return concat$0(_m5_,pars_varlist_singleton,csnd,_nd_,_ne_)}
      function _m7_(_nb_,_nc_)
       {return kleenestar(_m6_,_ha_,varlist_append,_nb_,_nc_)}
      function _m8_(_m$_,_na_)
       {return concat$0(pars_varlist_singleton,_m7_,varlist_append,_m$_,_na_)}
      var
       match=
        caml_call2
         (brackets_pars
           (function(_m9_,_m__){return option2(_hc_,_m8_,_m9_,_m__)}),
          s,
          t),
       nt=match[4],
       error=match[3],
       vl=match[2],
       ns=match[1];
      try
       {var x=add_local_var(nt,vl)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,ns])]}
        throw exn}
      return [0,ns,vl,error,x]}
    function vars_pars(s,t)
     {var
       _m2_=kwd(_he_),
       match=
        kleenestar
         (function(_m3_,_m4_)
           {return concat$0(pars_varlist_singleton,_m2_,cfst,_m3_,_m4_)},
          _hd_,
          varlist_append,
          s,
          t),
       nt=match[4],
       error=match[3],
       vl=match[2],
       ns=match[1];
      try
       {var x=add_local_var(nt,vl)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best(error,[0,msg,ns])]}
        throw exn}
      return [0,ns,vl,error,x]}
    function block_pars(opt,tag,vl,s,t)
     {if(opt)var sth=opt[1],check_payable=sth;else var check_payable=0;
      var _mD_=kwd(_hf_),_mE_=1;
      function _mF_(_m0_,_m1_){return stm_pars(tag,_mE_,_m0_,_m1_)}
      var _mG_=kwd(_hg_);
      function _mH_(param)
       {if(param)return 1;if(check_payable)throw [0,Reject,_hh_];return 0}
      var _mI_=kwd(_hi_);
      function _mJ_(_mY_,_mZ_){return option(_mI_,_mY_,_mZ_)}
      function _mK_(_mW_,_mX_){return comb_parser(_mJ_,_mH_,_mW_,_mX_)}
      function _mL_(_mU_,_mV_){return concat$0(_mK_,_mG_,cfst,_mU_,_mV_)}
      function _mM_(_mS_,_mT_)
       {return concat$0(_mL_,vars_pars,couple,_mS_,_mT_)}
      var
       _mN_=
        concat$0
         (function(_mQ_,_mR_){return concat$0(_mM_,_mF_,couple,_mQ_,_mR_)},
          _mD_,
          cfst,
          s,
          t),
       nt2=_mN_[4],
       error2=_mN_[3],
       _mO_=_mN_[2],
       stm=_mO_[2],
       _mP_=_mO_[1],
       match=_mP_[2],
       lvl=match[1],
       payable=_mP_[1],
       ns2=_mN_[1];
      return [0,ns2,[0,[0,vl,lvl,stm],payable],error2,remove_local_vars(nt2)]}
    function any_meth_pars(s,t)
     {var _mj_=brackets_pars(type_pars),_mk_=kwd(_hj_);
      function _ml_(_mB_,_mC_){return concat$0(_mk_,_mj_,csnd,_mB_,_mC_)}
      function _mm_(_mz_,_mA_){return option2(_hk_,_ml_,_mz_,_mA_)}
      var _mn_=kwd(_hl_);
      function _mo_(_mx_,_my_){return concat$0(_mn_,varname,csnd,_mx_,_my_)}
      var
       _mp_=
        concat$0
         (function(_mv_,_mw_)
           {return concat$0(_mo_,parameter_pars,couple,_mv_,_mw_)},
          _mm_,
          couple,
          s,
          t),
       nt1=_mp_[4],
       error1=_mp_[3],
       _mq_=_mp_[2],
       t1=_mq_[2][1],
       _mr_=_mq_[1],
       match=_mr_[2],
       vl=match[1],
       name=_mr_[1],
       ns1=_mp_[1];
      try
       {var nt1$0=add_fun_to_table(nt1,[0,[0,t1,get_taglist(vl),name]])}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Reject)
         {var msg=exn[2];throw [0,Fail,best([0,msg,s],error1)]}
        throw exn}
      var
       _ms_=block_pars(0,t1,vl,ns1,nt1$0),
       nt2=_ms_[4],
       error2=_ms_[3],
       match$0=_ms_[2],
       payable=match$0[2],
       block=match$0[1],
       ns2=_ms_[1],
       _mt_=remove_local_vars(nt2),
       _mu_=best(error1,error2);
      return [0,ns2,[0,[0,t1,get_taglist(vl),name],block,payable],_mu_,_mt_]}
    function methods_pars(s)
     {var _mh_=0;
      return function(_mi_)
       {return kleenestar(any_meth_pars,_mh_,addel,s,_mi_)}}
    function _hm_(param)
     {var _mg_=param[1];
      if(0 === param[2])throw [0,Assert_failure,_hn_];
      return _mg_}
    var _ho_=0,_hp_=0;
    function _hr_(_me_,_mf_){return block_pars(_hq_,_hp_,_ho_,_me_,_mf_)}
    var _ht_=kwd(_hs_),_hv_=kwd(_hu_),_hx_=kwd(_hw_);
    function _hy_(_mc_,_md_){return concat$0(_hx_,_hv_,cfst,_mc_,_md_)}
    function _hz_(_ma_,_mb_){return concat$0(_hy_,_ht_,cfst,_ma_,_mb_)}
    function _hA_(_l__,_l$_){return concat$0(_hz_,_hr_,csnd,_l__,_l$_)}
    function fallback_pars(_l8_,_l9_){return comb_parser(_hA_,_hm_,_l8_,_l9_)}
    function actor_pars(s,t)
     {function _lJ_(param)
       {var
         fallback=param[2],
         _l7_=param[1],
         methods=_l7_[2],
         match=_l7_[1],
         fields=match[2],
         name=match[1];
        return [0,name,methods,fallback,fields]}
      var _lK_=kwd(_hB_);
      function _lL_(_l5_,_l6_){return option(fallback_pars,_l5_,_l6_)}
      var _lM_=kwd(_hC_),_lN_=kwd(_hD_);
      function _lO_(_l3_,_l4_){return concat$0(_lN_,varname,csnd,_l3_,_l4_)}
      function _lP_(_l1_,_l2_){return concat$0(_lO_,_lM_,cfst,_l1_,_l2_)}
      function _lQ_(_lZ_,_l0_)
       {return concat$0(_lP_,fields_pars,couple,_lZ_,_l0_)}
      function _lR_(_lX_,_lY_)
       {return concat$0(_lQ_,methods_pars,couple,_lX_,_lY_)}
      function _lS_(_lV_,_lW_){return concat$0(_lR_,_lL_,couple,_lV_,_lW_)}
      var
       match=
        comb_parser
         (function(_lT_,_lU_){return concat$0(_lS_,_lK_,cfst,_lT_,_lU_)},
          _lJ_,
          s,
          t),
       tbl=match[4],
       error=match[3],
       ast=match[2],
       s$0=match[1];
      return [0,
              s$0,
              ast,
              error,
              caml_call1
               (find_all(function(param){return 0 === param[0]?1:0}),tbl)]}
    var _hE_=0;
    function _hF_(_lH_,_lI_)
     {return kleenestar(actor_pars,_hE_,addel,_lH_,_lI_)}
    function configuration_pars(_lF_,_lG_)
     {return concat$0(_hF_,eof,cfst,_lF_,_lG_)}
    var lexer=make_lexer(_hG_);
    function initialize_table_with_contracts(tokens)
     {function skip_to_end_of_contract(n,param)
       {var n$0=n,param$0=param;
        for(;;)
         {if(param$0)
           {var _lD_=param$0[1];
            if(0 === _lD_[0])
             {var _lE_=_lD_[1];
              if(! caml_string_notequal(_lE_,_hH_))
               {var
                 param$2=param$0[2],
                 n$2=n$0 + 1 | 0,
                 n$0=n$2,
                 param$0=param$2;
                continue}
              if(! caml_string_notequal(_lE_,_hI_))
               {var tl=param$0[2];
                if(0 === n$0)return tl;
                var n$1=n$0 - 1 | 0,n$0=n$1,param$0=tl;
                continue}}
            var param$1=param$0[2],param$0=param$1;
            continue}
          throw [0,Fail,_hJ_]}}
      function aux(acc,l)
       {var acc$0=acc,l$0=l;
        for(;;)
         {if(l$0)
           {var _lx_=l$0[1];
            if(0 === _lx_[0])
             if(! caml_string_notequal(_lx_[1],_hK_))
              {var _ly_=l$0[2];
               if(_ly_)
                {var _lz_=_ly_[1];
                 if(1 === _lz_[0])
                  {var _lA_=_ly_[2];
                   if(_lA_)
                    {var _lB_=_lA_[1];
                     if(0 === _lB_[0])
                      {var _lC_=_lz_[1];
                       if(! caml_string_notequal(_lB_[1],_hM_))
                        {var tl=_lA_[2];
                         try
                          {var acc$1=add_contract_to_table(acc$0,_lC_)}
                         catch(exn$0)
                          {exn$0 = caml_wrap_exception(exn$0);
                           if(exn$0[1] === Reject)
                            {var msg=exn$0[2];throw [0,Fail,[0,msg,l$0]]}
                           throw exn$0;
                           var exn=exn$0}
                         var l$1=skip_to_end_of_contract(0,tl),acc$0=acc$1,l$0=l$1;
                         continue}}}}}}
            throw [0,Fail,[0,_hL_,l$0]]}
          return acc$0}}
      return rev(aux(0,tokens))}
    function test_stream(f,stream)
     {try
       {var
         tokens=get_tokens(lexer,stream),
         tbl=initialize_table_with_contracts(tokens),
         match$0=configuration_pars(tokens,tbl),
         conf=match$0[2],
         _lw_=caml_call1(f,conf);
        return _lw_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Fail)
         {var match=exn[2],l=match[2],msg=match[1];
          return symbol
                  (_hP_,
                   symbol(_hO_,symbol(msg,symbol(_hN_,print_token_list(l)))))}
        return symbol(_hQ_,to_string(exn))}}
    function test_string(f,s)
     {var
       count=[0,0],
       stream=
        from
         (function(param)
           {var c=count[1];
            return c < caml_ml_string_length(s)
                    ?(count[1]++,[0,caml_string_get(s,c)])
                    :0});
      return test_stream(f,stream)}
    function retype_stm(s)
     {if(typeof s === "number")
       switch(s){case 0:return s;case 1:return s;default:return s}
      else
       switch(s[0])
        {case 0:return s;
         case 1:
          var cont=s[3],rhs=s[2],lhs=s[1];return [1,lhs,rhs,retype_stm(cont)];
         default:
          var cont$0=s[4],stmb=s[3],stma=s[2],g=s[1];
          return [2,g,stma,stmb,retype_stm(cont$0)]}}
    function stm_concat(stm1,stm2)
     {if(typeof stm1 === "number")
       switch(stm1){case 0:return stm2;case 1:return stm1;default:return stm1}
      else
       switch(stm1[0])
        {case 0:return stm1;
         case 1:
          var cont=stm1[3],rhs=stm1[2],lhs=stm1[1];
          return [1,lhs,rhs,stm_concat(cont,stm2)];
         default:
          var
           cont$0=stm1[4],
           stmb=stm1[3],
           stma=stm1[2],
           g=stm1[1],
           cont$1=stm_concat(cont$0,stm2),
           _lv_=retype_stm(stm_concat(stmb,cont$1));
          return [2,g,retype_stm(stm_concat(stma,cont$1)),_lv_,2]}}
    function norm_stm(addr,params,locals,payable,stm)
     {if(typeof stm !== "number")
       switch(stm[0])
        {case 1:
          var
           cont=stm[3],
           rhs=stm[2],
           lhs=stm[1],
           match=norm_stm(addr,params,locals,payable,cont),
           cont$0=match[2],
           meths=match[1],
           make_cont=
            function(param)
             {var
               match=
                tagged_var_list_of_any_var_list
                 (varlist_append([0,params],[0,locals])),
               vars=match[2],
               varstags=match[1];
              if(typeof lhs === "number")
               var _lt_=_hR_;
              else
               if(0 === lhs[0])
                var v=lhs[1],_lt_=[0,[0,lhs],[0,v[1],[0,v]]];
               else
                var v$0=lhs[1],_lt_=[0,[0,lhs],[0,v$0[1],[0,v$0]]];
              var
               match$0=_lt_[2],
               ret_param=match$0[2],
               lhs_tag=match$0[1],
               klhs=_lt_[1],
               varstags$0=[0,lhs_tag,varstags],
               retparam=[0,lhs_tag,_hS_],
               fparams=[0,retparam,vars],
               _lu_=
                symbol(_hT_,caml_new_string("" + caml_hash(10,100,0,cont$0))),
               sname=symbol(addr[3],_lu_),
               name=[0,addr[1],varstags$0,sname],
               aparams=[0,ret_param,expr_list_of_var_list(vars)],
               cont=
                fold
                 (cont$0,
                  function(klhs){return [1,klhs,[0,[0,retparam]],cont$0]},
                  klhs);
              return [0,
                      [0,[0,name,[0,fparams,0,cont],payable],meths],
                      [1,lhs,rhs,[0,[1,0,name,0,aparams]]]]};
          if(typeof lhs === "number")
           {if(typeof cont$0 === "number")
             if(1 === cont$0)return [0,meths,[0,rhs]]}
          else
           if(1 === lhs[0])
            if(typeof cont$0 !== "number" && 0 === cont$0[0])
             {var _lo_=cont$0[1],_lp_=lhs[1];
              if(0 === _lo_[0])
               {var _lq_=_lo_[1];
                if(typeof _lq_ !== "number" && 0 === _lq_[0])
                 {var v=_lq_[1],match$0=eq_tag(_lp_[1],v[1]);
                  if(match$0)
                   if(caml_string_equal(_lp_[2],v[2]))return [0,meths,[0,rhs]];
                  return make_cont(0)}}}
          return make_cont(0);
         case 2:
          var
           cont$1=stm[4],
           stm2=stm[3],
           stm1=stm[2],
           g=stm[1],
           match$1=
            norm_stm(addr,params,locals,payable,stm_concat(stm1,cont$1)),
           stm1$0=match$1[2],
           meths1=match$1[1],
           match$2=
            norm_stm(addr,params,locals,payable,stm_concat(stm2,cont$1)),
           stm2$0=match$2[2],
           meths2=match$2[1],
           _lr_=retype_stm(stm2$0),
           _ls_=[2,g,retype_stm(stm1$0),_lr_,2];
          return [0,op(meths1,meths2),_ls_]
         }
      return [0,0,stm]}
    function norm_block(addr,payable,param)
     {var
       stm=param[3],
       locals=param[2],
       params=param[1],
       match=norm_stm(addr,params,locals,payable,stm),
       stm$0=match[2],
       meths=match[1];
      return [0,meths,[0,params,locals,stm$0]]}
    function norm_methods(param)
     {if(param)
       {var
         tl=param[2],
         match=param[1],
         payable=match[3],
         block=match[2],
         name=match[1],
         match$0=norm_block(name,payable,block),
         block$0=match$0[2],
         meths=match$0[1];
        return op(meths,op([0,[0,name,block$0,payable],0],norm_methods(tl)))}
      return 0}
    function norm_a_contract(param)
     {var
       fields=param[4],
       fallback=param[3],
       meths=param[2],
       addr=param[1],
       meths1=norm_methods(meths);
      if(fallback)
       var
        fb=fallback[1],
        match=norm_block(_hU_,1,fb),
        fb$0=match[2],
        meths2=match[1],
        meths2$0=meths2,
        fallback$0=[0,fb$0];
      else
       var meths2$0=0,fallback$0=0;
      return [0,addr,op(meths1,meths2$0),fallback$0,fields]}
    function normalize(_ln_){return map(norm_a_contract,_ln_)}
    var Cycle=[248,_hV_,caml_fresh_oo_id(0)];
    function get_bound(f,m$0,is_tail$2,param$1)
     {var
       stack=param$1[2],
       tbl=param$1[1],
       is_tail=is_tail$2,
       acc=0,
       param$0=stack;
      for(;;)
       {if(param$0)
         {var tl=param$0[2],x=param$0[1],is_tail$0=x[2],m=x[1];
          if(! caml_equal(m$0,m))
           {var
             acc$0=[0,x,acc],
             is_tail$1=is_tail?is_tail$0:is_tail,
             is_tail=is_tail$1,
             acc=acc$0,
             param$0=tl;
            continue}
          var
           match$0=
            [0,-467719034,[0,is_tail,op([0,x,acc],[0,[0,m$0,is_tail],0])]]}
        else
         var match$0=419380353;
        if(typeof match$0 === "number")
         {var param=tbl;
          for(;;)
           {if(param)
             {var l=param[2],match=param[1],b=match[2],a=match[1];
              if(0 !== caml_compare(a,m$0)){var param=l;continue}
              var match$1=[0,b]}
            else
             var match$1=0;
            if(match$1){var b$0=match$1[1];return [0,tbl,b$0]}
            var
             match$2=caml_call2(f,m$0,[0,tbl,[0,[0,m$0,is_tail$2],stack]]),
             b$1=match$2[2],
             tbl$0=match$2[1];
            return [0,[0,[0,m$0,b$1],tbl$0],b$1]}}
        var _lm_=match$0[2];
        if(0 === _lm_[1]){var cycle=_lm_[2];throw [0,Cycle,cycle]}
        return [0,tbl,0]}}
    function get_bounds_rhs(f,cfg,is_tail,this$0,rhs,param)
     {var stack=param[2],tbl=param[1];
      if(0 === rhs[0])return [0,tbl,0];
      var
       value=rhs[3],
       meth=rhs[2],
       aexpr=rhs[1],
       payable=0 !== value?1:0,
       methods=
        flatten
         (map
           (function(param)
             {var fb=param[3],ms=param[2],a$0=param[1];
              if(typeof aexpr === "number")
               if(0 === aexpr)
                var _le_=caml_string_equal(a$0,this$0),switch$0=1;
               else
                var switch$0=0;
              else
               if(13 === aexpr[0])
                var a=aexpr[1],_le_=caml_string_equal(a$0,a),switch$0=1;
               else
                var switch$0=0;
              if(! switch$0)var _le_=1;
              if(_le_)
               {var
                 _lf_=
                  caml_call1
                   (find_all
                     (function(param)
                       {var
                         m=param[1],
                         _lk_=caml_string_equal(meth[3],m[3]),
                         _ll_=_lk_?0 !== eq_tag_list(meth[2],m[2])?1:0:_lk_;
                        return _ll_}),
                    ms);
                if(_lf_)
                 {if(_lf_[2])throw [0,Assert_failure,_eU_];
                  var m=_lf_[1],matched=[0,[0,a$0,m],0]}
                else
                 if(fb)
                  var
                   fb$0=fb[1],
                   matched=[0,[0,a$0,any_method_decl_of_fallback(fb$0)],0];
                 else
                  var matched=0;
                return caml_call1
                        (find_all
                          (function(param)
                            {var
                              match=param[2],
                              payable$0=match[3],
                              m=match[1],
                              _lg_=1 - payable,
                              _lh_=_lg_ || payable$0;
                             if(_lh_)
                              var
                               _li_=0 !== eq_tag(meth[1],0)?1:0,
                               _lj_=_li_ || (0 !== eq_tag(meth[1],m[1])?1:0);
                             else
                              var _lj_=_lh_;
                             return _lj_}),
                         matched)}
              return 0},
            cfg)),
       _ld_=[0,tbl,0];
      return fold_left
              (function(param,mdecl)
                {var
                  b=param[2],
                  tbl=param[1],
                  match=get_bound(f,mdecl,is_tail,[0,tbl,stack]),
                  b1=match[2],
                  tbl$0=match[1];
                 return [0,tbl$0,max(b,b1)]},
               _ld_,
               methods)}
    function get_bounds_stm(f,cfg,addr,stm,tbls)
     {var stm$0=stm;
      for(;;)
       {var stack=tbls[2],tbl=tbls[1];
        if(typeof stm$0 === "number")
         {if(0 !== stm$0)return [0,tbl,0]}
        else
         switch(stm$0[0])
          {case 0:
            var rhs=stm$0[1];return get_bounds_rhs(f,cfg,1,addr,rhs,tbls);
           case 1:
            var _la_=stm$0[2];
            if(0 === _la_[0]){var stm$1=stm$0[3],stm$0=stm$1;continue}
            var _lb_=stm$0[3];
            if(typeof _lb_ !== "number" && 0 === _lb_[0])
             {var
               rhs2=_lb_[1],
               match=get_bounds_rhs(f,cfg,0,addr,_la_,tbls),
               b1=match[2],
               tbl$0=match[1],
               match$0=get_bounds_rhs(f,cfg,1,addr,rhs2,[0,tbl$0,stack]),
               b2=match$0[2],
               tbl$1=match$0[1];
              return [0,tbl$1,max(1 + b1 | 0,b2)]}
            break;
           default:
            var _lc_=stm$0[4];
            if(typeof _lc_ === "number")
             if(2 <= _lc_)
              {var
                stm2=stm$0[3],
                stm1=stm$0[2],
                match$1=get_bounds_stm(f,cfg,addr,stm1,tbls),
                b1$0=match$1[2],
                tbl$2=match$1[1],
                match$2=get_bounds_stm(f,cfg,addr,stm2,[0,tbl$2,stack]),
                b2$0=match$2[2],
                tbl$3=match$2[1];
               return [0,tbl$3,max(b1$0,b2$0)]}}
        throw [0,Assert_failure,_hW_]}}
    function get_bounds(cfg)
     {try
       {var
         _k9_=0,
         _k__=
          [0,
           fold_left
            (function(tbl,param)
              {var fallback=param[3],methods=param[2],addr=param[1];
               if(fallback)
                var
                 fb=fallback[1],
                 _k$_=[0,any_method_decl_of_fallback(fb),methods];
               else
                var _k$_=methods;
               return fold_left
                       (function(tbl,m)
                         {function f(param,tbl)
                           {var match=param[2],b=match[2],addr=param[1],stm=b[3];
                            return get_bounds_stm(f,cfg,addr,stm,tbl)}
                          return get_bound(f,[0,addr,m],1,[0,tbl,0])[1]},
                        tbl,
                        _k$_)},
             _k9_,
             cfg)];
        return _k__}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Cycle){var l=exn[2];return [1,l]}
        throw exn}}
    function maxargs_block(param)
     {var params=param[1];return var_list_length(params)}
    var _ib_=0;
    function _ic_(m,param){var b=param[2];return max(m,maxargs_block(b))}
    var _id_=0;
    function _ie_(m,param)
     {var
       fallback=param[3],
       methods=param[2],
       _k8_=fold(0,maxargs_block,fallback);
      return max(m,max(fold_left(_ic_,_ib_,methods),_k8_))}
    function with_maxargs_and_stack_bound(f,cfg)
     {var match$0=get_bounds(cfg);
      if(0 === match$0[0])
       {var
         l$0=match$0[1],
         _k4_=0,
         max_stack=
          fold_left
           (function(m,param){var n=param[2];return max(m,n)},_k4_,l$0);
        return caml_call3(f,l$0,fold_left(_ie_,_id_,cfg),max_stack)}
      var l$1=match$0[1];
      if(l$1)
       {var
         l=l$1[2],
         _k1_=l$1[1][1],
         match=_k1_[2],
         m=match[1],
         a=_k1_[1],
         _k2_=symbol(_hZ_,symbol(a,symbol(_hY_,symbol(pp_meth(0,m),_hX_)))),
         _k3_=rev(l);
        return symbol
                (_h7_,
                 symbol
                  (fold_left
                    (function(acc,param)
                      {var
                        is_tail=param[2],
                        _k5_=param[1],
                        match=_k5_[2],
                        m=match[1],
                        a=_k5_[1],
                        _k6_=is_tail?_h2_:_h6_,
                        _k7_=symbol(_h3_,symbol(_k6_,_h1_));
                       return symbol
                               (acc,
                                symbol
                                 (_h5_,symbol(a,symbol(_h4_,symbol(pp_meth(0,m),_k7_)))))},
                     _h0_,
                     _k3_),
                   _k2_))}
      throw [0,Assert_failure,_h8_]}
    function symbol$0(s1,s2){return symbol(s1,symbol(_if_,s2))}
    var stack_address=symbol$0(stack,caml_new_string("1")),bottom=[0,min_int];
    function string_of_meth(addr,m)
     {var _k0_=concat(_ig_,pp_tag_list(m[2]));
      return symbol$0(addr,symbol$0(m[3],_k0_))}
    function int_of_address(n){return [0,caml_hash(10,100,0,n)]}
    function int_of_meth(m){return [0,caml_hash(10,100,0,[0,m[2],m[3]])]}
    function int_of_bool(param){return 0 === param?_ih_:_ii_}
    function assign_gamma(k,v,param)
     {if(param)
       {var tl=param[2],p=param[1],k$0=p[1];
        return caml_equal(k,k$0)?[0,[0,k,v],tl]:[0,p,assign_gamma(k,v,tl)]}
      throw [0,Assert_failure,_ij_]}
    function assign(k,v,init)
     {var
       _kV_=init[7],
       _kW_=init[6],
       _kX_=init[5],
       _kY_=init[4],
       _kZ_=assign_gamma(k,v,init[3]);
      return [0,init[1],init[2],_kZ_,_kY_,_kX_,_kW_,_kV_]}
    function lookup_gamma(k,gamma)
     {try
       {var _kT_=assoc(k,gamma);return _kT_}
      catch(_kU_)
       {_kU_ = caml_wrap_exception(_kU_);
        if(_kU_ === Not_found)throw [0,Assert_failure,_ik_];
        throw _kU_}}
    function lookup(status,k){return lookup_gamma(k,status[3])}
    function address_of(status,v)
     {var a=lookup(status,v);
      try
       {var
         _kP_=status[7],
         _kQ_=
          find
            (function(param)
              {var c=param[1];return caml_equal(int_of_address(c),a)},
             _kP_)
           [1];
        return _kQ_}
      catch(_kR_)
       {_kR_ = caml_wrap_exception(_kR_);
        if(_kR_ === Not_found)
         {error(symbol(_in_,v));
          error(symbol(_io_,pp_expr$0(a)));
          var _kO_=status[7];
          error
           (symbol(_iq_,concat(_ip_,map(function(_kS_){return _kS_[1]},_kO_))));
          throw [0,Assert_failure,_ir_]}
        throw _kR_}}
    function type_of_address(status,expr)
     {if(typeof expr === "number")
       {if(1 === expr)return address_of(status,msg_sender)}
      else
       switch(expr[0])
        {case 0:var v=expr[1];return address_of(status,v[2]);
         case 1:
          var v$0=expr[1];
          return address_of(status,symbol$0(status[6],v$0[2]));
         case 13:var a=expr[1];return a
         }
      return status[6]}
    function type_of_iexpr(status,expr)
     {if(typeof expr !== "number")
       switch(expr[0])
        {case 0:var v=expr[1];return lookup(status,v[2]);
         case 1:
          var v$0=expr[1];return lookup(status,symbol$0(status[6],v$0[2]));
         case 2:
          var e2=expr[2],e1=expr[1],_kK_=type_of_iexpr(status,e2);
          return [2,type_of_iexpr(status,e1),_kK_];
         case 3:
          var e2$0=expr[2],e1$0=expr[1],_kL_=type_of_iexpr(status,e2$0);
          return [3,type_of_iexpr(status,e1$0),_kL_];
         case 4:
          var e2$1=expr[2],e1$1=expr[1],_kM_=type_of_iexpr(status,e2$1);
          return [4,type_of_iexpr(status,e1$1),_kM_];
         case 5:
          var e2$2=expr[2],e1$2=expr[1],_kN_=type_of_iexpr(status,e2$2);
          return [5,type_of_iexpr(status,e1$2),_kN_];
         case 6:var e=expr[1];return [6,type_of_iexpr(status,e)];
         case 13:var b=expr[1];return [0,b];
         case 14:
          var a=expr[1];
          return lookup(status,symbol$0(type_of_address(status,a),balance))
         }
      return lookup(status,msg_value)}
    function type_of_pred(status,expr)
     {if(typeof expr !== "number")
       switch(expr[0])
        {case 1:
          var v$0=expr[1],_kE_=int_of_bool(1);
          return [3,lookup(status,symbol$0(status[6],v$0[2])),_kE_];
         case 7:
          var e2=expr[2],e1=expr[1],_kF_=type_of_iexpr(status,e2);
          return [1,type_of_iexpr(status,e1),_kF_];
         case 8:
          var e2$0=expr[2],e1$0=expr[1],_kG_=type_of_iexpr(status,e2$0);
          return [2,type_of_iexpr(status,e1$0),_kG_];
         case 9:
          switch(expr[1])
           {case 0:return _is_;
            case 1:
             var e2$1=expr[3],e1$1=expr[2],_kH_=type_of_iexpr(status,e2$1);
             return [3,type_of_iexpr(status,e1$1),_kH_];
            case 2:
             var
              e2$2=expr[3],
              e1$2=expr[2],
              e1$3=type_of_pred(status,e1$2),
              e2$3=type_of_pred(status,e2$2);
             return [5,[4,e1$3,e2$3],[4,[6,e1$3],[6,e2$3]]];
            default:
             var
              a2=expr[3],
              a1=expr[2],
              a1$0=int_of_address(type_of_address(status,a1)),
              a2$0=int_of_address(type_of_address(status,a2));
             return [3,a1$0,a2$0]}
         case 10:
          var e2$4=expr[2],e1$4=expr[1],_kI_=type_of_pred(status,e2$4);
          return [4,type_of_pred(status,e1$4),_kI_];
         case 11:
          var e2$5=expr[2],e1$5=expr[1],_kJ_=type_of_pred(status,e2$5);
          return [5,type_of_pred(status,e1$5),_kJ_];
         case 12:var p=expr[1];return [6,type_of_pred(status,p)];
         case 13:var b=expr[1];return [0,b]
         }
      var v=expr[1],_kD_=int_of_bool(1);
      return [3,lookup(status,v[2]),_kD_]}
    function type_of_expr(status,tag,expr)
     {switch(tag)
       {case 0:return [0,-306849112,int_of_unit];
        case 1:return [0,-306849112,type_of_iexpr(status,expr)];
        case 2:return [0,345791162,type_of_pred(status,expr)];
        default:
         return [0,-306849112,int_of_address(type_of_address(status,expr))]}}
    function revert(status)
     {var _kC_=status[1];return [0,map(function(v){return [1,v]},_kC_)]}
    function if_then_else(p,t1,t2)
     {return caml_equal(t1,t2)?t1:[2,[0,[0,p,t1],[0,[0,[6,p],t2],0]]]}
    function forall_boolean(status,l,f)
     {var acc$0=acc,param=l;
      for(;;)
       {if(param)
         {var _kB_=param[1];
          if(345791162 <= _kB_[1])
           {var
             tl=param[2],
             p=_kB_[2],
             acctrue=
              map
               (function(p)
                  {return function(param)
                    {var accl=param[2],accp=param[1];
                     return [0,[4,accp,p],[0,int_of_bool(1),accl]]}}
                 (p),
                acc$0),
             accfalse=
              map
               (function(p)
                  {return function(param)
                    {var accl=param[2],accp=param[1];
                     return [0,[4,accp,[6,p]],[0,int_of_bool(0),accl]]}}
                 (p),
                acc$0),
             acc$1=op(acctrue,accfalse),
             acc$0=acc$1,
             param=tl;
            continue}
          var
           tl$0=param[2],
           expr=_kB_[2],
           acc$2=
            map
             (function(expr)
                {return function(param)
                  {var accl=param[2],accp=param[1];
                   return [0,accp,[0,expr,accl]]}}
               (expr),
              acc$0),
           acc$0=acc$2,
           param=tl$0;
          continue}
        var
         aux=
          function(param)
           {if(param)
             {var
               ll=param[2],
               match=param[1],
               l=match[2],
               p=match[1],
               typ=caml_call1(f,l);
              return if_then_else(p,typ,aux(ll))}
            return revert(status)};
        return aux(acc$0)}}
    var _iu_=[0,0,0,0];
    function type_of_expr_poly(status)
     {if(! _iu_[1])
       {if(public_methods === 0)
         var _kt_=new_table([0]);
        else
         {var l=public_methods.length - 1;
          if(0 === l)
           var tags=[0];
          else
           {var
             r=caml_make_vect(l,f$0(public_methods[1])),
             _ko_=l - 1 | 0,
             _kn_=1;
            if(! (_ko_ < 1))
             {var i=_kn_;
              for(;;)
               {r[1 + i] = f$0(public_methods[1 + i]);
                var _kp_=i + 1 | 0;
                if(_ko_ !== i){var i=_kp_;continue}
                break}}
            var tags=r}
          var
           table=new_table(tags),
           _kr_=public_methods.length - 1 - 1 | 0,
           _kq_=0;
          if(! (_kr_ < 0))
           {var i$0=_kq_;
            for(;;)
             {var met=public_methods[1 + i$0],lab=(i$0 * 2 | 0) + 2 | 0;
              table[3] = caml_call3(Meths[4],met,lab,table[3]);
              table[4] = caml_call3(Labs[4],lab,1,table[4]);
              var _ks_=i$0 + 1 | 0;
              if(_kr_ !== i$0){var i$0=_ks_;continue}
              break}}
          var _kt_=table}
        var
         _ku_=new_variable(_kt_,_iv_),
         label=get_method_label(_kt_,_iw_),
         element=
          function(self_1)
           {var env=self_1[1 + _ku_],_ky_=env[1];
            return function(_kz_,_kA_){return type_of_expr(_ky_,_kz_,_kA_)}};
        method_count[1]++;
        if(caml_call2(Labs[27],label,_kt_[4]))
         {resize$0(_kt_,label + 1 | 0);
          caml_check_bound(_kt_[2],label)[1 + label] = element}
        else
         _kt_[6] = [0,[0,label,element],_kt_[6]];
        var
         _kv_=
          function(_kx_)
           {var obj=caml_obj_block(248,_kt_[1]);
            obj[1] = _kt_[2];
            var _kw_=caml_set_oo_id(obj);
            _kw_[1 + _ku_] = _kx_;
            return _kw_};
        inst_var_count[1] = (inst_var_count[1] + _kt_[1] | 0) - 1 | 0;
        _kt_[8] = rev(_kt_[8]);
        resize$0
         (_kt_,3 + ((caml_check_bound(_kt_[2],1)[2] * 16 | 0) / 32 | 0) | 0);
        _iu_[1] = _kv_}
      return caml_call1(_iu_[1],[0,status])}
    function type_of_call0(status,addr,meth,value,sender,params)
     {var _kg_=tag_list_length(meth[2]);
      if(length(params) === _kg_)
       {var
         name=string_of_meth(addr,meth),
         aux=
          function(i)
           {if(status[4] < i)return 0;
            var _km_=aux(i + 1 | 0);
            return [0,
                    lookup(status,symbol$0(stack,caml_new_string("" + i))),
                    _km_]},
         stack$0=aux(1),
         _kh_=op([0,sender,[0,value,params]],stack$0),
         _ki_=status[2],
         _kj_=op(map(function(_kl_){return lookup(status,_kl_)},_ki_),_kh_),
         _kk_=status[1],
         args=op(map(function(v){return [1,v]},_kk_),_kj_);
        return [1,name,args]}
      throw [0,Assert_failure,_ix_]}
    function match_method(status,addr,meth,params)
     {try
       {var meths=assoc(addr,status[7])}
      catch(_kf_)
       {_kf_ = caml_wrap_exception(_kf_);
        if(_kf_ === Not_found)throw [0,Assert_failure,_iy_];
        throw _kf_}
      function aux(meth,params,meths)
       {var meths$0=meths;
        for(;;)
         {if(meths$0)
           {var
             tl=meths$0[2],
             _ke_=meths$0[1],
             payable=_ke_[2],
             match=_ke_[1],
             meth$0=match[1],
             match$0=eq_tag_list(meth[2],meth$0[2]);
            if(match$0)
             if(caml_string_equal(meth[3],meth$0[3]))
              return [0,meth$0,payable,params];
            var meths$0=tl;
            continue}
          throw Not_found}}
      try
       {var _kb_=[0,aux(meth,params,meths)];return _kb_}
      catch(_kc_)
       {_kc_ = caml_wrap_exception(_kc_);
        if(_kc_ === Not_found)
         try
          {var _ka_=[0,aux(fallback,0,meths)];return _ka_}
         catch(_kd_)
          {_kd_ = caml_wrap_exception(_kd_);
           if(_kd_ === Not_found)return 0;
           throw _kd_}
        throw _kc_}}
    function type_of_call(status,tag,addr,meth,value$0,sender,params)
     {var
       addr$0=type_of_address(status,addr),
       match=match_method(status,addr$0,meth,params);
      if(match)
       {var
         match$0=match[1],
         params$0=match$0[3],
         payable=match$0[2],
         meth$0=match$0[1],
         _j9_=0 !== eq_tag(tag,0)?1:0,
         output_type_ok=_j9_ || (0 !== eq_tag(tag,meth$0[1])?1:0),
         payable_ok=payable || (0 === value$0?1:0);
        if(output_type_ok)
         if(payable_ok)
          {var
            value=
             fold
              (_it_,function(_j$_){return type_of_iexpr(status,_j$_)},value$0),
            _j__=meth$0[2],
            params$1=expr_list_map(type_of_expr_poly(status),_j__,params$0);
           return forall_boolean
                   (status,
                    params$1,
                    function(params)
                     {return type_of_call0
                              (status,addr$0,meth$0,value,sender,params)})}
        return revert(status)}
      return revert(status)}
    function tchoice(status,guards_and_typs)
     {function aux(guard,param)
       {if(param)
         {var tl=param[2],match=param[1],typ=match[2],g=match[1];
          return [0,[0,g,typ],aux([5,guard,g],tl)]}
        return [0,[0,[6,guard],revert(status)],0]}
      return [2,aux(_iz_,guards_and_typs)]}
    function forall_contract(status,otherwise,f)
     {var
       _j8_=status[7],
       l=
        map
         (function(param)
           {var ms=param[2],c=param[1];return caml_call2(f,c,ms)},
          _j8_);
      return tchoice(status,op(l,otherwise))}
    function type_of_cont(status,ret)
     {return type_of_call0(status,runtime,dispatch,dummy,dummy,[0,ret,0])}
    function type_of_stm(status,tag,stm)
     {var status$0=status,stm$0=stm;
      for(;;)
       {if(typeof stm$0 === "number")
         switch(stm$0)
          {case 1:return type_of_cont(status$0,int_of_unit);
           case 2:return revert(status$0)
           }
        else
         switch(stm$0[0])
          {case 0:
            var _jP_=stm$0[1];
            if(0 === _jP_[0])
             {var e=_jP_[1],e$0=type_of_expr(status$0,tag,e);
              if(345791162 <= e$0[1])
               {var
                 p=e$0[2],
                 cont1=type_of_cont(status$0,int_of_bool(1)),
                 cont2=type_of_cont(status$0,int_of_bool(0));
                return if_then_else(p,cont1,cont2)}
              var e$1=e$0[2];
              return type_of_cont(status$0,e$1)}
            var
             args1=_jP_[4],
             val1=_jP_[3],
             m1=_jP_[2],
             a1=_jP_[1],
             sender=int_of_address(status$0[6]);
            return type_of_call(status$0,tag,a1,m1,val1,sender,args1);
           case 1:
            var _jQ_=stm$0[2],_jR_=stm$0[1];
            if(0 === _jQ_[0])
             {var stm$1=stm$0[3],e$2=_jQ_[1],lhs_tag=tag_of_lhs(_jR_);
              if(typeof _jR_ === "number")
               var lhs=0;
              else
               if(0 === _jR_[0])
                var f=_jR_[1],lhs=[0,symbol$0(status$0[6],f[2])];
               else
                var v=_jR_[1],lhs=[0,v[2]];
              if(lhs)
               {var lhs$0=lhs[1],match=type_of_expr(status$0,lhs_tag,e$2);
                if(345791162 <= match[1])
                 {var
                   p$0=match[2],
                   status1=assign(lhs$0,int_of_bool(1),status$0),
                   typ1=type_of_stm(status1,tag,stm$1),
                   status2=assign(lhs$0,int_of_bool(0),status$0),
                   typ2=type_of_stm(status2,tag,stm$1);
                  return if_then_else(p$0,typ1,typ2)}
                var
                 e$3=match[2],
                 status$1=assign(lhs$0,e$3,status$0),
                 status$0=status$1,
                 stm$0=stm$1;
                continue}
              var stm$0=stm$1;
              continue}
            var _jS_=stm$0[3];
            if(typeof _jS_ === "number")
             var switch$0=0;
            else
             if(0 === _jS_[0])
              {var
                _jT_=_jS_[1],
                _jU_=_jQ_[4],
                _jV_=_jQ_[3],
                _jW_=_jQ_[2],
                _jX_=_jQ_[1];
               if(0 === _jT_[0])
                var switch$0=1;
               else
                {if(! _jT_[3])
                  {var
                    args2=_jT_[4],
                    m2=_jT_[2],
                    a2=_jT_[1],
                    _jY_=m2[2],
                    args2$0=
                     expr_list_map(type_of_expr_poly(status$0),_jY_,args2),
                    addr=int_of_address(type_of_address(status$0,a2)),
                    meth=int_of_meth(m2),
                    sender$0=int_of_address(status$0[6]),
                    value=type_of_iexpr(status$0,2);
                   return forall_boolean
                           (status$0,
                            args2$0,
                            function(args2)
                             {var
                               l=[0,addr,[0,meth,[0,value,[0,sender$0,args2]]]],
                               _j0_=length(l),
                               l$0=op(l,mk_list(bottom,status$0[5] - _j0_ | 0)),
                               gamma=[0,status$0[3]],
                               _j1_=status$0[4],
                               _j2_=status$0[5] + 1 | 0;
                              if(! (_j1_ < _j2_))
                               {var i=_j1_;
                                for(;;)
                                 {var
                                   _j4_=gamma[1],
                                   _j5_=gamma[1],
                                   _j6_=
                                    lookup_gamma
                                     (symbol$0(stack,caml_new_string("" + (i - status$0[5] | 0))),
                                      _j5_);
                                  gamma[1]
                                  =
                                  assign_gamma
                                   (symbol$0(stack,caml_new_string("" + i)),_j6_,_j4_);
                                  var _j7_=i - 1 | 0;
                                  if(_j2_ !== i){var i=_j7_;continue}
                                  break}}
                              var n=1,param=l$0;
                              for(;;)
                               {if(param)
                                 {var tl=param[2],hd=param[1],_j3_=gamma[1];
                                  gamma[1]
                                  =
                                  assign_gamma
                                   (symbol$0(stack,caml_new_string("" + n)),hd,_j3_);
                                  var n$0=n + 1 | 0,n=n$0,param=tl;
                                  continue}
                                var
                                 status=
                                  [0,
                                   status$0[1],
                                   status$0[2],
                                   gamma[1],
                                   status$0[4],
                                   status$0[5],
                                   status$0[6],
                                   status$0[7]];
                                return type_of_call
                                        (status,tag_of_lhs(_jR_),_jX_,_jW_,_jV_,sender$0,_jU_)}})}
                 var switch$0=1}}
             else
              var switch$0=0;
            break;
           default:
            var _jZ_=stm$0[4];
            if(typeof _jZ_ === "number")
             if(2 <= _jZ_)
              {var
                stm2=stm$0[3],
                stm1=stm$0[2],
                guard=stm$0[1],
                guard$0=type_of_pred(status$0,guard),
                stm1$0=type_of_stm(status$0,tag,stm1),
                stm2$0=type_of_stm(status$0,tag,stm2);
               return if_then_else(guard$0,stm1$0,stm2$0)}}
        throw [0,Assert_failure,_iA_]}}
    function args_of_var_list(param)
     {if(param)
       {var tl=param[2],n=param[1],_jN_=args_of_var_list(tl),_jO_=n[2];
        return [0,[0,0 !== eq_tag(3,n[1])?1:0,_jO_],_jN_]}
      return 0}
    function type_of_a_method0
     (k$1,frame_size,fields,contracts,this$0,name,args,locals,typ_of)
     {var
       fields$0=map(function(_jM_){return _jM_[2]},fields),
       args$0=map(function(_jL_){return _jL_[2]},args),
       locals$0=map(function(_jK_){return _jK_[2]},locals),
       saved_gamma=map(function(n){return symbol(n,saved)},fields$0),
       opt=0,
       k=k$1;
      for(;;)
       {if(opt)var sth=opt[1],acc=sth;else var acc=0;
        if(0 === k)
         {var
           other_params=
            op(fields$0,op([0,msg_sender,[0,msg_value,args$0]],acc)),
           _jI_=map(function(v){return [0,v,bottom]},locals$0),
           gamma=op(map(function(v){return [0,v,[1,v]]},other_params),_jI_),
           status=
            [0,saved_gamma,fields$0,gamma,k$1,frame_size,this$0,contracts],
           typ=caml_call1(typ_of,status),
           _jJ_=op(saved_gamma,other_params);
          return [0,string_of_meth(this$0,name),_jJ_,typ]}
        var
         k$0=k - 1 | 0,
         opt$0=[0,[0,symbol$0(stack,caml_new_string("" + k)),acc]],
         opt=opt$0,
         k=k$0;
        continue}}
    function type_of(max_args,max_stack,cfg)
     {var
       contracts=
        map
         (function(param)
           {var
             fb=param[3],
             methods=param[2],
             a=param[1],
             _jH_=fb?[0,[0,[0,fallback],1],0]:0;
            return [0,
                    a,
                    op
                     (map
                       (function(param)
                         {var payable=param[3],m=param[1];return [0,[0,m],payable]},
                        methods),
                      _jH_)]},
          cfg),
       frame_size=4 + max_args | 0,
       k=caml_mul(frame_size,1 + max_stack | 0),
       _jb_=0,
       fields=
        rev
         (fold_left
           (function(acc,contr)
             {var
               fields=contr[4],
               a$0=contr[1],
               accu=0,
               param=fields,
               _jF_=[0,[0,0,symbol$0(a$0,balance)],0];
              for(;;)
               {if(param)
                 {var
                   l=param[2],
                   a=param[1],
                   f=a[1],
                   _jG_=symbol$0(a$0,f[2]),
                   accu$0=[0,[0,0 !== eq_tag(f[1],3)?1:0,_jG_],accu],
                   accu=accu$0,
                   param=l;
                  continue}
                return op(op(accu,_jF_),acc)}},
            _jb_,
            cfg)),
       _jc_=0,
       program_rev=
        fold_left
         (function(acc,contr)
           {var fb=contr[3],meths=contr[2],a=contr[1];
            if(fb)
             var
              fb$0=fb[1],
              _jA_=op(meths,[0,any_method_decl_of_fallback(fb$0),0]);
            else
             var _jA_=meths;
            var _jB_=0;
            return op
                    (fold_left
                      (function(acc,meth)
                        {var
                          block=meth[2],
                          name=meth[1],
                          locals=block[2],
                          args=block[1],
                          locals$0=args_of_var_list(locals),
                          args$0=args_of_var_list(args),
                          param$0=op(fields,args$0),
                          accu=0,
                          param=param$0,
                          _jC_=[0,msg_sender,0];
                         for(;;)
                          {if(param)
                            {var
                              l=param[2],
                              x=param[1],
                              v$0=x[2],
                              b=x[1],
                              match=b?[0,v$0]:0;
                             if(match)
                              {var v=match[1],accu$0=[0,v,accu],accu=accu$0,param=l;
                               continue}
                             var param=l;
                             continue}
                           var
                            to_sum_on=op(rev(accu),_jC_),
                            aux=
                             function(status,param)
                              {if(param)
                                {var tl=param[2],v=param[1];
                                 return forall_contract
                                         (status,
                                          0,
                                          function(a,param)
                                           {var
                                             a$0=int_of_address(a),
                                             _jE_=aux(assign(v,a$0,status),tl);
                                            return [0,[3,lookup(status,v),a$0],_jE_]})}
                               var stm=block[3];
                               return type_of_stm(status,name[1],stm)};
                           return [0,
                                   type_of_a_method0
                                    (k,
                                     frame_size,
                                     fields,
                                     contracts,
                                     a,
                                     name,
                                     args$0,
                                     locals$0,
                                     function(_jD_){return aux(_jD_,to_sum_on)}),
                                   acc]}},
                       _jB_,
                       _jA_),
                     acc)},
          _jc_,
          cfg),
       ret$0=[1,ret],
       _jd_=0,
       _je_=
        [0,
         type_of_a_method0
          (k,
           frame_size,
           fields,
           contracts,
           runtime,
           dispatch,
           [0,[0,1,ret],0],
           0,
           function(status$0)
            {var
              is_empty=[3,lookup(status$0,stack_address),bottom],
              _jt_=0,
              _ju_=status$0[2],
              otherwise=
               [0,
                [0,
                 is_empty,
                 [0,map(function(_jz_){return lookup(status$0,_jz_)},_ju_)]],
                _jt_],
              gamma=[0,status$0[3]],
              _jk_=status$0[4] - status$0[5] | 0,
              _jj_=1;
             if(! (_jk_ < 1))
              {var i$0=_jj_;
               for(;;)
                {var
                  _jp_=gamma[1],
                  _jq_=gamma[1],
                  _jr_=
                   lookup_gamma
                    (symbol$0
                      (stack,caml_new_string("" + (i$0 + status$0[5] | 0))),
                     _jq_);
                 gamma[1]
                 =
                 assign_gamma
                  (symbol$0(stack,caml_new_string("" + i$0)),_jr_,_jp_);
                 var _js_=i$0 + 1 | 0;
                 if(_jk_ !== i$0){var i$0=_js_;continue}
                 break}}
             var
              _jl_=(status$0[4] - status$0[5] | 0) + 1 | 0,
              _jm_=status$0[4];
             if(! (_jm_ < _jl_))
              {var i=_jl_;
               for(;;)
                {var _jn_=gamma[1];
                 gamma[1]
                 =
                 assign_gamma
                  (symbol$0(stack,caml_new_string("" + i)),bottom,_jn_);
                 var _jo_=i + 1 | 0;
                 if(_jm_ !== i){var i=_jo_;continue}
                 break}}
             function read(i)
              {if(status$0[5] < i)return 0;
               var _jx_=read(i + 1 | 0),_jy_=status$0[3];
               return [0,
                       lookup_gamma(symbol$0(stack,caml_new_string("" + i)),_jy_),
                       _jx_]}
             var
              status=
               [0,
                status$0[1],
                status$0[2],
                gamma[1],
                status$0[4],
                status$0[5],
                status$0[6],
                status$0[7]],
              l=read(1),
              _jf_=length(l);
             if(status$0[5] === _jf_)
              {if(l)
                {var _jg_=l[2];
                 if(_jg_)
                  {var _jh_=_jg_[2];
                   if(_jh_)
                    {var _ji_=_jh_[2];
                     if(_ji_)
                      {var
                        params=_ji_[2],
                        sender=_ji_[1],
                        value=_jh_[1],
                        meth=_jg_[1],
                        addr=l[1];
                       return forall_contract
                               (status,
                                otherwise,
                                function(addr$0,meths)
                                 {function f(param)
                                   {var
                                     match=param[1],
                                     meth$0=match[1],
                                     params$0=prefix(tag_list_length(meth$0[2]),[0,ret$0,params]),
                                     _jw_=
                                      type_of_call0(status,addr$0,meth$0,value,sender,params$0);
                                    return [0,[3,meth,int_of_meth(meth$0)],_jw_]}
                                  var _jv_=tchoice(status,map(f,meths));
                                  return [0,[3,addr,int_of_address(addr$0)],_jv_]})}}}}
               throw [0,Assert_failure,_il_]}
             throw [0,Assert_failure,_im_]}),
         _jd_];
      return op(rev(program_rev),_je_)}
    var document=window$0.document;
    set_error
     (function(msg)
       {var errors=document.getElementById("errors");
        if(errors == no_handler)throw [0,Assert_failure,_iB_];
        appendChild(errors,document.createTextNode(msg.toString()));
        return appendChild(errors,document.createElement("br"))});
    function transform(f,param)
     {var
       doc_in=window.doc_in,
       x=doc_in.getValue(),
       input=caml_js_to_string(x),
       output=caml_call1(f,input),
       y=output.toString(),
       doc_out=window.doc_out;
      doc_out.setValue(y);
      return 0}
    function _iC_(_ja_){return test_string(pp_configuration,_ja_)}
    function parse(_i$_){return transform(_iC_,_i$_)}
    function _iD_(c){return pp_configuration(normalize(c))}
    function _iE_(_i__){return test_string(_iD_,_i__)}
    function normalize$0(_i9_){return transform(_iE_,_i9_)}
    function _iF_(c)
     {var c$0=normalize(c);
      return with_maxargs_and_stack_bound
              (function(bounds,m,n)
                {var
                  _i6_=
                   symbol
                    (_iJ_,
                     symbol
                      (_iI_,
                       symbol
                        (caml_new_string("" + m),
                         symbol(_iH_,symbol(_iG_,caml_new_string("" + n))))));
                 return symbol
                         (fold_left
                           (function(acc,param)
                             {var
                               b=param[2],
                               _i7_=param[1],
                               match=_i7_[2],
                               m=match[1],
                               a=_i7_[1],
                               _i8_=symbol(_h__,caml_new_string("" + b));
                              return symbol
                                      (acc,
                                       symbol
                                        (_ia_,symbol(a,symbol(_h$_,symbol(pp_meth(0,m),_i8_)))))},
                            _h9_,
                            bounds),
                          _i6_)},
               c$0)}
    function _iK_(_i5_){return test_string(_iF_,_i5_)}
    function get_bounds$0(_i4_){return transform(_iK_,_i4_)}
    function _iL_(c)
     {var c$0=normalize(c);
      return with_maxargs_and_stack_bound
              (function(param,max_args,max_stack)
                {var l=type_of(max_args,max_stack,c$0);
                 return concat(_c$_,map(pp_function,l))},
               c$0)}
    function _iM_(_i3_){return test_string(_iL_,_i3_)}
    function type_of$0(_i2_){return transform(_iM_,_i2_)}
    function _iN_(c)
     {var c$0=normalize(c);
      return with_maxargs_and_stack_bound
              (function(param,max_args,max_stack)
                {var
                  l$0=type_of(max_args,max_stack,c$0),
                  _i1_=0,
                  l=
                   rev
                    (fold_left
                      (function(acc,f)
                        {var typ=f[3],vars=f[2],name=f[1];
                         return op(compute_typ([0,name,vars],typ),acc)},
                       _i1_,
                       l$0));
                 return concat(_ct_,map(pp_eqn,l))},
               c$0)}
    function _iO_(_i0_){return test_string(_iN_,_i0_)}
    function cost(_iZ_){return transform(_iO_,_iZ_)}
    function copy_output_to_input(param)
     {var doc_in=window.doc_out,x=doc_in.getValue(),doc_out=window.doc_in;
      doc_out.setValue(x);
      return 0}
    export$0(_iP_,caml_js_wrap_callback(parse));
    export$0(_iQ_,caml_js_wrap_callback(normalize$0));
    export$0(_iR_,caml_js_wrap_callback(get_bounds$0));
    export$0(_iS_,caml_js_wrap_callback(type_of$0));
    export$0(_iT_,caml_js_wrap_callback(cost));
    export$0(_iU_,caml_js_wrap_callback(copy_output_to_input));
    do_at_exit(0);
    return}
  (function(){return this}()));

//# sourceMappingURL=analyzer.map
