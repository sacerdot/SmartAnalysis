// Generated by js_of_ocaml 3.5.2
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(s1,i1,s2,i2,len)
     {return caml_blit_bytes(s1,i1,s2,i2,len)}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString = function(){return caml_to_js_string(this)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_new_string(s){return new MlBytes(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi){return [255,lo,mi,hi]}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 0xff,
              x[2] >> 16,
              x[2] >> 8 & 0xff,
              x[2] & 0xff,
              x[1] >> 16,
              x[1] >> 8 & 0xff,
              x[1] & 0xff]}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return [255,
              a[7] | a[6] << 8 | a[5] << 16,
              a[4] | a[3] << 8 | a[2] << 16,
              a[1] | a[0] << 8]}
    function caml_int64_float_of_bits(x)
     {var lo=x[1],mi=x[2],hi=x[3],exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return [255,
              lo & 0xffffff,
              lo >>> 24 & 0xff | (hi & 0xffff) << 8,
              hi >>> 16 & 0xffff]}
    function caml_int64_hi32(v){return v[2] >>> 8 & 0xffff | v[3] << 16}
    function caml_int64_lo32(v){return v[1] | (v[2] & 0xff) << 24}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    if(! Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 0xffff) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_hash(x)
     {var lo=x[1] | (x[2] & 0xff) << 24,hi=x[2] >>> 8 & 0xffff | x[3] << 16;
      return lo ^ hi}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(a instanceof MlBytes)
        return 252;
       else
        if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
         {var tag=a[0] | 0;return tag == 254?0:tag}
        else
         if(a instanceof String)
          return 1252;
         else
          if(typeof a == "string")
           return 1252;
          else
           if(a instanceof Number)
            return 1000;
           else
            if(a && a.caml_custom)
             return 1255;
            else
             if(a && a.compare)
              return 1256;
             else
              if(typeof a == "function")
               return 1247;
              else
               if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b)
              {var x=caml_string_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             var x=caml_int64_compare(a,b);if(x != 0)return x | 0;break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlBytes?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlBytes?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res !== 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlBytes)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hash_mix_string_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string_str(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_string_str(h,v.c);break;
        case 2:h = caml_hash_mix_string_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            case 255:h = caml_hash_mix_int64(h,v);num--;break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(v instanceof MlBytes)
           {h = caml_hash_mix_string(h,v);num--}
          else
           if(v === (v | 0))
            {h = caml_hash_mix_int(h,v + v + 1);num--}
           else
            if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           case 255:
            count--;
            hash_accu = hash_accu * 65599 + obj[1] + (obj[2] << 24) | 0;
            break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(obj instanceof MlBytes)
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(obj === (obj | 0))
           {count--;hash_accu = hash_accu * 65599 + obj | 0}
          else
           if(obj === + obj)
            {count--;
             var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
             for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
           else
            if(obj && obj.caml_custom)
             if
              (caml_custom_ops[obj.caml_custom]
               &&
               caml_custom_ops[obj.caml_custom].hash)
              {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
               hash_accu = hash_accu * 65599 + h | 0}}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_ml_string_length(s){return s.l}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:sign = 0;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       (),
     caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_bytes_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(x instanceof MlBytes)
        return 252;
       else
        if(x instanceof Function || typeof x == "function")
         return 247;
        else
         if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_string_of_bytes(s){return s}
    function caml_sys_const_backend_type()
     {return [0,caml_new_string("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    var
     caml_argv=
      function()
        {var g=joo_global_object,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;
           main = argv[1];
           args = raw_array_sub(argv,2,argv.length - 2)}
         var p=caml_js_to_string(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_js_to_string(args[i]));
         return args2}
       ();
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_js_to_string(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     s=caml_new_string("hd");
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _e_=caml_new_string("input"),
     _d_=caml_new_string("%.12g"),
     _c_=caml_new_string("."),
     _a_=caml_new_string("true"),
     _b_=caml_new_string("false"),
     _f_=caml_new_string("Char.chr"),
     _h_=caml_new_string("Bytes.blit"),
     _g_=caml_new_string("String.sub / Bytes.sub"),
     _k_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _j_=caml_new_string(""),
     _i_=caml_new_string("String.concat"),
     _l_=caml_new_string("CamlinternalLazy.Undefined"),
     _o_=[0,caml_new_string("stream.ml"),53,12],
     _p_=[0,0],
     _q_=[0,caml_new_string("stream.ml"),82,12],
     _m_=caml_new_string("Stdlib.Stream.Failure"),
     _n_=caml_new_string("Stdlib.Stream.Error"),
     _r_=caml_new_string("x"),
     _c0_=caml_new_string("OCAMLRUNPARAM"),
     _cY_=caml_new_string("CAMLRUNPARAM"),
     _s_=caml_new_string(""),
     _v_=caml_new_string(""),
     _w_=caml_new_string(""),
     _x_=caml_new_string(""),
     _y_=caml_new_string(""),
     _A_=caml_new_string(""),
     _z_=caml_new_string(""),
     _u_=caml_new_string("Illegal character "),
     _B_=caml_new_string("Js_of_ocaml__Js.Error"),
     _C_=caml_new_string("jsError"),
     _N_=caml_new_string("this"),
     _O_=caml_new_string("msg.sender"),
     _P_=caml_new_string("msg.value"),
     _Q_=caml_new_string(")"),
     _R_=caml_new_string(" + "),
     _S_=caml_new_string("("),
     _T_=caml_new_string(")"),
     _U_=caml_new_string(" - "),
     _V_=caml_new_string("("),
     _W_=caml_new_string(")"),
     _X_=caml_new_string(" * "),
     _Y_=caml_new_string("("),
     _Z_=caml_new_string(")"),
     ___=caml_new_string(" / "),
     _$_=caml_new_string("("),
     _aa_=caml_new_string("-"),
     _ab_=caml_new_string(")"),
     _ac_=caml_new_string(" >= "),
     _ad_=caml_new_string("("),
     _ae_=caml_new_string(")"),
     _af_=caml_new_string(" > "),
     _ag_=caml_new_string("("),
     _ah_=caml_new_string(")"),
     _ai_=caml_new_string(" = "),
     _aj_=caml_new_string("("),
     _ak_=caml_new_string(")"),
     _al_=caml_new_string(" /\\\\ "),
     _am_=caml_new_string("("),
     _an_=caml_new_string(")"),
     _ao_=caml_new_string(" \\\\/ "),
     _ap_=caml_new_string("("),
     _aq_=caml_new_string("~"),
     _ar_=caml_new_string(".balance"),
     _aE_=caml_new_string(""),
     _aF_=caml_new_string("revert"),
     _aG_=caml_new_string("return "),
     _aH_=caml_new_string("; "),
     _aI_=caml_new_string(" }; "),
     _aJ_=caml_new_string(" } else { "),
     _aK_=caml_new_string(" { "),
     _aL_=caml_new_string("if "),
     _a6_=caml_new_string("\n"),
     _a2_=caml_new_string("}\n"),
     _a3_=caml_new_string("\n"),
     _a4_=caml_new_string(" {\n"),
     _a5_=caml_new_string("contract "),
     _a0_=caml_new_string("   function "),
     _a1_=caml_new_string(""),
     _aZ_=caml_new_string("\n"),
     _aX_=caml_new_string(" "),
     _aY_=caml_new_string("   "),
     _aO_=caml_new_string(";\n"),
     _aP_=caml_new_string("     "),
     _aM_=caml_new_string("\n   }\n\n"),
     _aN_=caml_new_string("      "),
     _aQ_=caml_new_string(""),
     _aR_=caml_new_string("   {\n"),
     _aS_=caml_new_string("payable "),
     _aW_=caml_new_string(""),
     _aT_=caml_new_string(") "),
     _aU_=caml_new_string(","),
     _aV_=caml_new_string("("),
     _az_=caml_new_string(")"),
     _aA_=caml_new_string(","),
     _aB_=caml_new_string("("),
     _aC_=caml_new_string("."),
     _aD_=caml_new_string(""),
     _aw_=caml_new_string(" := "),
     _ax_=caml_new_string(" := "),
     _ay_=caml_new_string(""),
     _as_=caml_new_string(")"),
     _at_=caml_new_string(" -> "),
     _au_=caml_new_string("*"),
     _av_=caml_new_string(":("),
     _K_=caml_new_string(";\n"),
     _L_=caml_new_string("   "),
     _M_=caml_new_string(""),
     _J_=caml_new_string(" "),
     _G_=caml_new_string("int"),
     _H_=caml_new_string("bool"),
     _I_=caml_new_string("address"),
     _D_=[0,0],
     _E_=[0,0],
     _F_=[0,0],
     _bj_=[0,[0,caml_new_string("-")],0],
     _bm_=[0,caml_new_string("parserCombinator.ml"),160,10],
     _bl_=caml_new_string("(..) not found"),
     _bk_=caml_new_string(" vs "),
     _bf_=caml_new_string("false"),
     _bg_=caml_new_string("true"),
     _bh_=[13,1],
     _bi_=[13,0],
     _be_=caml_new_string(" should have type "),
     _a8_=caml_new_string("\n"),
     _a9_=caml_new_string("Kwd "),
     _a__=caml_new_string("Ident "),
     _a$_=caml_new_string("int "),
     _ba_=caml_new_string("float "),
     _bb_=caml_new_string("string "),
     _bc_=caml_new_string("char "),
     _bd_=caml_new_string(""),
     _a7_=caml_new_string("ParserCombinator.Fail"),
     _bE_=caml_new_string("-"),
     _bF_=[0,caml_new_string("-")],
     _bG_=[0,caml_new_string("/")],
     _bH_=[0,caml_new_string("*")],
     _bI_=[0,caml_new_string("+")],
     _bJ_=caml_new_string("!"),
     _bK_=caml_new_string(")"),
     _bL_=caml_new_string("("),
     _bM_=[0,caml_new_string("<=")],
     _bN_=[0,caml_new_string("<")],
     _bO_=[0,caml_new_string(">=")],
     _bP_=[0,caml_new_string(">")],
     _bQ_=[0,caml_new_string("!=")],
     _bR_=[0,caml_new_string("==")],
     _bS_=[0,caml_new_string("||")],
     _bT_=[0,caml_new_string("&&")],
     _bU_=caml_new_string(")"),
     _bV_=caml_new_string("("),
     _ca_=caml_new_string("}"),
     _cb_=caml_new_string("{"),
     _cc_=caml_new_string(";"),
     _cd_=caml_new_string("else"),
     _ce_=caml_new_string("then"),
     _cf_=caml_new_string("if"),
     _cR_=caml_new_string("error"),
     _cS_=caml_new_string("######## SYNTAX ERROR #######\n"),
     _cT_=caml_new_string("error"),
     _cU_=caml_new_string("######## TYPING ERROR #######\n"),
     _cp_=[0,198079127,caml_new_string("the fallback method must be payable")],
     _cm_=caml_new_string(":"),
     _cn_=caml_new_string("function"),
     _cj_=caml_new_string("}"),
     _ck_=caml_new_string("{"),
     _cl_=caml_new_string("payable"),
     _cg_=[0,0],
     _ch_=[0,0],
     _ci_=caml_new_string(","),
     _b$_=caml_new_string("return"),
     _b__=[0,198079127,caml_new_string("epsilon not allowed here")],
     _b9_=[0,caml_new_string("revert")],
     _bZ_=caml_new_string(";"),
     _bC_=caml_new_string(")"),
     _bD_=caml_new_string("("),
     _by_=caml_new_string(" vs "),
     _bz_=caml_new_string(" not found"),
     _bx_=caml_new_string("!"),
     _bw_=caml_new_string(" || "),
     _bv_=caml_new_string(" && "),
     _bu_=caml_new_string(" == "),
     _bt_=caml_new_string(" >= "),
     _bs_=caml_new_string(" > "),
     _br_=caml_new_string(" / "),
     _bq_=caml_new_string(" * "),
     _bp_=caml_new_string(" - "),
     _bo_=caml_new_string("-"),
     _bn_=caml_new_string(" + "),
     _bB_=[0,caml_new_string("this")],
     _bW_=caml_new_string("bool"),
     _bY_=caml_new_string("int"),
     _b4_=caml_new_string(","),
     _ct_=caml_new_string(")"),
     _cv_=caml_new_string("("),
     _cx_=caml_new_string("function"),
     _cD_=caml_new_string("}"),
     _cG_=caml_new_string("{"),
     _cI_=caml_new_string("contract"),
     _cQ_=
      caml_list_of_js_array
       ([caml_new_string("+"),
         caml_new_string("-"),
         caml_new_string("*"),
         caml_new_string("/"),
         caml_new_string("("),
         caml_new_string(")"),
         caml_new_string(">"),
         caml_new_string(">="),
         caml_new_string("=="),
         caml_new_string("<"),
         caml_new_string("<="),
         caml_new_string("!="),
         caml_new_string("&&"),
         caml_new_string("||"),
         caml_new_string("!"),
         caml_new_string("true"),
         caml_new_string("false"),
         caml_new_string("int"),
         caml_new_string("bool"),
         caml_new_string("="),
         caml_new_string(","),
         caml_new_string(";"),
         caml_new_string("fail"),
         caml_new_string("if"),
         caml_new_string("then"),
         caml_new_string("else"),
         caml_new_string("{"),
         caml_new_string("function"),
         caml_new_string("}"),
         caml_new_string("return"),
         caml_new_string(":"),
         caml_new_string("this"),
         caml_new_string("."),
         caml_new_string("value"),
         caml_new_string("balance"),
         caml_new_string("msg"),
         caml_new_string("sender"),
         caml_new_string("contract"),
         caml_new_string("payable")]),
     _cW_=[0,caml_new_string("analyzer.ml"),9,79],
     _cV_=[0,caml_new_string("analyzer.ml"),6,105],
     _cX_=caml_new_string("eval");
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    caml_ml_open_descriptor_out(2);
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_ks_)
             {_ks_ = caml_wrap_exception(_ks_);
              if(_ks_[1] !== Sys_error)throw _ks_;
              var _kr_=_ks_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    caml_sys_get_argv(0);
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0);
    caml_fresh_oo_id(0);
    function hd(param){if(param){var a=param[1];return a}throw [0,Failure,s]}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    typeof match === "number";
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function make(n,c)
     {var s=caml_create_bytes(n);
      caml_fill_bytes(s,0,n,c);
      return caml_string_of_bytes(s)}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _km_=param[2],_kn_=param[1];
            if(_km_)
             {var
               x=(caml_ml_string_length(_kn_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(_i_),
               acc=acc$0,
               param=_km_;
              continue}
            var _kq_=caml_ml_string_length(_kn_) + acc | 0}
          else
           var _kq_=acc;
          var dst=caml_create_bytes(_kq_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _ko_=param$0[2],_kp_=param$0[1];
              if(_ko_)
               {caml_blit_string(_kp_,0,dst,pos,caml_ml_string_length(_kp_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_kp_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_kp_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_ko_;
                continue}
              caml_blit_string(_kp_,0,dst,pos,caml_ml_string_length(_kp_))}
            return caml_string_of_bytes(dst)}}}
      return _j_}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {index_rec(s,l,i,c);var _kk_=1;return _kk_}
        catch(_kl_)
         {_kl_ = caml_wrap_exception(_kl_);
          if(_kl_ === Not_found)return 0;
          throw _kl_}
      return invalid_arg(_k_)}
    function contains(s,c){return contains_from(s,0,c)}
    caml_fresh_oo_id(0);
    var Undefined=[248,_l_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    var
     Failure$0=[248,_m_,caml_fresh_oo_id(0)],
     Error=[248,_n_,caml_fresh_oo_id(0)];
    function fill_buff(b)
     {var len=caml_ml_bytes_length(b[2]),_kh_=b[2],_ki_=b[1];
      if(0 <= len)
       if((caml_ml_bytes_length(_kh_) - len | 0) < 0)
        var switch$0=0;
       else
        var _kj_=caml_ml_input(_ki_,_kh_,0,len),switch$0=1;
      else
       var switch$0=0;
      if(! switch$0)var _kj_=invalid_arg(_e_);
      b[3] = _kj_;
      b[4] = 0;
      return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_o_]}
           case 2:
            var
             f=d$0[1],
             _kd_=caml_obj_tag(f),
             d$1=250 === _kd_?f[1]:246 === _kd_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _ke_=d$0[1],_kf_=_ke_[1];
            if(_kf_)
             {var _kg_=_kf_[1];
              if(_kg_){var a$0=_kg_[1];_ke_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_ke_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _ke_[1] = _p_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _j__=s[2];
        if(typeof _j__ === "number")
         return 0;
        else
         switch(_j__[0])
          {case 0:var a=_j__[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_q_]}
           case 2:
            var
             f=_j__[1],
             _j$_=caml_obj_tag(f),
             _ka_=250 === _j$_?f[1]:246 === _j$_?force_lazy_block(f):f;
            s[2] = _ka_;
            continue;
           case 3:
            var _kb_=_j__[1],_kc_=_kb_[1];
            if(_kc_){var a$1=_kc_[1];return a$1}
            var x=caml_call1(_kb_[2],s[1]);
            _kb_[1] = [0,x];
            return x;
           default:
            var b=_j__[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk(param)
     {if(param)
       {var data=param[1];
        for(;;)
         {var _j8_=data[2];
          if(typeof _j8_ !== "number")
           switch(_j8_[0])
            {case 0:
              var d=_j8_[2];data[1] = data[1] + 1 | 0;data[2] = d;return 0;
             case 3:
              var _j9_=_j8_[1];
              if(_j9_[1]){data[1] = data[1] + 1 | 0;_j9_[1] = 0;return 0}
              break;
             case 4:
              var b=_j8_[1];
              if(b[3] <= b[4])fill_buff(b);
              return 0 === b[3]
                      ?(data[2] = 0,0)
                      :(data[1] = data[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
             }
          var match=peek_data(data);
          if(match)continue;
          return 0}}
      return 0}
    function next(s)
     {var match=peek(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    caml_fresh_oo_id(0);
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    try
     {var _c1_=caml_sys_getenv(_c0_),params=_c1_}
    catch(_j6_)
     {_j6_ = caml_wrap_exception(_j6_);
      if(_j6_ !== Not_found)throw _j6_;
      try
       {var _cZ_=caml_sys_getenv(_cY_),_t_=_cZ_}
      catch(_j7_)
       {_j7_ = caml_wrap_exception(_j7_);
        if(_j7_ !== Not_found)throw _j7_;
        var _t_=_s_}
      var params=_t_}
    var
     random=contains(params,82),
     prng=
      [246,
       function(_j5_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          y=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[1 + i$0] = i$0;
           var _j4_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_j4_;continue}
           var
            accu=[0,_r_],
            _jY_=0,
            x=55,
            _jZ_=caml_greaterequal(55,y)?x:y,
            _j0_=54 + _jZ_ | 0;
           if(! (_j0_ < 0))
            {var i=_jY_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,y),
                x$0=caml_check_bound(seed,k)[1 + k],
                str=symbol(accu[1],caml_new_string("" + x$0));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _j1_=accu[1],
                _jU_=caml_string_get(_j1_,3) << 24,
                _jV_=caml_string_get(_j1_,2) << 16,
                _jW_=caml_string_get(_j1_,1) << 8,
                _jX_=
                 ((caml_string_get(_j1_,0) + _jW_ | 0) + _jV_ | 0)
                 +
                 _jU_
                 |
                 0,
                _j2_=
                 (caml_check_bound(result[1],j)[1 + j] ^ _jX_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[1 + j] = _j2_;
               var _j3_=i + 1 | 0;
               if(_j0_ !== i){var i=_j3_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function indexfun(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod(caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function find(h,key)
     {var _jT_=indexfun(h,key),match=caml_check_bound(h[2],_jT_)[1 + _jT_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var
         s2=caml_create_bytes(2 * bufpos[1] | 0),
         _jR_=bufpos[1],
         _jS_=buffer[1],
         switch$0=
          0 <= _jR_
           ?(caml_ml_bytes_length(_jS_) - _jR_ | 0) < 0
             ?0
             :(caml_ml_bytes_length(s2) - _jR_ | 0) < 0
               ?0
               :(caml_blit_bytes(_jS_,0,s2,0,_jR_),1)
           :0;
        if(! switch$0)invalid_arg(_h_);
        buffer[1] = s2}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var _jP_=bufpos[1],_jQ_=buffer[1];
      if(0 <= _jP_)
       if((caml_ml_bytes_length(_jQ_) - _jP_ | 0) < 0)
        var switch$0=0;
       else
        {var r=caml_create_bytes(_jP_);
         caml_blit_bytes(_jQ_,0,r,0,_jP_);
         var _jO_=r,switch$0=1}
      else
       var switch$0=0;
      if(! switch$0)var _jO_=invalid_arg(_g_);
      var s=caml_string_of_bytes(_jO_);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var x=16;
      for(;;)
       {if(! (17 <= x))
         if(! (max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         {var
           _je_=caml_obj_tag(prng),
           _jf_=250 === _je_?prng[1]:246 === _je_?force_lazy_block(prng):prng;
          _jf_[2] = (_jf_[2] + 1 | 0) % 55 | 0;
          var
           _i$_=_jf_[2],
           curval=caml_check_bound(_jf_[1],_i$_)[1 + _i$_],
           _ja_=(_jf_[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(_jf_[1],_ja_)[1 + _ja_]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           newval30=newval & 1073741823,
           _jb_=_jf_[2];
          caml_check_bound(_jf_[1],_jb_)[1 + _jb_] = newval30;
          var seed=newval30}
        else
         var seed=0;
        var kwd_table=[0,0,caml_make_vect(x,0),seed,x],param=keywords;
        for(;;)
         {if(param)
           {var
             l=param[2],
             a=param[1],
             data$0=[0,a],
             i$1=indexfun(kwd_table,a),
             bucket=[0,a,data$0,caml_check_bound(kwd_table[2],i$1)[1 + i$1]];
            caml_check_bound(kwd_table[2],i$1)[1 + i$1] = bucket;
            kwd_table[1] = kwd_table[1] + 1 | 0;
            if(kwd_table[2].length - 1 << 1 < kwd_table[1])
             {var
               odata=kwd_table[2],
               osize=odata.length - 1,
               nsize=osize * 2 | 0;
              if(nsize < max_array_length)
               {var
                 ndata=caml_make_vect(nsize,0),
                 ndata_tail=caml_make_vect(nsize,0),
                 _jc_=kwd_table.length - 1 < 4?1:0,
                 _jd_=_jc_ || (kwd_table[4] < 0?1:0),
                 inplace=1 - _jd_;
                kwd_table[2] = ndata;
                var _jh_=osize - 1 | 0,_jg_=0;
                if(! (_jh_ < 0))
                 {var i$0=_jg_;
                  a:
                  for(;;)
                   {var
                     cell$1=caml_check_bound(odata,i$0)[1 + i$0],
                     cell=cell$1;
                    for(;;)
                     {if(cell)
                       {var
                         key=cell[1],
                         data=cell[2],
                         next=cell[3],
                         cell$0=inplace?cell:[0,key,data,0],
                         nidx=indexfun(kwd_table,key),
                         match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                        if(match)
                         match[3] = cell$0;
                        else
                         caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                        caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                        var cell=next;
                        continue}
                      var _jl_=i$0 + 1 | 0;
                      if(_jh_ !== i$0){var i$0=_jl_;continue a}
                      break}
                    break}}
                if(inplace)
                 {var _jj_=nsize - 1 | 0,_ji_=0;
                  if(! (_jj_ < 0))
                   {var i=_ji_;
                    for(;;)
                     {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
                      if(match$0)match$0[3] = 0;
                      var _jk_=i + 1 | 0;
                      if(_jj_ !== i){var i=_jk_;continue}
                      break}}}}}
            var param=l;
            continue}
          var
           ident_or_keyword=
            function(id)
             {try
               {var _jM_=find(kwd_table,id);return _jM_}
              catch(_jN_)
               {_jN_ = caml_wrap_exception(_jN_);
                if(_jN_ === Not_found)return [1,id];
                throw _jN_}},
           keyword_or_error=
            function(c)
             {var s=make(1,c);
              try
               {var _jK_=find(kwd_table,s);return _jK_}
              catch(_jL_)
               {_jL_ = caml_wrap_exception(_jL_);
                if(_jL_ === Not_found)throw [0,Error,symbol(_u_,s)];
                throw _jL_}},
           end_exponent_part=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _jJ_=match[1],switcher=_jJ_ - 48 | 0;
                  if(! (9 < switcher >>> 0)){junk(strm);store(_jJ_);continue}}
                return [0,[3,caml_float_of_string(get_string(0))]]}},
           exponent_part=
            function(strm)
             {var match=peek(strm);
              if(match)
               {var _jI_=match[1],switch$0=43 === _jI_?0:45 === _jI_?0:1;
                if(! switch$0)
                 {junk(strm);store(_jI_);return end_exponent_part(strm)}}
              return end_exponent_part(strm)},
           number=
            function(s)
             {for(;;)
               {var match=peek(s);
                if(match)
                 {var _jF_=match[1];
                  if(58 <= _jF_)
                   {var switch$0=69 === _jF_?0:101 === _jF_?0:1;
                    if(! switch$0){junk(s);store(69);return exponent_part(s)}}
                  else
                   {if(46 === _jF_)
                     {junk(s);
                      store(46);
                      for(;;)
                       {var match$0=peek(s);
                        if(match$0)
                         {var _jG_=match$0[1],_jH_=_jG_ - 69 | 0;
                          if(32 < _jH_ >>> 0)
                           {var switcher=_jH_ + 21 | 0;
                            if(! (9 < switcher >>> 0)){junk(s);store(_jG_);continue}}
                          else
                           {var switcher$0=_jH_ - 1 | 0;
                            if(30 < switcher$0 >>> 0)
                             {junk(s);store(69);return exponent_part(s)}}}
                        return [0,[3,caml_float_of_string(get_string(0))]]}}
                    if(48 <= _jF_){junk(s);store(_jF_);continue}}}
                return [0,[2,caml_int_of_string(get_string(0))]]}},
           ident2=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _jD_=match[1];
                  if(94 <= _jD_)
                   var
                    _jE_=_jD_ - 95 | 0,
                    switch$0=30 < _jE_ >>> 0?32 <= _jE_?1:0:29 === _jE_?0:1;
                  else
                   if(65 <= _jD_)
                    var switch$0=92 === _jD_?0:1;
                   else
                    if(33 <= _jD_)
                     switch(_jD_ - 33 | 0)
                      {case 0:
                       case 2:
                       case 3:
                       case 4:
                       case 5:
                       case 9:
                       case 10:
                       case 12:
                       case 14:
                       case 25:
                       case 27:
                       case 28:
                       case 29:
                       case 30:
                       case 31:var switch$0=0;break;
                       default:var switch$0=1}
                    else
                     var switch$0=1;
                  if(! switch$0){junk(strm);store(_jD_);continue}}
                return [0,ident_or_keyword(get_string(0))]}},
           neg_number=
            function(s)
             {var match=peek(s);
              if(match)
               {var _jC_=match[1],switcher=_jC_ - 48 | 0;
                if(! (9 < switcher >>> 0))
                 {junk(s);
                  reset_buffer(0);
                  store(45);
                  store(_jC_);
                  return number(s)}}
              reset_buffer(0);
              store(45);
              return ident2(s)},
           ident=
            function(strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _jA_=match[1];
                  if(91 <= _jA_)
                   var
                    _jB_=_jA_ - 95 | 0,
                    switch$0=27 < _jB_ >>> 0?97 <= _jB_?0:1:1 === _jB_?1:0;
                  else
                   var
                    switch$0=
                     48 <= _jA_?6 < (_jA_ - 58 | 0) >>> 0?0:1:39 === _jA_?0:1;
                  if(! switch$0){junk(strm);store(_jA_);continue}}
                return [0,ident_or_keyword(get_string(0))]}},
           next_token$0=
            function(counter,strm)
             {for(;;)
               {var match=peek(strm);
                if(match)
                 {var _jq_=match[1];
                  if(124 <= _jq_)
                   var switch$0=127 <= _jq_?192 <= _jq_?1:0:125 === _jq_?0:2;
                  else
                   {var _jr_=_jq_ - 65 | 0;
                    if(57 < _jr_ >>> 0)
                     if(58 <= _jr_)
                      var switch$0=0;
                     else
                      {var switcher=_jr_ + 65 | 0;
                       switch(switcher)
                        {case 34:
                          junk(strm);
                          reset_buffer(0);
                          for(;;)
                           {var match$1=peek(strm);
                            if(match$1)
                             {var _jt_=match$1[1];
                              if(34 === _jt_){junk(strm);return [0,[4,get_string(0)]]}
                              if(92 === _jt_)
                               {junk(strm);
                                try
                                 {var c$0=escape(strm)}
                                catch(_jz_)
                                 {_jz_ = caml_wrap_exception(_jz_);
                                  if(_jz_ === Failure$0)throw [0,Error,_x_];
                                  throw _jz_;
                                  var _jw_=_jz_}
                                store(c$0);
                                continue}
                              junk(strm);
                              store(_jt_);
                              continue}
                            throw Failure$0}
                         case 39:
                          junk(strm);
                          try
                           {var match$2=peek(strm);
                            if(! match$2)throw Failure$0;
                            var _ju_=match$2[1];
                            if(92 === _ju_)
                             {junk(strm);
                              try
                               {var _jv_=escape(strm)}
                              catch(_jy_)
                               {_jy_ = caml_wrap_exception(_jy_);
                                if(_jy_ === Failure$0)throw [0,Error,_y_];
                                throw _jy_}
                              var c=_jv_}
                            else
                             {junk(strm);var c=_ju_}}
                          catch(_jx_)
                           {_jx_ = caml_wrap_exception(_jx_);
                            if(_jx_ === Failure$0)throw [0,Error,_v_];
                            throw _jx_}
                          var match$0=peek(strm);
                          if(match$0)
                           if(39 === match$0[1]){junk(strm);return [0,[5,c]]}
                          throw [0,Error,_w_];
                         case 40:
                          junk(strm);
                          if(counter < 50)
                           {var counter$0=counter + 1 | 0;
                            return maybe_comment(counter$0,strm)}
                          return caml_trampoline_return(maybe_comment,[0,strm]);
                         case 45:junk(strm);return neg_number(strm);
                         case 9:
                         case 10:
                         case 12:
                         case 13:
                         case 26:
                         case 32:junk(strm);continue;
                         case 48:
                         case 49:
                         case 50:
                         case 51:
                         case 52:
                         case 53:
                         case 54:
                         case 55:
                         case 56:
                         case 57:
                          junk(strm);reset_buffer(0);store(_jq_);return number(strm);
                         case 33:
                         case 35:
                         case 36:
                         case 37:
                         case 38:
                         case 42:
                         case 43:
                         case 47:
                         case 58:
                         case 60:
                         case 61:
                         case 62:
                         case 63:
                         case 64:var switch$0=2;break;
                         default:var switch$0=0}}
                    else
                     {var _js_=_jr_ - 26 | 0;
                      if(5 < _js_ >>> 0)
                       var switch$0=1;
                      else
                       switch(_js_)
                        {case 4:var switch$0=1;break;
                         case 1:
                         case 3:var switch$0=2;break;
                         default:var switch$0=0}}}
                  switch(switch$0)
                   {case 0:junk(strm);return [0,keyword_or_error(_jq_)];
                    case 1:
                     junk(strm);reset_buffer(0);store(_jq_);return ident(strm);
                    default:
                     junk(strm);reset_buffer(0);store(_jq_);return ident2(strm)}}
                return 0}},
           maybe_comment=
            function(counter,strm)
             {var match=peek(strm);
              if(match)
               if(42 === match[1])
                {junk(strm);
                 comment(strm);
                 if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return next_token$0(counter$0,strm)}
                 return caml_trampoline_return(next_token$0,[0,strm])}
              return [0,keyword_or_error(40)]},
           next_token=
            function(strm){return caml_trampoline(next_token$0(0,strm))},
           escape=
            function(strm)
             {var match=peek(strm);
              if(match)
               {var _jn_=match[1];
                if(58 <= _jn_)
                 {var switcher=_jn_ - 110 | 0;
                  if(! (6 < switcher >>> 0))
                   switch(switcher)
                    {case 0:junk(strm);return 10;
                     case 4:junk(strm);return 13;
                     case 6:junk(strm);return 9
                     }}
                else
                 if(48 <= _jn_)
                  {junk(strm);
                   var match$0=peek(strm);
                   if(match$0)
                    {var _jo_=match$0[1],switcher$0=_jo_ - 48 | 0;
                     if(! (9 < switcher$0 >>> 0))
                      {junk(strm);
                       var match$1=peek(strm);
                       if(match$1)
                        {var _jp_=match$1[1],switcher$1=_jp_ - 48 | 0;
                         if(! (9 < switcher$1 >>> 0))
                          {junk(strm);
                           var
                            n=
                             (((_jn_ - 48 | 0) * 100 | 0)
                              +
                              ((_jo_ - 48 | 0) * 10 | 0)
                              |
                              0)
                             +
                             (_jp_ - 48 | 0)
                             |
                             0;
                           if(0 <= n)if(! (255 < n))return n;
                           return invalid_arg(_f_)}}
                       throw [0,Error,_A_]}}
                   throw [0,Error,_z_]}
                junk(strm);
                return _jn_}
              throw Failure$0},
           comment=
            function(strm)
             {b:
              for(;;)
               {var match=peek(strm);
                if(match)
                 {var switcher=match[1] - 40 | 0;
                  if(! (2 < switcher >>> 0))
                   switch(switcher)
                    {case 0:
                      junk(strm);
                      var match$0=peek(strm);
                      if(match$0)
                       {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                        junk(strm);
                        continue}
                      throw Failure$0;
                     case 1:break;
                     default:
                      junk(strm);
                      for(;;)
                       {var match$1=peek(strm);
                        if(match$1)
                         {var _jm_=match$1[1];
                          if(41 === _jm_){junk(strm);return 0}
                          if(42 === _jm_){junk(strm);continue}
                          junk(strm);
                          continue b}
                        throw Failure$0}}
                  junk(strm);
                  continue}
                throw Failure$0}};
          return function(input)
           {return from(function(count){return next_token(input)})}}}}
    var window=joo_global_object,no_handler=null,undefined$0=undefined;
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    var array_length=window.Array,Error$0=[248,_B_,caml_fresh_oo_id(0)];
    register_exception(_C_,[0,Error$0,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length?0:[0,caml_js_to_string(e.toString())]});
    function export$0(field,x)
     {var field$0=field.toString();return caml_js_export_var(0)[field$0] = x}
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    function eq_tag(t1,t2)
     {switch(t1)
       {case 0:if(0 === t2)return _D_;break;
        case 1:if(1 === t2)return _E_;break;
        default:if(2 <= t2)return _F_}
      return 0}
    function pp_tag(param)
     {switch(param){case 0:return _G_;case 1:return _H_;default:return _I_}}
    function pp_tag_list(param)
     {if(param)
       {var tl=param[2],x=param[1],_i__=pp_tag_list(tl);
        return [0,pp_tag(x),_i__]}
      return 0}
    function pp_ident(param)
     {var s=param[2],t=param[1],_i9_=symbol(_J_,s);
      return symbol(pp_tag(t),_i9_)}
    function pp_var_list(param)
     {if(param)
       {var tl=param[2],v=param[1],_i8_=pp_var_list(tl);
        return [0,pp_ident(v),_i8_]}
      return 0}
    function pp_expr(tag,param)
     {if(typeof param === "number")
       switch(param){case 0:return _N_;case 1:return _O_;default:return _P_}
      else
       switch(param[0])
        {case 0:var v=param[1];return pp_ident(v);
         case 1:var f=param[1];return pp_ident(f);
         case 2:
          var
           e2=param[2],
           e1=param[1],
           _iZ_=symbol(_R_,symbol(pp_expr(tag,e2),_Q_));
          return symbol(_S_,symbol(pp_expr(tag,e1),_iZ_));
         case 3:
          var
           e2$0=param[2],
           e1$0=param[1],
           _i0_=symbol(_U_,symbol(pp_expr(tag,e2$0),_T_));
          return symbol(_V_,symbol(pp_expr(tag,e1$0),_i0_));
         case 4:
          var
           e=param[2],
           c=param[1],
           _i1_=symbol(_X_,symbol(pp_expr(tag,e),_W_));
          return symbol(_Y_,symbol(pp_expr(tag,c),_i1_));
         case 5:
          var
           e$0=param[2],
           c$0=param[1],
           _i2_=symbol(___,symbol(pp_expr(tag,e$0),_Z_));
          return symbol(_$_,symbol(pp_expr(tag,c$0),_i2_));
         case 6:var e$1=param[1];return symbol(_aa_,pp_expr(tag,e$1));
         case 7:
          var
           e2$1=param[2],
           e1$1=param[1],
           _i3_=symbol(_ac_,symbol(pp_expr(0,e2$1),_ab_));
          return symbol(_ad_,symbol(pp_expr(0,e1$1),_i3_));
         case 8:
          var
           e2$2=param[2],
           e1$2=param[1],
           _i4_=symbol(_af_,symbol(pp_expr(0,e2$2),_ae_));
          return symbol(_ag_,symbol(pp_expr(0,e1$2),_i4_));
         case 9:
          var
           e2$3=param[3],
           e1$3=param[2],
           tag$0=param[1],
           _i5_=symbol(_ai_,symbol(pp_expr(tag$0,e2$3),_ah_));
          return symbol(_aj_,symbol(pp_expr(tag$0,e1$3),_i5_));
         case 10:
          var
           g2=param[2],
           g1=param[1],
           _i6_=symbol(_al_,symbol(pp_expr(tag,g2),_ak_));
          return symbol(_am_,symbol(pp_expr(tag,g1),_i6_));
         case 11:
          var
           g2$0=param[2],
           g1$0=param[1],
           _i7_=symbol(_ao_,symbol(pp_expr(tag,g2$0),_an_));
          return symbol(_ap_,symbol(pp_expr(tag,g1$0),_i7_));
         case 12:var g=param[1];return symbol(_aq_,pp_expr(tag,g));
         case 13:
          var v$0=param[1];
          switch(tag)
           {case 0:return caml_new_string("" + v$0);
            case 1:return v$0?_a_:_b_;
            default:return v$0}
         default:var e$2=param[1];return symbol(pp_expr(2,e$2),_ar_)}}
    function pp_expr_list(tg,match)
     {if(tg)
       {var
         tl=match[2],
         v=match[1],
         tagl=tg[2],
         tag=tg[1],
         _iY_=pp_expr_list(tagl,tl);
        return [0,pp_expr(tag,v),_iY_]}
      return 0}
    function pp_meth(param)
     {var
       id=param[3],
       tags=param[2],
       rtag=param[1],
       _iX_=symbol(_at_,symbol(pp_tag(rtag),_as_));
      return symbol
              (id,symbol(_av_,symbol(concat(_au_,pp_tag_list(tags)),_iX_)))}
    function pp_stm(tag,param)
     {if(typeof param === "number")
       return 0 === param?_aE_:_aF_;
      else
       switch(param[0])
        {case 0:var e$0=param[1];return symbol(_aG_,pp_expr(tag,e$0));
         case 1:
          var
           stm=param[3],
           rhs=param[2],
           lhs=param[1],
           _iP_=symbol(_aH_,pp_stm(tag,stm));
          switch(lhs[0])
           {case 0:var f=lhs[1],_iQ_=f[1];break;
            case 1:var v=lhs[1],_iQ_=v[1];break;
            default:var t=lhs[1],_iQ_=t}
          if(0 === rhs[0])
           var e=rhs[1],_iR_=pp_expr(_iQ_,e);
          else
           {var
             exprl=rhs[4],
             value=rhs[3],
             meth=rhs[2],
             addr=rhs[1],
             _iL_=
              symbol
               (_aB_,symbol(concat(_aA_,pp_expr_list(meth[2],exprl)),_az_));
            if(value)
             var v$1=value[1],_iM_=symbol(pp_expr(0,v$1),_aC_);
            else
             var _iM_=_aD_;
            var
             _iN_=symbol(_iM_,_iL_),
             _iO_=symbol(pp_meth(meth),_iN_),
             _iR_=symbol(pp_expr(2,addr),_iO_)}
          var _iS_=symbol(_iR_,_iP_);
          switch(lhs[0])
           {case 0:var f$0=lhs[1],_iT_=symbol(pp_ident(f$0),_aw_);break;
            case 1:var v$0=lhs[1],_iT_=symbol(pp_ident(v$0),_ax_);break;
            default:var _iT_=_ay_}
          return symbol(_iT_,_iS_);
         default:
          var
           stm3=param[4],
           stm2=param[3],
           stm1=param[2],
           c=param[1],
           _iU_=symbol(_aI_,pp_stm(tag,stm3)),
           _iV_=symbol(_aJ_,symbol(pp_stm(tag,stm2),_iU_)),
           _iW_=symbol(_aK_,symbol(pp_stm(tag,stm1),_iV_));
          return symbol(_aL_,symbol(pp_expr(1,c),_iW_))}}
    function pp_block(payable,tag,param)
     {var
       stm=param[3],
       lvl=param[2],
       vl=param[1],
       _iG_=symbol(_aN_,symbol(pp_stm(tag,stm),_aM_)),
       _iH_=pp_var_list(lvl),
       _iI_=
        symbol
         (_aR_,
          symbol
           (concat
             (_aQ_,map(function(s){return symbol(_aP_,symbol(s,_aO_))},_iH_)),
            _iG_)),
       _iJ_=payable?_aS_:_aW_,
       _iK_=symbol(_aT_,symbol(_iJ_,_iI_));
      return symbol(_aV_,symbol(concat(_aU_,pp_var_list(vl)),_iK_))}
    function pp_any_method_decl(param)
     {var
       payable=param[3],
       b=param[2],
       m=param[1],
       _iF_=symbol(_aX_,pp_block(payable,m[1],b));
      return symbol(_aY_,symbol(pp_meth(m),_iF_))}
    function pp_a_contract(param)
     {var fields=param[4],fallback=param[3],methods=param[2],addr=param[1];
      if(fallback)
       var b=fallback[1],_iC_=symbol(_a0_,pp_block(1,0,b));
      else
       var _iC_=_a1_;
      var
       _iD_=symbol(_iC_,_a2_),
       _iE_=
        symbol(_a3_,symbol(concat(_aZ_,map(pp_any_method_decl,methods)),_iD_));
      return symbol
              (_a5_,
               symbol
                (addr,
                 symbol
                  (_a4_,
                   symbol
                    (concat
                      (_M_,
                       map
                        (function(f$0)
                          {var f=f$0[1];return symbol(_L_,symbol(pp_ident(f),_K_))},
                         fields)),
                     _iE_))))}
    function pp_configuration(l){return concat(_a6_,map(pp_a_contract,l))}
    var Fail=[248,_a7_,caml_fresh_oo_id(0)];
    function fst(x,param){return x}
    function scd(param,x){return x}
    function f(l,el){return append(l,[0,el,0])}
    function print_token_list(l)
     {return concat
              (_bd_,
               map
                (function(t)
                  {switch(t[0])
                    {case 0:var x=t[1],_iA_=symbol(_a9_,x);break;
                     case 1:var x$0=t[1],_iA_=symbol(_a__,x$0);break;
                     case 2:
                      var n=t[1],_iA_=symbol(_a$_,caml_new_string("" + n));break;
                     case 3:
                      var
                       f=t[1],
                       s=caml_format_float(_d_,f),
                       l=caml_ml_string_length(s),
                       i=0;
                      for(;;)
                       {if(l <= i)
                         var _iB_=symbol(s,_c_);
                        else
                         {var
                           match=caml_string_get(s,i),
                           switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
                          if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
                          var _iB_=s}
                        var _iA_=symbol(_ba_,_iB_);
                        break}
                      break;
                     case 4:var s$0=t[1],_iA_=symbol(_bb_,s$0);break;
                     default:var c=t[1],_iA_=symbol(_bc_,make(1,c))}
                   return symbol(_iA_,_a8_)},
                 l))}
    function check_type(tag,param)
     {var e=param[2],t=param[1],match=eq_tag(tag,t);
      if(match)return e;
      var _iz_=symbol(_be_,pp_tag(tag));
      throw [0,Fail,[0,198079127,symbol(pp_expr(t,e),_iz_)]]}
    function remove_minspace(param)
     {if(param)
       {var _iy_=param[1];
        if(2 === _iy_[0])
         {var tl$0=param[2],x=_iy_[1];
          if(! (0 <= x))
           return append(_bj_,append([0,[2,- x | 0],0],remove_minspace(tl$0)))}
        var tl=param[2];
        return append([0,_iy_,0],remove_minspace(tl))}
      return 0}
    function comb_parser(pars,f,s,tbl)
     {var match=caml_call2(pars,s,tbl),nt=match[3],nast=match[2],ns=match[1];
      return [0,ns,caml_call1(f,nast),nt]}
    function get_field(tbl,varname)
     {var tbl$0=tbl;
      for(;;)
       {if(tbl$0)
         {var _ix_=tbl$0[1];
          if(0 === _ix_[0])
           {var islocal=_ix_[2],match=_ix_[1],name=match[2],tag=match[1];
            if(caml_string_equal(varname,name))
             return [0,[0,[0,[0,tag,name]],islocal]]}
          var tbl$1=tbl$0[2],tbl$0=tbl$1;
          continue}
        return 0}}
    function add_field_to_table(tbl,param,is_local)
     {var
       match=param[1],
       fieldname=match[2],
       t=match[1],
       match$0=get_field(tbl,fieldname);
      if(match$0)
       {var match$1=match$0[1][1][1],tag=match$1[1],match$2=eq_tag(tag,t);
        if(match$2)return tbl;
        var _iw_=symbol(_bk_,pp_tag(t));
        throw [0,Fail,[0,198079127,symbol(pp_tag(tag),_iw_)]]}
      return append([0,[0,[0,t,fieldname],is_local],0],tbl)}
    function remove_local_vars(param$0)
     {var accu=0,param=param$0;
      for(;;)
       {if(param)
         {var l=param[2],x=param[1];
          if(0 === x[0])
           if(0 === x[2])var switch$0=0;else var _iv_=0,switch$0=1;
          else
           var switch$0=0;
          if(! switch$0)var _iv_=1;
          if(_iv_){var accu$0=[0,x,accu],accu=accu$0,param=l;continue}
          var param=l;
          continue}
        return rev(accu)}}
    function const$0(t1,f,t2,tbl)
     {var len=0,param=t2;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        if(0 < len)
         if(caml_equal(t1,hd(t2)))
          {var _it_=caml_call1(f,t1);
           if(t2)var tl=t2[2],_iu_=tl;else var _iu_=0;
           return [0,_iu_,_it_,tbl]}
        throw [0,Fail,[0,606664323,t2]]}}
    function choice(p1,p2,s,tbl)
     {try
       {var _ir_=caml_call2(p1,s,tbl);return _ir_}
      catch(_is_)
       {_is_ = caml_wrap_exception(_is_);
        if(_is_[1] === Fail)return caml_call2(p2,s,tbl);
        throw _is_}}
    function concat$0(p1,p2,f,s,tbl)
     {var
       match=caml_call2(p1,s,tbl),
       tbl1=match[3],
       ast1=match[2],
       rest1=match[1],
       match$0=caml_call2(p2,rest1,tbl1),
       tbl2=match$0[3],
       ast2=match$0[2],
       rest2=match$0[1];
      return [0,rest2,caml_call2(f,ast1,ast2),tbl2]}
    function kleenestar(p,empty_ast,f,s,t)
     {function aux(p1,s1,acc,tbl)
       {try
         {var
           match=caml_call2(p1,s1,tbl),
           ntbl=match[3],
           ast1=match[2],
           rest1=match[1],
           _ip_=aux(p1,rest1,caml_call2(f,acc,ast1),ntbl);
          return _ip_}
        catch(_iq_)
         {_iq_ = caml_wrap_exception(_iq_);
          if(_iq_[1] === Fail)return [0,s1,acc,tbl];
          throw _iq_}}
      return aux(p,s,empty_ast,t)}
    function option(p,s,tbl)
     {try
       {var
         match=caml_call2(p,s,tbl),
         ntbl=match[3],
         res=match[2],
         next=match[1],
         _in_=[0,next,[0,res],ntbl];
        return _in_}
      catch(_io_)
       {_io_ = caml_wrap_exception(_io_);
        if(_io_[1] === Fail)return [0,s,0,tbl];
        throw _io_}}
    function choice_list(l)
     {if(l)
       {var _ii_=l[2],_ij_=l[1];
        if(_ii_)
         {var _ik_=choice_list(_ii_);
          return function(_il_,_im_){return choice(_ij_,_ik_,_il_,_im_)}}
        return _ij_}
      throw [0,Assert_failure,_bm_]}
    function kwd(str)
     {function _id_(_ih_){return 0}
      var _ie_=[0,str];
      return function(_if_,_ig_){return const$0(_ie_,_id_,_if_,_ig_)}}
    function pp_any_expr(param){var e=param[2],t=param[1];return pp_expr(t,e)}
    function plus(e1,e2)
     {if(0 === e1[1])
       if(0 === e2[1]){var v2=e2[2],v1=e1[2];return [0,0,[2,v1,v2]]}
      var _ic_=symbol(_bn_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_ic_)]]}
    function uminus(e)
     {if(0 === e[1]){var e$0=e[2];return [0,0,[6,e$0]]}
      throw [0,Fail,[0,198079127,symbol(_bo_,pp_any_expr(e))]]}
    function minus(e1,e2)
     {if(0 === e1[1])
       if(0 === e2[1]){var v2=e2[2],v1=e1[2];return [0,0,[3,v1,v2]]}
      var _ib_=symbol(_bp_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_ib_)]]}
    function mult(e1,e2)
     {if(0 === e1[1])
       if(0 === e2[1]){var v2=e2[2],v1=e1[2];return [0,0,[4,v1,v2]]}
      var _ia_=symbol(_bq_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_ia_)]]}
    function div(e1,e2)
     {if(0 === e1[1])
       if(0 === e2[1]){var v2=e2[2],v1=e1[2];return [0,0,[5,v1,v2]]}
      var _h$_=symbol(_br_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_h$_)]]}
    function gt(e2,e1)
     {if(0 === e1[1])
       if(0 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[8,v1,v2]]}
      var _h__=symbol(_bs_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_h__)]]}
    function ge(e2,e1)
     {if(0 === e1[1])
       if(0 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[7,v1,v2]]}
      var _h9_=symbol(_bt_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_h9_)]]}
    function eq(e2,e1)
     {var v2=e2[2],t2=e2[1],v1=e1[2],t1=e1[1],match=eq_tag(t1,t2);
      if(match)return [0,1,[9,t1,v1,v2]];
      var _h8_=symbol(_bu_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_h8_)]]}
    function lt(e1,e2){return gt(e2,e1)}
    function le(e1,e2){return ge(e2,e1)}
    function andb(e2,e1)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[10,v1,v2]]}
      var _h7_=symbol(_bv_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_h7_)]]}
    function orb(e2,e1)
     {if(1 === e1[1])
       if(1 === e2[1]){var v2=e2[2],v1=e1[2];return [0,1,[11,v1,v2]]}
      var _h6_=symbol(_bw_,pp_any_expr(e2));
      throw [0,Fail,[0,198079127,symbol(pp_any_expr(e1),_h6_)]]}
    function notb(e)
     {if(1 === e[1]){var v=e[2];return [0,1,[12,v]]}
      throw [0,Fail,[0,198079127,symbol(_bx_,pp_any_expr(e))]]}
    function neq(e1,e2){return notb(eq(e1,e2))}
    function varname(s,t)
     {if(s)
       {var _h5_=s[1];
        if(1 === _h5_[0]){var tl=s[2],x=_h5_[1];return [0,tl,x,t]}}
      throw [0,Fail,[0,606664323,s]]}
    function couple(el1,el2){return [0,el1,el2]}
    function _bA_(param){return 0}
    function this_pars(_h3_,_h4_){return const$0(_bB_,_bA_,_h3_,_h4_)}
    function brackets_pars(pars)
     {var _hW_=kwd(_bC_),_hX_=kwd(_bD_);
      function _hY_(_h1_,_h2_){return concat$0(_hX_,pars,scd,_h1_,_h2_)}
      return function(_hZ_,_h0_){return concat$0(_hY_,_hW_,fst,_hZ_,_h0_)}}
    function base(tag,s,tbl)
     {var
       _hL_=0,
       _hM_=
        [0,
         function(s)
          {function _hS_(tok)
            {switch(tag)
              {case 0:if(2 === tok[0]){var x=tok[1];return [13,x]}break;
               case 1:
                if(0 === tok[0])
                 {var _hV_=tok[1];
                  if(! caml_string_notequal(_hV_,_bf_))return _bi_;
                  if(! caml_string_notequal(_hV_,_bg_))return _bh_}
                break
               }
             throw [0,Fail,[0,606664323,[0,tok,0]]]}
           var _hT_=hd(s);
           return function(_hU_){return const$0(_hT_,_hS_,s,_hU_)}},
         _hL_];
      return caml_call2
              (choice_list
                ([0,
                  function(s,t)
                   {function _hN_(param)
                     {if(s)
                       {var _hO_=s[1];
                        if(1 === _hO_[0])
                         {var var$0=_hO_[1],match=get_field(t,var$0);
                          if(match)
                           {var
                             _hP_=match[1],
                             islocal=_hP_[2],
                             match$0=_hP_[1][1],
                             name=match$0[2],
                             tagfield=match$0[1];
                            if(eq_tag(tagfield,tag))
                             {var
                               _hQ_=
                                0 === islocal?[1,[0,tagfield,name]]:[0,[0,tagfield,name]];
                              return _hQ_}
                            var _hR_=symbol(_by_,pp_tag(tag));
                            throw [0,Fail,[0,198079127,symbol(pp_tag(tagfield),_hR_)]]}
                          throw [0,Fail,[0,198079127,symbol(var$0,_bz_)]]}}
                      throw [0,Fail,[0,606664323,s]]}
                    return const$0(hd(s),_hN_,s,t)},
                  _hM_]),
               s,
               tbl)}
    function atomic_int_expr(s)
     {var _hy_=[0,brackets_pars(int_expr),0];
      function _hz_(param){return uminus}
      var
       _hA_=kwd(_bE_),
       _hB_=
        [0,
         function(_hJ_,_hK_)
          {return concat$0(_hA_,atomic_int_expr,_hz_,_hJ_,_hK_)},
         _hy_];
      function _hC_(expr){return [0,0,expr]}
      var _hD_=0;
      function _hE_(_hH_,_hI_){return base(_hD_,_hH_,_hI_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_hF_,_hG_){return comb_parser(_hE_,_hC_,_hF_,_hG_)},
                  _hB_]),
               s)}
    function int_expr(s)
     {function _ht_(x,f)
       {if(f){var funct=f[1];return caml_call1(funct,x)}return x}
      function _hu_(_hw_,_hx_){return option(cont_int_expr,_hw_,_hx_)}
      return function(_hv_){return concat$0(atomic_int_expr,_hu_,_ht_,s,_hv_)}}
    function binop(s)
     {var _hd_=0;
      function _he_(param){return minus}
      var
       _hf_=
        [0,function(_hr_,_hs_){return const$0(_bF_,_he_,_hr_,_hs_)},_hd_];
      function _hg_(param){return div}
      var
       _hh_=
        [0,function(_hp_,_hq_){return const$0(_bG_,_hg_,_hp_,_hq_)},_hf_];
      function _hi_(param){return mult}
      var
       _hj_=
        [0,function(_hn_,_ho_){return const$0(_bH_,_hi_,_hn_,_ho_)},_hh_];
      function _hk_(param){return plus}
      return caml_call1
              (choice_list
                ([0,
                  function(_hl_,_hm_){return const$0(_bI_,_hk_,_hl_,_hm_)},
                  _hj_]),
               s)}
    function cont_int_expr(s)
     {function _hb_(f,x){return caml_call1(f,x)}
      return function(_hc_){return concat$0(binop,int_expr,_hb_,s,_hc_)}}
    function atomic_bool_expr(s)
     {var _gB_=0;
      function _gC_(x,f){return caml_call1(f,x)}
      function _gD_(f,x){return caml_call1(f,x)}
      function _gE_(_g$_,_ha_){return concat$0(eqop,expr_pars,_gD_,_g$_,_ha_)}
      var
       _gF_=choice_list([0,int_expr,[0,contract_expr,0]]),
       _gG_=
        [0,
         function(_g9_,_g__){return concat$0(_gF_,_gE_,_gC_,_g9_,_g__)},
         _gB_];
      function _gH_(x,f){return caml_call1(f,x)}
      function _gI_(f,x){return caml_call1(f,x)}
      function _gJ_(_g7_,_g8_){return concat$0(cmpop,int_expr,_gI_,_g7_,_g8_)}
      var
       _gK_=
        [0,
         function(_g5_,_g6_){return concat$0(int_expr,_gJ_,_gH_,_g5_,_g6_)},
         _gG_];
      function _gL_(param){return notb}
      var
       _gM_=kwd(_bJ_),
       _gN_=
        [0,
         function(_g3_,_g4_)
          {return concat$0(_gM_,atomic_bool_expr,_gL_,_g3_,_g4_)},
         _gK_],
       _gO_=kwd(_bK_),
       _gP_=kwd(_bL_);
      function _gQ_(_g1_,_g2_){return concat$0(_gP_,bool_expr,scd,_g1_,_g2_)}
      var
       _gR_=
        [0,function(_gZ_,_g0_){return concat$0(_gQ_,_gO_,fst,_gZ_,_g0_)},_gN_];
      function _gS_(expr){return [0,1,expr]}
      var _gT_=1;
      function _gU_(_gX_,_gY_){return base(_gT_,_gX_,_gY_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_gV_,_gW_){return comb_parser(_gU_,_gS_,_gV_,_gW_)},
                  _gR_]),
               s)}
    function cmpop(s)
     {var _gl_=0;
      function _gm_(param){return le}
      var
       _gn_=
        [0,function(_gz_,_gA_){return const$0(_bM_,_gm_,_gz_,_gA_)},_gl_];
      function _go_(param){return lt}
      var
       _gp_=
        [0,function(_gx_,_gy_){return const$0(_bN_,_go_,_gx_,_gy_)},_gn_];
      function _gq_(param){return ge}
      var
       _gr_=
        [0,function(_gv_,_gw_){return const$0(_bO_,_gq_,_gv_,_gw_)},_gp_];
      function _gs_(param){return gt}
      return caml_call1
              (choice_list
                ([0,
                  function(_gt_,_gu_){return const$0(_bP_,_gs_,_gt_,_gu_)},
                  _gr_]),
               s)}
    function eqop(s)
     {var _gd_=0;
      function _ge_(param){return neq}
      var
       _gf_=
        [0,function(_gj_,_gk_){return const$0(_bQ_,_ge_,_gj_,_gk_)},_gd_];
      function _gg_(param){return eq}
      return caml_call1
              (choice_list
                ([0,
                  function(_gh_,_gi_){return const$0(_bR_,_gg_,_gh_,_gi_)},
                  _gf_]),
               s)}
    function bool_expr(s)
     {function _f__(x,f){if(f){var y=f[1];return caml_call1(y,x)}return x}
      function _f$_(_gb_,_gc_){return option(cont_bool_expr,_gb_,_gc_)}
      return function(_ga_)
       {return concat$0(atomic_bool_expr,_f$_,_f__,s,_ga_)}}
    function bin_bool_op(s)
     {var _f2_=[0,eqop,0];
      function _f3_(param){return orb}
      var
       _f4_=
        [0,function(_f8_,_f9_){return const$0(_bS_,_f3_,_f8_,_f9_)},_f2_];
      function _f5_(param){return andb}
      return caml_call1
              (choice_list
                ([0,
                  function(_f6_,_f7_){return const$0(_bT_,_f5_,_f6_,_f7_)},
                  _f4_]),
               s)}
    function cont_bool_expr(s)
     {function _fX_(f,x){return caml_call1(f,x)}
      function _fY_(_f0_,_f1_){return choice(bin_bool_op,eqop,_f0_,_f1_)}
      return function(_fZ_){return concat$0(_fY_,bool_expr,_fX_,s,_fZ_)}}
    function contract_expr(s)
     {function aux(s)
       {var _fT_=[0,this_pars,[0,brackets_pars(aux),0]],_fU_=2;
        return caml_call1
                (choice_list
                  ([0,function(_fV_,_fW_){return base(_fU_,_fV_,_fW_)},_fT_]),
                 s)}
      function _fR_(expr){return [0,2,expr]}
      return function(_fS_){return comb_parser(aux,_fR_,s,_fS_)}}
    function expr_pars(s)
     {var
       _fK_=kwd(_bU_),
       _fJ_=[0,int_expr,[0,bool_expr,[0,contract_expr,0]]],
       _fL_=kwd(_bV_);
      function _fM_(_fP_,_fQ_){return concat$0(_fL_,expr_pars,scd,_fP_,_fQ_)}
      return caml_call1
              (choice_list
                ([0,
                  function(_fN_,_fO_)
                   {return concat$0(_fM_,_fK_,fst,_fN_,_fO_)},
                  _fJ_]),
               s)}
    function tag_pars(str,tag)
     {function _fF_(param){return [0,tag]}
      var _fG_=[0,str];
      return function(_fH_,_fI_){return const$0(_fG_,_fF_,_fH_,_fI_)}}
    var
     _bX_=[0,tag_pars(_bW_,1),0],
     type_pars=choice_list([0,tag_pars(_bY_,0),_bX_]),
     _b0_=0,
     islocal=0;
    function _b1_(s,t)
     {var _fB_=kwd(_bZ_);
      function _fC_(param,v){var t=param[1];return [0,[0,t,v]]}
      var
       match=
        concat$0
         (function(_fD_,_fE_)
           {return concat$0(type_pars,varname,_fC_,_fD_,_fE_)},
          _fB_,
          fst,
          s,
          t),
       tbl=match[3],
       field=match[2],
       ns=match[1];
      return [0,ns,field,add_field_to_table(tbl,field,islocal)]}
    function store_pars(_fz_,_fA_){return kleenestar(_b1_,_b0_,f,_fz_,_fA_)}
    function _b2_(expr,el){return append([0,expr,0],el)}
    var _b3_=0,_b5_=kwd(_b4_);
    function _b6_(_fx_,_fy_){return concat$0(_b5_,expr_pars,scd,_fx_,_fy_)}
    function _b7_(_fv_,_fw_){return kleenestar(_b6_,_b3_,f,_fv_,_fw_)}
    function _b8_(_ft_,_fu_){return concat$0(expr_pars,_b7_,_b2_,_ft_,_fu_)}
    brackets_pars(function(_fr_,_fs_){return option(_b8_,_fr_,_fs_)});
    function stm_pars(tag,rettag,s,t)
     {var
       _ey_=0,
       _ez_=
        [0,
         function(s,t){if(0 === rettag)return [0,s,0,t];throw [0,Fail,_b__]},
         _ey_],
       _eA_=kwd(_ca_);
      function _eB_(_fp_,_fq_){return stm_pars(tag,rettag,_fp_,_fq_)}
      function _eC_(_fn_,_fo_){return concat$0(_eB_,_eA_,fst,_fn_,_fo_)}
      var
       _eD_=kwd(_cb_),
       _eE_=
        [0,function(_fl_,_fm_){return concat$0(_eD_,_eC_,scd,_fl_,_fm_)},_ez_];
      function _eF_(param)
       {var
         stm3=param[2],
         _fk_=param[1],
         stm2=_fk_[2],
         match=_fk_[1],
         stm1=match[2],
         bexpr=match[1];
        return [2,check_type(1,bexpr),stm1,stm2,stm3]}
      function _eG_(_fi_,_fj_){return stm_pars(tag,rettag,_fi_,_fj_)}
      var _eH_=kwd(_cc_),_eI_=0;
      function _eJ_(_fg_,_fh_){return stm_pars(tag,_eI_,_fg_,_fh_)}
      var _eK_=kwd(_cd_),_eL_=0;
      function _eM_(_fe_,_ff_){return stm_pars(tag,_eL_,_fe_,_ff_)}
      var _eN_=kwd(_ce_),_eO_=kwd(_cf_);
      function _eP_(_fc_,_fd_){return concat$0(_eO_,bool_expr,scd,_fc_,_fd_)}
      function _eQ_(_fa_,_fb_){return concat$0(_eP_,_eN_,fst,_fa_,_fb_)}
      function _eR_(_e__,_e$_){return concat$0(_eQ_,_eM_,couple,_e__,_e$_)}
      function _eS_(_e8_,_e9_){return concat$0(_eR_,_eK_,fst,_e8_,_e9_)}
      function _eT_(_e6_,_e7_){return concat$0(_eS_,_eJ_,couple,_e6_,_e7_)}
      function _eU_(_e4_,_e5_){return concat$0(_eT_,_eH_,fst,_e4_,_e5_)}
      function _eV_(_e2_,_e3_){return concat$0(_eU_,_eG_,couple,_e2_,_e3_)}
      var
       _eW_=
        [0,function(_e0_,_e1_){return comb_parser(_eV_,_eF_,_e0_,_e1_)},_eE_];
      function _ew_(param,expr){return [0,check_type(tag,expr)]}
      var
       _ex_=kwd(_b$_),
       _eX_=
        [0,
         function(_eY_,_eZ_){return concat$0(_ex_,expr_pars,_ew_,_eY_,_eZ_)},
         _eW_];
      return caml_call2
              (choice_list
                ([0,
                  function(s,t)
                   {return const$0(_b9_,function(param){return 1},s,t)},
                  _eX_]),
               s,
               t)}
    function get_taglist(param)
     {if(param)
       {var tl=param[2],match=param[1],t=match[1];
        return [0,t,get_taglist(tl)]}
      return 0}
    function varlist_append(l1,l2)
     {var _ev_=l1[1];
      if(_ev_)
       {var tl=_ev_[2],hd=_ev_[1],match=varlist_append([0,tl],l2),l=match[1];
        return [0,[0,hd,l]]}
      return l2}
    function parameter_pars(s,t)
     {function _ef_(param,s){var t=param[1];return [0,[0,[0,t,s],0]]}
      function pars_varlist_singleton(_et_,_eu_)
       {return concat$0(type_pars,varname,_ef_,_et_,_eu_)}
      function _eg_(param){if(param){var s=param[1];return s}return _cg_}
      var _eh_=kwd(_ci_);
      function _ei_(_er_,_es_)
       {return concat$0(_eh_,pars_varlist_singleton,scd,_er_,_es_)}
      function _ej_(_ep_,_eq_)
       {return kleenestar(_ei_,_ch_,varlist_append,_ep_,_eq_)}
      function _ek_(_en_,_eo_)
       {return concat$0(pars_varlist_singleton,_ej_,varlist_append,_en_,_eo_)}
      var
       match=
        comb_parser
         (function(_el_,_em_){return option(_ek_,_el_,_em_)},_eg_,s,t),
       nt=match[3],
       vl=match[2],
       ns=match[1],
       tbl=nt,
       param=vl;
      for(;;)
       {var _ee_=param[1];
        if(_ee_)
         {var
           tl=_ee_[2],
           h=_ee_[1],
           param$0=[0,tl],
           tbl$0=add_field_to_table(tbl,[0,h],1),
           tbl=tbl$0,
           param=param$0;
          continue}
        return [0,ns,vl,tbl]}}
    function block_pars(tag,vl,s,t)
     {var _dR_=kwd(_cj_),_dS_=1;
      function _dT_(_ec_,_ed_){return stm_pars(tag,_dS_,_ec_,_ed_)}
      var _dU_=kwd(_ck_);
      function _dV_(param){return param?1:0}
      var _dW_=kwd(_cl_);
      function _dX_(_ea_,_eb_){return option(_dW_,_ea_,_eb_)}
      function _dY_(_d__,_d$_){return comb_parser(_dX_,_dV_,_d__,_d$_)}
      function _dZ_(_d8_,_d9_){return concat$0(_dY_,_dU_,fst,_d8_,_d9_)}
      function _d0_(_d6_,_d7_)
       {return concat$0(_dZ_,parameter_pars,couple,_d6_,_d7_)}
      var
       _d1_=
        concat$0
         (function(_d4_,_d5_){return concat$0(_d0_,_dT_,couple,_d4_,_d5_)},
          _dR_,
          fst,
          s,
          t),
       nt2=_d1_[3],
       _d2_=_d1_[2],
       stm=_d2_[2],
       _d3_=_d2_[1],
       match=_d3_[2],
       lvl=match[1],
       payable=_d3_[1],
       ns2=_d1_[1];
      return [0,ns2,[0,[0,vl,lvl,stm],payable],remove_local_vars(nt2)]}
    function any_meth_pars(s,t)
     {var _dC_=kwd(_cm_);
      function _dD_(_dP_,_dQ_){return concat$0(_dC_,type_pars,scd,_dP_,_dQ_)}
      function _dE_(_dN_,_dO_)
       {return concat$0(parameter_pars,_dD_,couple,_dN_,_dO_)}
      var
       _dF_=kwd(_cn_),
       _dG_=
        concat$0
         (function(_dL_,_dM_){return concat$0(_dF_,varname,scd,_dL_,_dM_)},
          _dE_,
          couple,
          s,
          t),
       nt1=_dG_[3],
       _dH_=_dG_[2],
       _dI_=_dH_[2],
       t$0=_dI_[2][1],
       match$1=_dI_[1],
       vl=match$1[1],
       funname=_dH_[1],
       ns1=_dG_[1],
       l=get_taglist(vl),
       tbl=nt1;
      for(;;)
       {if(tbl)
         {var _dB_=tbl[1];
          if(1 === _dB_[0])
           {var match=_dB_[1],name=match[3],tagl=match[2],rettag=match[1];
            if(caml_string_equal(funname,name))
             var match$0=[0,[0,[0,rettag,tagl,name]]],switch$0=1;
            else
             var switch$0=0}
          else
           var switch$0=0;
          if(! switch$0){var tbl$0=tbl[2],tbl=tbl$0;continue}}
        else
         var match$0=0;
        if(match$0)throw [0,Fail,[0,198079127,symbol(funname,_bl_)]];
        var
         _dJ_=block_pars(t$0,vl,ns1,append([0,[1,[0,t$0,l,funname]],0],nt1)),
         nt2=_dJ_[3],
         match$2=_dJ_[2],
         payable=match$2[2],
         block=match$2[1],
         ns2=_dJ_[1],
         _dK_=remove_local_vars(nt2);
        return [0,ns2,[0,[0,t$0,get_taglist(vl),funname],block,payable],_dK_]}}
    function methods_pars(s)
     {var _dz_=0;
      return function(_dA_){return kleenestar(any_meth_pars,_dz_,f,s,_dA_)}}
    function _co_(param)
     {var _dy_=param[1];if(0 === param[2])throw [0,Fail,_cp_];return _dy_}
    var _cq_=0,_cr_=0;
    function _cs_(_dw_,_dx_){return block_pars(_cr_,_cq_,_dw_,_dx_)}
    var _cu_=kwd(_ct_),_cw_=kwd(_cv_),_cy_=kwd(_cx_);
    function _cz_(_du_,_dv_){return concat$0(_cy_,_cw_,fst,_du_,_dv_)}
    function _cA_(_ds_,_dt_){return concat$0(_cz_,_cu_,fst,_ds_,_dt_)}
    function _cB_(_dq_,_dr_){return concat$0(_cA_,_cs_,scd,_dq_,_dr_)}
    function fallback_pars(_do_,_dp_){return comb_parser(_cB_,_co_,_do_,_dp_)}
    function _cC_(param)
     {var
       fallback=param[2],
       _dn_=param[1],
       methods=_dn_[2],
       match=_dn_[1],
       fields=match[2],
       name=match[1];
      return [0,name,methods,fallback,fields]}
    var _cE_=kwd(_cD_);
    function _cF_(_dl_,_dm_){return option(fallback_pars,_dl_,_dm_)}
    var _cH_=kwd(_cG_),_cJ_=kwd(_cI_);
    function _cK_(_dj_,_dk_){return concat$0(_cJ_,varname,scd,_dj_,_dk_)}
    function _cL_(_dh_,_di_){return concat$0(_cK_,_cH_,fst,_dh_,_di_)}
    function _cM_(_df_,_dg_)
     {return concat$0(_cL_,store_pars,couple,_df_,_dg_)}
    function _cN_(_dd_,_de_)
     {return concat$0(_cM_,methods_pars,couple,_dd_,_de_)}
    function _cO_(_db_,_dc_){return concat$0(_cN_,_cF_,couple,_db_,_dc_)}
    function _cP_(_c$_,_da_){return concat$0(_cO_,_cE_,fst,_c$_,_da_)}
    var acc=0;
    function configuration_pars(s1$0,tbl$0)
     {var s1=s1$0,acc$0=acc,tbl=tbl$0;
      for(;;)
       {if(0 === s1)return [0,s1,acc$0,tbl];
        var
         match=comb_parser(_cP_,_cC_,s1,tbl),
         ntbl=match[3],
         ast1=match[2],
         rest1=match[1],
         acc$1=f(acc$0,ast1),
         s1=rest1,
         acc$0=acc$1,
         tbl=ntbl;
        continue}}
    var lexer=make_lexer(_cQ_);
    function get_tokens(file)
     {var streamt=caml_call1(lexer,file);
      function aux(acc,s)
       {try
         {var _c9_=aux([0,next(s),acc],s);return _c9_}
        catch(_c__)
         {_c__ = caml_wrap_exception(_c__);
          if(_c__ === Failure$0)return acc;
          throw _c__}}
      return remove_minspace(rev(aux(0,streamt)))}
    function test_stream(stream)
     {try
       {var
         match=configuration_pars(get_tokens(stream),0),
         conf=match[2],
         _c7_=pp_configuration(conf);
        return _c7_}
      catch(_c8_)
       {_c8_ = caml_wrap_exception(_c8_);
        if(_c8_[1] === Fail)
         {var _c6_=_c8_[2];
          if(606664323 <= _c6_[1])
           {var l=_c6_[2];
            return symbol(_cS_,symbol(print_token_list(l),_cR_))}
          var msg=_c6_[2];
          return symbol(_cU_,symbol(msg,_cT_))}
        throw _c8_}}
    var document=window.document;
    function eval$0(param)
     {var e=document.getElementById("in");
      function _c3_(param){throw [0,Assert_failure,_cV_]}
      if(e == no_handler)
       var _c4_=no_handler;
      else
       var _c2_=e.tagName.toLowerCase() === "textarea"?e:no_handler,_c4_=_c2_;
      var
       x=get(_c4_,_c3_).value,
       s=caml_js_to_string(x),
       count=[0,0],
       stream=
        from
         (function(param)
           {var c=count[1];
            return c < caml_ml_string_length(s)
                    ?(count[1]++,[0,caml_string_get(s,c)])
                    :0}),
       o=test_stream(stream);
      function _c5_(param){throw [0,Assert_failure,_cW_]}
      var main=get(document.getElementById("out"),_c5_);
      return main.innerHTML = o.toString()}
    export$0(_cX_,caml_js_wrap_callback(eval$0));
    do_at_exit(0);
    return}
  (function(){return this}()));

//# sourceMappingURL=analyzer.map
